diff -rc libcpp/lex.c /home/khasegawa/gcc-10.2.0/libcpp/lex.c
*** libcpp/lex.c	2020-07-23 15:35:18.712399623 +0900
--- /home/khasegawa/gcc-10.2.0/libcpp/lex.c	2021-03-22 08:16:34.136001148 +0900
***************
*** 929,934 ****
--- 929,959 ----
  #endif
  }
  
+ inline bool sjis(const unsigned char* s)
+ {
+   int c = s[0];
+   if ((0x81 <= c && c <= 0x9f) || (0xe0 <= c && c <= 0xfc)) {
+     int c2 = s[1];
+     return (0x40 <= c2 && c2 <= 0x7e) || (0x80 <= c2 && c2 <= 0xfc);
+   }
+   return false;
+ }
+ 
+ const unsigned char*
+ search_line_consider_sjis(const unsigned char* s, const unsigned char* end)
+ {
+   for ( ; s != end ; ++s) {
+     if (sjis(s)) {
+       ++s;
+       continue;
+     }
+     int c = *s;
+     if (c == '\n' || c == '\r' || c == '\\' || c == '?')
+       return s;
+   }
+   return s;
+ }
+ 
  /* Returns with a logical line that contains no escaped newlines or
     trigraphs.  This is a time-critical inner loop.  */
  void
***************
*** 953,960 ****
  	 data back to memory until we have to.  */
        while (1)
  	{
  	  /* Perform an optimized search for \n, \r, \\, ?.  */
! 	  s = search_line_fast (s, buffer->rlimit);
  
  	  c = *s;
  	  if (c == '\\')
--- 976,987 ----
  	 data back to memory until we have to.  */
        while (1)
  	{
+ #if 0
  	  /* Perform an optimized search for \n, \r, \\, ?.  */
!           s = search_line_fast (s, buffer->rlimit);
! #else
!           s = search_line_consider_sjis(s, buffer->rlimit);
! #endif
  
  	  c = *s;
  	  if (c == '\\')
***************
*** 1164,1169 ****
--- 1191,1216 ----
      }
  }
  
+ inline bool jis_kanji_start(const uchar* s)
+ {
+   return s[0] == 0x1b && s[1] == 0x24 && (s[2] == 0x42 || s[2] == 0x40);
+ }
+ 
+ inline bool jis_hankakukana_start(const uchar* s)
+ {
+   return s[0] == 0x1b && s[1] == 0x28 && s[2] == 0x49;
+ }
+ 
+ inline bool jis_start(const uchar* s)
+ {
+   return jis_kanji_start(s) || jis_hankakukana_start(s);
+ }
+ 
+ inline bool jis_ascii_start(const uchar* s)
+ {
+   return s[0] == 0x1b && s[1] == 0x28 && s[2] == 0x42;
+ }
+ 
  /* Skip a C-style block comment.  We find the end of the comment by
     seeing if an asterisk is before every '/' we encounter.  Returns
     nonzero if comment terminated by EOF, zero otherwise.
***************
*** 1175,1180 ****
--- 1222,1228 ----
    cpp_buffer *buffer = pfile->buffer;
    const uchar *cur = buffer->cur;
    uchar c;
+   bool jis_state = false;
  
    cur++;
    if (*cur == '/')
***************
*** 1182,1187 ****
--- 1230,1249 ----
  
    for (;;)
      {
+       if (!jis_state && jis_start(cur)) {
+         cur += 3;
+         jis_state = true;
+         continue;
+       }
+       if (jis_state && jis_ascii_start(cur)) {
+         cur += 3;
+         jis_state = false;
+       }
+       if (jis_state) {
+         ++cur;
+         continue;
+       }
+ 
        /* People like decorating comments with '*', so check for '/'
  	 instead for efficiency.  */
        c = *cur++;
