gcc docgen 出力

(*1) doclink.exe への入力ファイルを cc1 で生成する.
(*2) パッチファイル

(*1) doclink.exe への入力ファイルを cc1 で生成する.

     これは本来 hcc1.exe と docgen.dll でやっていたこと.
     docgen.dll doclink.exe については「トップ」->「ドキュメントジェネレータ」
     を参照.

     当初は cc1 の実装で, 函数の中で,

     o グローバル変数の参照
     o 函数呼び出し
     o 構造体の参照を

     どのようにしているか当初は分からなかったので中断していた.

     現状では「cc1 アセンブラ生成の調査」でも述べたように,

c-parse.c
static void
c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
...
{
...
	fnbody = c_parser_compound_statement (parser, &endloc);
      tree fndecl = current_function_decl;   ここで停止して

(gdb) p print(fnbody)

     とすれば tree としての函数の中は表示できている.
     これと近いことを行えば doclink.exe への入力ファイルを生成することが
     できる.

     例えば

% cat /tmp/a.c
struct S {
  int m;
};

int a;

int f();

int g(struct S* ps)
{
  return a + f(ps->m);
}
%
     のようなソースに対して

$func $def g "/tmp/a.c" 9
{
    $ref $func f "/tmp/a.c" 11;
    $ref $tag S "/tmp/a.c" 11;
    $ref $var a "/tmp/a.c" 11;
}

     を出力できればよいわけだ. それぞれの意味は 11 行目で函数 f が,
     タグ S が, 変数 a が参照されているという内容だ.

     これは明らかに print(tree) よりも単純である. とはいえ, 変数が
     グローバル変数かどうかの判定や, 構造体が函数の外側で宣言されている
     かどうかの判定などは別途必要にはなる:

  void traverse_decl(tree p)
  {
    if (DECL_FILE_SCOPE_P(p))  ファイルスコープかどうか判定
      ...

     せっかくなので cc1plus にも同様の修正をしておいた. ここで
     以下のことに気付いた:

cp/parser.c:17716
      type_spec = cp_parser_class_specifier (parser);
      invoke_plugin_callbacks (PLUGIN_FINISH_TYPE, type_spec);

     のように invoke_plugin_callbacks が呼び出されていた. このように
     すればパッチではなくてダイナミックリンクライブラリで事足りるのか
     もしれないが今回は深入りしない.

(*2) パッチファイル

% ls -d gcc-10.2.0.org gcc-10.2.0
gcc-10.2.0  gcc-10.2.0.org
% diff -Naur gcc-10.2.0.org gcc-10.2.0 > docgen.diff
これだとなかなか終了しない.

修正しているファイルはだいたい覚えていたので以下のようにした.

% diff -rc gcc-10.2.0{.org,}/gcc/c-family/c-opts.c > docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/c-family/c.opt >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/common.opt >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/libcpp/directives.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/libcpp/macro.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/tree.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/c/c-parser.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/cp/tree.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/cp/parser.c >> docgen.diff

パッチの適用方法は以下のようになる:
このページの docgen.diff をダウンロードして例えば

/tmp/docgen.diff

として保存する.

% xz -d -c gcc-10.2.0.tar.xz | tar xf -
% cd gcc-10.2.0
% patch -p1 < /tmp/docgen.diff
patching file gcc/c-family/c-opts.c
patching file gcc/c-family/c.opt
patching file gcc/common.opt
Hunk #1 succeeded at 3408 (offset -4 lines).
patching file libcpp/directives.c
patching file libcpp/macro.c
patching file gcc/tree.c
Hunk #1 succeeded at 15874 (offset -9 lines).
patching file gcc/c/c-parser.c
patching file gcc/cp/tree.c
patching file gcc/cp/parser.c
Hunk #1 succeeded at 11749 (offset -5 lines).
Hunk #2 succeeded at 11809 (offset -5 lines).
Hunk #3 succeeded at 18505 (offset -5 lines).
Hunk #4 succeeded at 18561 (offset -5 lines).
Hunk #5 succeeded at 18665 (offset -5 lines).
Hunk #6 succeeded at 19088 (offset -5 lines).
Hunk #7 succeeded at 20512 (offset -10 lines).
Hunk #8 succeeded at 20668 (offset -10 lines).
Hunk #9 succeeded at 20919 (offset -10 lines).
Hunk #10 succeeded at 24286 (offset -16 lines).
%

なにやら patch がメッセージを出しているが, これは正しく適用できた
ようである.
