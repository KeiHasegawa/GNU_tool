Basic block profile

(*1) What I want to do
(*2) First sample
(*3) profile_basic_block.cpp
(*4) bbprof1.cpp
(*5) bbprof2.cpp
(*6) bbprof3.cpp

(*1) What I want to do

     Display the executed source lines of the program with high light,
     after the program ran.
     For example, this enable us to illustrate that some tests are at
     least enough or not.

(*2) First sample

     I chosed `test000.c' as a first sample. For `test000.c', expected
     results becomes like `test000.ppt'. At this point, it's `ppt' format
     but later it's better to see with web browser or editor like `emacs'.

     test000.c is built like below:

% gcc test000.c -o test000.exe

     We hope that the build way for profiling is not so different from
     above. But users have to build in a special way. For example,
     common `gprof' case:

% gcc -pg test000.c -o test000.exe
% ./test000.exe
% gprof test000.exe gmon.out

     For profiling basic block, users have to

% gcc -g -c test000.c --profile-basic-block
% gcc -g -c profile_basic_block.cpp
% gcc profile_basic_block.o test000.o -o test000.exe
% ./test000.exe
% ./bbprof.exe test000.exe bb.out

     For using `--profile-basic-block' option, you have to modify
     `gcc' as described at "gcc modification for basic block profile",
     and build `gcc' by yourself. This is very diffcult. But there is
     no way.

     Note that you have to run gcc without `--profile-basic-block' at 2nd
     line.

     `profile_basic_block.cpp' is correspond to `mcount' as described
     at "gprof investigation". And I'll require users to embeded it
     users program. Verfy ugly.

     And last command bbprof.exe is using `binutils' library. It may be
     necesssary to install from `binutils' source files.

     If this becomes standard, some complications become fewer, I hope.

(*3) profile_basic_block.cpp

     This function just writes caller address into the file. There are
     some improvement stuff but OK at this point.

     o If profile_basic_block.cpp is compiled with -O2 or -O3, it may
       not work well.

     o profile_basic_block.cpp doesn't support program using multi threads

(*4) bbprof1.cpp

     1st version of bbprof.exe outputs which function calls profiler
     function described at (*3) by investigating program file and
     profile at (*3). It should be

     source file, line and column

     but also OK at this point. Build like below:

 linux % g++ -o bbprof.exe -DPACKAGE bbprof1.cpp -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz

cygwin % g++ -o bbprof.exe -DPACKAGE bbprof1.cpp -lbfd -liberty -ldl -lz -lintl

(*5) bbprof2.cpp

     2nd version of bbprof.exe outputs source file and line number.
     I refered to addr2line program which is a part of `binutils'.
     The build way is same with (*4).

(*6) bbprof3.cpp

     3rd version o bbprof.exe outputs source file, line number and
     column. Unfortunately, there is no corresponding function in
     libbfd.a. So I coded.  Build like below:

linux
g++ -g -DPACKAGE bbprof3.cpp -c -o bbprof3.o
gcc -g -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include -DPACKAGE bbprof3_0.c -c -o bbprof3_0.o
gcc -g -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_dwarf2.c -c -o my_dwarf2.o -DDEBUGDIR=\".\"
g++ -o bbprof.exe bbprof3.o bbprof3_0.o my_dwarf2.o -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz 

cygwin
g++ -g -DPACKAGE bbprof3.cpp -c -o bbprof3.o
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include -DPACKAGE bbprof3_0.c -c -o bbprof3_0.o
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_dwarf2.c -c -o my_dwarf2.o -DDEBUGDIR=\".\"
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_coffgen.c -c -o my_coffgen.o
g++ -o bbprof.exe bbprof3.o bbprof3_0.o my_dwarf2.o my_coffgen.o -lbfd -liberty -ldl -lz -lintl

     Note that the specified options are different according to the source
     file.
     my_dwarf2.c is a almost copy of

     ~/binutils-2.36.1-2.src/binutils-2.36.1/bfd/dwarf2.c

     Similary my_coffgen.c is a almost copy of

     ~/binutils-2.36.1-2.src/binutils-2.36.1/bfd/coffgen.c

     Once rename bb.out as test000.out, and build test001.exe similaly with
     test000.exe, execute test001.exe and rename bb.out as test001.out.
     And compare like below:

% ./bbprof.exe test000.exe test000.out
test000.c:main:7.1
test000.c:f:2.1
test000.c:f:3.16.2  (*) discriminator = 2
test000.c:f:4.1.5
% ./bbprof.exe test001.exe test001.out
test001.c:main:7.1
test001.c:f:2.1
test001.c:f:3.16.1  (*) discriminator = 1
test001.c:f:4.1.5

    We can distingush by `discriminator' between test000.out and test001.out.

