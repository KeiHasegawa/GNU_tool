Basic block profile

(*1) What I want to do
(*2) First sample
(*3) profile_basic_block.cpp
(*4) bbprof1.cpp
(*5) bbprof2.cpp
(*6) bbprof3.cpp
(*7) column number
(*8) bbprof4.cpp
(*9) Generation
(*10) bbprof5.cpp
(*11) column number of `return-stmt'
(*12) exit, longjmp, throw

(*1) What I want to do

     Display the executed source lines of the program with high light,
     after the program ran.
     For example, this enable us to illustrate that some tests are at
     least enough or not.

     If I knew gcov at that point, I did not start this developement.

(*2) First sample

     I chosed `test000.c' as a first sample. For `test000.c', expected
     results becomes like `test000.html'.
     test000.c is built like below:

% gcc test000.c -o test000.exe

     We hope that the build way for profiling is not so different from
     above. But users have to build in a special way. For example,
     common `gprof' case:

% gcc -pg test000.c -o test000.exe
% ./test000.exe
% gprof test000.exe gmon.out

     For profiling basic block, users have to

% gcc -g -c test000.c --profile-basic-block
% gcc -g -c profile_basic_block.cpp
% gcc profile_basic_block.o test000.o -o test000.exe
% ./test000.exe
% ./bbprof.exe test000.exe bb.out

     For using `--profile-basic-block' option, you have to modify
     `gcc' as described at "gcc modification for basic block profile",
     and build `gcc' by yourself. This is very diffcult. But there is
     no way.

     Note that you have to run gcc without `--profile-basic-block' at 2nd
     line.

     `profile_basic_block.cpp' is correspond to `mcount' as described
     at "gprof investigation". And I'll require users to embeded it
     users program. Verfy ugly.

     And last command bbprof.exe is using `binutils' library. It may be
     necesssary to install from `binutils' source files.

     If this becomes standard, some complications become fewer, I hope.

(*3) profile_basic_block.cpp

     This function just writes caller address into the file. There are
     some improvement stuff but OK at this point.
     Improvement item:

     o If profile_basic_block.cpp is compiled with -O2 or -O3, it may
       not work well.

     o profile_basic_block.cpp doesn't support program using multi threads

     o Support only intel

     o This function always writes address into the file. This may cause
       some problem, if, for example, profiled program runs for long time.

(*4) bbprof1.cpp

     1st version of bbprof.exe outputs which function calls profiler
     function described at (*3) by investigating program file and
     profile at (*3). It should be

     source file, line and column

     but also OK at this point. Build like below:

 linux % g++ -o bbprof.exe -DPACKAGE bbprof1.cpp -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz

cygwin % g++ -o bbprof.exe -DPACKAGE bbprof1.cpp -lbfd -liberty -ldl -lz -lintl

(*5) bbprof2.cpp

     2nd version of bbprof.exe outputs source file, function name and line
     number. I refered to addr2line program which is a part of `binutils'.
     The build way is same with (*4).

(*6) bbprof3.cpp

     3rd version o bbprof.exe outputs source file, line number and
     column. Unfortunately, there is no corresponding function in
     libbfd.a. So I coded.  Build like below:

linux
g++ -g -DPACKAGE bbprof3.cpp -c -o bbprof3.o
gcc -g -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include -DPACKAGE bbprof3_0.c -c -o bbprof3_0.o
gcc -g -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_dwarf2.c -c -o my_dwarf2.o -DDEBUGDIR=\".\"
g++ -o bbprof.exe bbprof3.o bbprof3_0.o my_dwarf2.o -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz 

cygwin
g++ -g -DPACKAGE bbprof3.cpp -c -o bbprof3.o
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include -DPACKAGE bbprof3_0.c -c -o bbprof3_0.o
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_dwarf2.c -c -o my_dwarf2.o -DDEBUGDIR=\".\"
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_coffgen.c -c -o my_coffgen.o
g++ -o bbprof.exe bbprof3.o bbprof3_0.o my_dwarf2.o my_coffgen.o -lbfd -liberty -ldl -lz -lintl

     Note that the specified options are different according to the source
     file.
     my_dwarf2.c is a almost copy of

     ~/binutils-2.36.1-2.src/binutils-2.36.1/bfd/dwarf2.c

     Similary my_coffgen.c is a almost copy of

     ~/binutils-2.36.1-2.src/binutils-2.36.1/bfd/coffgen.c

     Once rename bb.out as test000.out, and build test001.exe similaly with
     test000.exe, execute test001.exe and rename bb.out as test001.out.
     And compare like below:

% ./bbprof.exe test000.exe test000.out
test000.c:main:7.1
test000.c:f:2.1
test000.c:f:3.16.2  # discriminator = 2
test000.c:f:4.1.5
% ./bbprof.exe test001.exe test001.out
test001.c:main:7.1
test001.c:f:2.1
test001.c:f:3.16.1  # discriminator = 1
test001.c:f:4.1.5
%
    We can distingush by `discriminator' between test000.out and test001.out.
    But this is not expected result. We actually want to distinguish by
    column number.

(*7) column number

    I investigated line information because the result of (*6) was not
    expected result.

    When basic blocks are created at the point which was described at
    "cc1 abstract code investigation", the column numbers were 16.
    i.e. for the below code,

int f(int a, int b, int c)
{
  return a ? b : c;
}

    gcc makes line information for 4 basic blocks, and the information
    column numbers are all 16.

    I also investigated at the point which was described at
    "gcc docgen output", where function body is expressed as a `tree'.
    Acutally, at this point, column number of line information is 12
    or 16, and they are correspond to '?' and ':' respecitively.
    A `tree' of `a ? b : c' is:

     COND_EXPR
         |
         +---- NE_EXPR
         |       |
         |       +------- PARAM_DECL (a)
         |       |
         |       +------- 0
         |
         +---- PARAM_DECL (b)
         |
         +---- PARAM_DECL (c) 

     Above COND_EXPR itself has line information. Similary above NE_EXPR
     has also. But there is no line information for `b' or `c' as 
     a primary-expression.

     Now I tried test002.c and test003.c similarly with test000.c and
     test001.c:

% ./bbprof.exe test002.exe test002.out
./bbprof.exe test002.exe test002.out 
test002.c:main:17.1
test002.c:h:12.1
test002.c:h:13.20.2   # 20 column
test002.c:g:7.1
test002.c:h:14.1.5
% ./bbprof.exe test003.exe test003.out
test003.c:main:17.1
test003.c:h:12.1
test003.c:h:13.14.1    # 14 column
test003.c:f:2.1
test003.c:h:14.1.5
%

     This is expected result. Column number 14 and 20 are correspond
     to function call `f' or `g' respectively.

     Similary I also tried test004.c and test005.c. I expected that
     I could distinguish by column number not `discriminator'. But
     the result were:

% ./bbprof.exe test004.exe test004.out
test004.c:main:7.1
test004.c:f:2.1
test004.c:f:3.20.2     # column : 20  discriminator : 2
test004.c:f:4.1.5
% ./bbprof.exe test005.exe test005.out
test005.c:main:7.1
test005.c:f:2.1
test005.c:f:3.20.1     # column : 20  discriminator : 1
test005.c:f:4.1.5
%

     So I decided to make patch file for modifing line information
     for this purpose.

     How to patch:
     Download `profile_basic_block2.diff' on this web page and save as:

/tmp/profile_basic_block2.diff

     And execute like below:

% cd gcc-10.2.0
% patch -p1 < /tmp/profile_basic_block2.diff

      Rebuild cc1 and overwrite rebuild cc1 to installed cc1.
      And again rebuld test00[0-5].exe. The results are:

% ./bbprof.exe test000.exe test000.out
test000.c:main:7.1
test000.c:f:2.1
test000.c:f:3.16.2    # 16
test000.c:f:4.1.5
% ./bbprof.exe test001.exe test001.out
test001.c:main:7.1
test001.c:f:2.1
test001.c:f:3.12.1    # 12
test001.c:f:4.1.5
% ./bbprof.exe test002.exe test002.out
test002.c:main:17.1
test002.c:h:12.1
test002.c:h:13.18.2   # 18
test002.c:g:7.1
test002.c:h:14.1.5
% ./bbprof.exe test003.exe test003.out
test003.c:main:17.1
test003.c:h:12.1
test003.c:h:13.12.1   # 12
test003.c:f:2.1
test003.c:h:14.1.5
% ./bbprof.exe test004.exe test004.out
test004.c:main:7.1
test004.c:f:2.1
test004.c:f:3.20.2    # 20
test004.c:f:4.1.5
% ./bbprof.exe test005.exe test005.out
test005.c:main:7.1
test005.c:f:2.1
test005.c:f:3.12.1    # 12
test005.c:f:4.1.5
%

     These are expected result.

(*8) bbprof4.cpp

     bbprof3.cpp does not recognize start and end address of basic
     block.

     If

     call	_profile_basic_block_

     is located, it's the start address of basic block. The end 
     address of basic block is either below:

     o Next basic block start address
     o The end of function

     So, at first, investigate address of _profile_basic_block. And
     second, for each function, investigate the address where

     call	_profile_basic_block_

     is located.
     If a function does not call _profile_basic_block_, it's not
     necessary to profile the function.

     To implement above, there are some ways. But I think disassembling is
     certain method. This program is built like below:

linux
g++ -o bbprof.exe -DPACKAGE  bbprof4.cpp -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz /home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/opcodes/libopcodes.a

cygwin
g++ -o bbprof.exe -DPACKAGE bbprof4.cpp -lbfd -liberty -Ld:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz -lintl d:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/opcodes/libopcodes.a

     This version bbprof.exe does not read `bb.out' but just program file.
     Execute like below:

% ./bbprof.exe test000.exe

     Above results shows start and end address of 4 blocks of `f'
     and 1 block of `main'.

(*9) Generation 

     If bbprof.exe generates nroff file, we can convert it to html file,
     see the contents with `man' command or `groffer' command.. So I
     chosed to generate nroff.

(*10) bbprof5.cpp

     This program generates nroff by using facility of bpprof3.cpp and
     bbprof4.cpp. Build like below:

linux
g++ -o bbprof.exe -DPACKAGE bbprof5.cpp bbprof3_0.o my_dwarf2.o -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz /home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/opcodes/libopcodes.a
     
cygwin
g++ -o bbprof.exe -DPACKAGE  bbprof5.cpp bbprof3_0.o my_dwarf2.o my_coffgen.o -lbfd -liberty -ldl -lz -lintl -lopcodes

     This version bbprof.exe is used like below:

% ./bbprof.exe test000.exe test000.out > test000.res
% man ./test000.res

     By using groff, you can convert to html:

% groff -T html test000.res > test000.html

     I noticed that groff cannot deal with the white space at the head
     of line.

     Samely with other programs, there are Japanese character problem
     in bbprof.exe. But here omitted. You can see Japanese version
     of this document.

(*11) column number of `return-stmt'

     Normally gcc outputs line information for

     return expression ;

     which is `expression' location. So for example, test018.c and test019.c
     cause the unexpected resutls. Both `return's are highlighted.
     Similary with "(*7) column number", I had to fix the line information.
     Patch file `profile_basic_block3.diff' is available. Use of it
     is the same with `profile_basic_block2.diff'.

(*12) exit, longjmp, throw

     test019.c shows the problem of `exit'. The expected result is
     calling `g' should not be highlighted. The same kind problem

     test020.c : longjmp
     test021.cpp : throw
