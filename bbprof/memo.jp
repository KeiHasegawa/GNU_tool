基本ブロックプロファイル

(*1) やりたいこと
(*2) 最初のサンプル
(*3) profile_basic_block.cpp
(*4) bbprof1.cpp
(*5) bbprof2.cpp
(*6) bbprof3.cpp
(*7) カラム数の扱い
(*8) bbprof4.cpp
(*9) 生成形式
(*10) bbprof5.cpp

(*1) やりたいこと

     プログラムを実行した後, 実行した行をハイライトさせた形で表示する.
     例えば, テストを行ったときに通っているところ, いないところを明白
     にできる.

(*2) 最初のサンプル

     test000.c を最初のサンプルに選んだ. これの期待値が test000.ppt
     である. 現状はとりあえず ppt 形式にしているのだが, これはいずれ web
     ブラウザなどで見られるようになるとよい. あるいは emacs などの
     エディタでハイライト機能があるのでそれもよい.

     test000.c は通常次のようにビルドされる.
     
% gcc test000.c -o test000.exe

     これとあまり変わらない形でビルドされなくてはならないが, ユーザーは
     プロファイルのために特別なビルドをしなくてはならない. 例えば通常の
     gprof を使用するためには

% gcc -pg test000.c -o test000.exe
% ./test000.exe
% gprof test000.exe gmon.out

     のようなことをする必要がある. 基本ブロックのプロファイルでは以下の
     ようにする必要がある:

% gcc -g -c test000.c --profile-basic-block
% gcc -g -c profile_basic_block.cpp
% gcc profile_basic_block.o test000.o -o test000.exe
% ./test000.exe
% ./bbprof.exe test000.exe bb.out

     --profile-basic-block オプションを使用するためには
     「基本ブロックプロファイルのための gcc の修正」を行う必要があり,
     自分でビルドした gcc を使用しなくてはならない. これはものすごく
     ハードルが高いが, ツールが完成していないのでしょうがない.

     また 2 つ目の gcc の実行時に --profile-basic-block を使用してはいけない.

     profile_basic_block.cpp は「gprof の調査」で述べた mcount に相当
     するもので, これをソースとしてあなたのプログラムに組み込むことを
     要求している. これもユーザーのビルド環境を変更するというなんとも
     醜悪な形になってしまっている.

     そして最後の bbprof.exe は自前のコマンドで, binutils を使う必要が
     ある. ビルドするには単純な binutils のインストールでは不十分で
     ソースからビルドする必要がある(かもしれない).

     ここまで聞くと, やめとこうということになるだろうが, これが
     標準になれば面倒臭いことがだいぶやらなくてよくなるかもしれない.

(*3) profile_basic_block.cpp

     この函数では, 呼び出し元のアドレスをファイルに書き込むことをしている.
     改善点は色々あるが現時点ではこれで十分である. 改善点を挙げてみた:

     o profile_basic_block.cpp を最適化してコンパイルすれば動作しない可能性
       がある

     o 複数スレッドを使うプログラムには対応していない

     o intel だけに対応している

(*4) bbprof1.cpp

     最初のバージョンは, プログラム内の函数のアドレスと (*3) の機能で記録し
     たアドレスから, どの函数から呼び出されているかを表示するだけのものにした.
     本当は「ソース行のどこから」という情報が必要だが, これも現時点では十分で
     ある. ビルドの方法は以下:

 linux % g++ -o bbprof.exe -DPACKAGE bbprof1.cpp -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz

cygwin % g++ -o bbprof.exe -DPACKAGE bbprof1.cpp -lbfd -liberty -ldl -lz -lintl

(*5) bbprof2.cpp

     2 つ目のバージョンは, ファイル名と行番号を表示できるようになっている.
     addr2line というプログラムが binutils にあるが参考にした. ビルドの方法は
     bbprof1.cpp と同じである.

(*6) bbprof3.cpp

     3 つ目のバージョンは, さらにカラム数を取り出せるようにしたものである.
     残念ながら libbfd.a でこの機能がないのでその部分だけ作成した. ビルドの
     方法は:

linux
g++ -g -DPACKAGE bbprof3.cpp -c -o bbprof3.o
gcc -g -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include -DPACKAGE bbprof3_0.c -c -o bbprof3_0.o
gcc -g -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -I/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_dwarf2.c -c -o my_dwarf2.o -DDEBUGDIR=\".\"
g++ -o bbprof.exe bbprof3.o bbprof3_0.o my_dwarf2.o -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz

cygwin
g++ -g -DPACKAGE bbprof3.cpp -c -o bbprof3.o
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include -DPACKAGE bbprof3_0.c -c -o bbprof3_0.o
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_dwarf2.c -c -o my_dwarf2.o -DDEBUGDIR=\".\"
gcc -g -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/bfd -Id:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/include my_coffgen.c -c -o my_coffgen.o
g++ -o bbprof.exe bbprof3.o bbprof3_0.o my_dwarf2.o my_coffgen.o -lbfd -liberty -ldl -lz -lintl

     ファイルによってオプションが少し異なっていることに注意したい.
     my_dwarf2.c は ~/binutils-2.36.1-2.src/binutils-2.36.1/bfd/dwarf2.c
     のほとんどコピーである. 同様に
     my_coffgen.c も ~/binutils-2.36.1-2.src/binutils-2.36.1/bfd/coffgen.c
     のほとんどコピーである.

     bb.out を一旦 test000.out にリネームし, test001.c を test000.c と同様に
     ビルドして test001.exe を実行し bb.out を生成し, bb.out を test001.out
     にリネームする. そして以下の結果を比較してみる:

% ./bbprof.exe test000.exe test000.out
test000.c:main:7.1
test000.c:f:2.1
test000.c:f:3.16.2        # discriminator = 2
test000.c:f:4.1.5
% ./bbprof.exe test001.exe test001.out
test001.c:main:7.1
test001.c:f:2.1
test001.c:f:3.16.1        # discriminator = 1
test001.c:f:4.1.5
%

     カラム数は同じだが discriminator (識別子) の部分が異なっている.
     discriminator のような不明なものではなくてカラム数で区別
     したかったのだが, 現状はここまで.

(*7) カラム数の扱い

     (*6) では残念ながらカラム数で区別することができなかったが, これが
     どの段階で消失(?)しているのか調べてみた.

     「cc1 の抽象コードの調査」で述べた基本ブロックが作成された段階で
     カラム数は 16 になってしまっていた. すなわち

int f(int a, int b, int c)
{
  return a ? b : c;
}

     に対して gcc は 4 つある基本ブロックのすべてが 3 行目の 16
     カラム目としている.

     「gcc docgen 出力」で述べた函数のボディを tree として表現した
     段階ではどうか. 実はこの段階でカラム数の情報は 12 か 16 しかない.
     
     12 カラムは '?' の位置で 16 カラムは ':' の位置である.
     この式は

     COND_EXPR
         |
         +---- NE_EXPR
         |       |
         |       +------- PARAM_DECL (a)
         |       |
         |       +------- 0
         |
         +---- PARAM_DECL (b)
         |
         +---- PARAM_DECL (c) 

     のようになっているから NE_EXPR の部分には行番号情報はあるが,
     b や c の部分にはもはや行番号情報はない. そして COND_EXPR
     そのものには行番号情報を持たせている.

     test002.c と test003.c をビルドし test002.exe と test003.exe
     を実行し, test002.out と test003.out を生成したところで以下を
     試してみた:

% ./bbprof.exe test002.exe test002.out
./bbprof.exe test002.exe test002.out 
test002.c:main:17.1
test002.c:h:12.1
test002.c:h:13.20.2   # 20 カラム目
test002.c:g:7.1
test002.c:h:14.1.5
% ./bbprof.exe test003.exe test003.out
test003.c:main:17.1
test003.c:h:12.1
test003.c:h:13.14.1    # 14 カラム目
test003.c:f:2.1
test003.c:h:14.1.5
%

     これは期待した結果になっている. 14 カラム目, 20 カラム目は
     ちょうど f と g の呼び出しにそれぞれ相当する.

     test004.c と test005.c についても同様のことを試してみた. 試す前に,
     期待通りカラム数で判別できると予測していたが, 実際はカラム数での
     判別はできなかった:

% ./bbprof.exe test004.exe test004.out
test004.c:main:7.1
test004.c:f:2.1
test004.c:f:3.20.2     # カラム数は 20 で discriminator = 2
test004.c:f:4.1.5
% ./bbprof.exe test005.exe test005.out
test005.c:main:7.1
test005.c:f:2.1
test005.c:f:3.20.1     # カラム数は 20 で discriminator = 1
test005.c:f:4.1.5
%

      そこでこの状況を解消するためにパッチを作成した.
      パッチの当て方はこのページにある profile_basic_block2.diff を
      例えば /tmp/profile_basic_block2.diff として保存して

% cd gcc-10.2.0
% patch -p4 < /tmp/profile_basic_block.diff

      とする. これで cc1 をビルドし直して, インストールされている cc1
      に上書きして再び test00[0-5].exe をリビルド, 再実行すれば以下の
      結果が得られる:

% ./bbprof.exe test000.exe test000.out
test000.c:main:7.1
test000.c:f:2.1
test000.c:f:3.16.2    # 16 カラム
test000.c:f:4.1.5
% ./bbprof.exe test001.exe test001.out
test001.c:main:7.1
test001.c:f:2.1
test001.c:f:3.12.1    # 12 カラム
test001.c:f:4.1.5
% ./bbprof.exe test002.exe test002.out
test002.c:main:17.1
test002.c:h:12.1
test002.c:h:13.18.2   # 18 カラム
test002.c:g:7.1
test002.c:h:14.1.5
% ./bbprof.exe test003.exe test003.out
test003.c:main:17.1
test003.c:h:12.1
test003.c:h:13.12.1   # 12 カラム
test003.c:f:2.1
test003.c:h:14.1.5
% ./bbprof.exe test004.exe test004.out
test004.c:main:7.1
test004.c:f:2.1
test004.c:f:3.20.2    # 20 カラム
test004.c:f:4.1.5
% ./bbprof.exe test005.exe test005.out
test005.c:main:7.1
test005.c:f:2.1
test005.c:f:3.12.1    # 12 カラム
test005.c:f:4.1.5
%

     これは期待した結果になっている.

(*8) bbprof4.cpp

     bbprof3.cpp は函数 _profile_basic_block_ がどこから呼び出された
     かを特定することはできたが, 函数を構成する基本ブロックを認識できて
     いない.
     
     基本ブロックの先頭は

     call	_profile_basic_block_

     という命令である. そしてこの基本ブロックの終わりは次の基本ブロックの
     先頭か, 函数の終わりである.

     まず _profile_basic_block_ がどこに配置されているかを調べる.
     次に各函数に対してそのアドレスに call を発行している部分を
     調べる.

     その函数が _profile_basic_block_ を呼び出していないのならば,
     プロファイル対象外の函数ということになる.
     
     やり方はいろいろあるが, 逆アセンブルするのが一番確実かと思いその
     ようにした. ビルドの方法は以下のようにする:

linux
g++ -o bbprof.exe -DPACKAGE  bbprof4.cpp -lbfd -liberty -L/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz /home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/opcodes/libopcodes.a

cygwin
g++ -o bbprof.exe -DPACKAGE bbprof4.cpp -lbfd -liberty -Ld:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/libiberty -ldl -lz -lintl d:/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/opcodes/libopcodes.a

     この 4 番目のバージョンは bb.out に相当するものを読み込まないで,
     単にプログラムファイルから基本ブロックの範囲を抜粋するだけにした.
     以下のように実行する.

% ./bbprof.exe test000.exe

     f の基本ブロック 4 つと main の基本ブロック 1 つに対して,
     先頭アドレスと最後のアドレスを表示する.

(*9) 生成形式

     nroff 形式で結果を生成するのがお手軽かと考えた. こうしておけば
     html 形式への変換も可能だし, man コマンド等で見ることもできる.
     emacs から man を起動できるのであれば emacs で見ることもできる.

(*10) bbprof5.cpp

     bbprof3.cpp と bbprof4.cpp の機能から nroff 形式で結果を生成する.
