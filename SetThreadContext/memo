Windows で ptrace 相当を行う.

(*1) やりたいこと
(*2) 事前に判明していること
(*3) 最初の簡易デバッガ

(*1) やりたいこと
    「ptrace に関する調査」でも書いたようにメモリ破壊のバグを追跡したい.
    勿論 Visual Studio や cygwin 版の gdb で簡単に分かりそうなものはこんなことを
    する必要は全くない.

(*2) 事前に判明していること
    「cygwin 版 gdb の watch コマンド調査」で SetThreadContext がポイントとなる
    Win32API であるということ.

(*3) 最初の簡易デバッガ
    まずはデバッグされるプログラムを単純に起動して, 終了するという何とも役に立ちそうも
    ないものを作成する. ここはスキップしてもよい => (*4) へ.

    test000/test000.c は馴染みのあるデバッグされる側のプログラムである.

    test001/test001.c がここで問題にしている最初の簡易デバッガである.

    ポイントは

    (a) CreateProcessA を呼び出すときに第 6 引数 dwCreationFlags に
        DEBUG_ONLY_THIS_PROCESS を指定するということ

    (b) (a) の後にイベント待ちループに入る. イベントは WaitForDebugEvent で
        取得できる

    (c) イベントに対する処理をしたら ContinueDebugEvent を呼び出して (b)
    	から繰り返す

    ということである.

    Visual Studio のデバッガから実行してみるとこのプログラムの動きがよく分かると思
    う. 一方

    % x64/Debug/test001.exe

    のようにデバッガなしで実行すると表示結果が少し異なる. とはいえ, 今はこの
    表示の同期をとることは目的ではないので次に進む.

    ひとつ気付くことは「ブレークポイントにヒットした」という内容のイベントが
    発生していることである. 勿論 test000.c には int3 命令を発行するような
    コードは入っていない. この原因は後に明らかになるだろう.

    test001.c は cygwin の gcc でもコンパイルできている. そして期待通り動作している.

    % gcc -g test001.c -o test001.exe
    % gdb test001.exe
    ...
    % ./test001.exe

    当たり前なのかもしれないが, ここにはものすごい誰かの努力があるのだろう.
    test001.c に私は #ifdef 等を書く必要はなかったことに注意されたい.

(*4)

Debug.print &my_array[1000]
test000.exe!0x00007ff7c3d0d8a0 {0x00000000}
>Debug.print main
0x00007ff7c3d01750 {test000.exe!main(...)}
>

>Debug.print &my_array[1000]
test000.exe!0x00007ff7c3d0d8a0 {0x00000000}
>Debug.print main
0x00007ff7c3d01750 {test000.exe!main(...)}


Visual Studio VC++ のインクルードディレクトリ

D:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29910\include
D:\Windows Kits\10\Include\10.0.17763.0\ucrt

D:\Windows Kits\10\Include\10.0.17763.0\um

ucrt の他にも

  cppwinrt
  shared
  um
  winrt

があるらしい.

D:\Windows Kits\10\Include\10.0.17763.0\um\errhandlingapi.h

私は最近 Microsoft のマニュアルを読んでいてこの函数は, ...

NO_ERROR : エラーなし

普通のプログラマならば, これがマクロでおそらくどこかのファイルで

#define NO_ERROR 0

のように定義というか宣言がされていると予測するかもしれない. あるいは
あなたがあまりにも心配性なら

enum ErroCode { NO_ERROR, /* ... */ };

のように宣言されているとか, あるいは

const int NO_ERROR = 0; // C++ のみ

と宣言されているとか考えるかもしれない.
幸いにも自分は

d:/Windows Kits/10/Include/10.0.17763.0/

に自分のコンパイラのインクルードパスが通っていることをたまたま知っていたので
ここで find and grep してみた. そしてこれも幸運に

./shared/winerror.h 219:#define NO_ERROR 0L                                                 // dderror

を見つけたのだ... find and grep には結構ひっかかったものも多い.
この宣言は幸いにも define と NO_ERROR との間に 1 つだけスペースがあるという
ごくごく標準的な書き方であった. もしタブや 2 つのスペースや折り返しのための
\ などを挿入されていたら発見できなかったかもしれない.

実はこのとき本当に探していたのは DEBUG_ONLY_THIS_PROCESS というおそらく
マクロであった.

おかしいのは CreateProcessA という Win32API のマニュアルを読んでいて
ここにたどりついたのだ. CreateProcessA はそのマニュアルに

CreateProcessA function (processthreadsapi.h)

のように書かれているから


#include <processthreadsapi.h>

...

CreateProcessA を呼び出す

のようにすれば CreateProcessA の宣言をコンパイラが読み取ってくれると普通は
思うし, これは正しい.

しかし,

CreateProcessA( ..., DEBUG_ONLY_THIS_PROCESS, ...);

のように引数にこのマクロを指定したが「宣言されていません」といわれてしまうのだ.
find & grep の結果以下を発見できた. 今回は NO_ERROR ほど大量にはマッチしていない.

./um/WinBase.h 574:#define DEBUG_ONLY_THIS_PROCESS           0x00000002

さてそこで

#include <WinBase.h>

CreateProcessA( ..., DEBUG_ONLY_THIS_PROCESS, ...);

のようにしてみた. しかし

:\Windows Kits\10\Include\10.0.17763.0\um\WinBase.h(7010,19): error C2146: 構文エラー: ')' が、識別子 'hWnd' の前に必要です。

該当箇所は

WINBASEAPI
BOOL
WINAPI
CommConfigDialogA(
    _In_     LPCSTR lpszName,
    _In_opt_ HWND hWnd,           <- これ

単純に HWND がどこにも定義されていなくてコンパイラが型名だと判断できなかった
ためだろう.

typedef void* HWND;
#include <WinBase.h>

とすることでこのエラーを回避することができる.

#define HWND void*
#include <WinBase.h>

でも大丈夫だった.

find . -type f -exec grep  -nH --null '10.0.17763.0' \{\} \;
./MSBuild/Microsoft/VisualStudio/NodeJs/node_modules/npm/node_modules/node-gyp/test/test-find-visualstudio.js 280:      sdk: '10.0.17763.0',
./MSBuild/Microsoft/VisualStudio/NodeJs/node_modules/npm/node_modules/node-gyp/test/test-find-visualstudio.js 309:      sdk: '10.0.17763.0',
./MSBuild/Microsoft/VisualStudio/NodeJs/node_modules/npm/node_modules/node-gyp/test/test-find-visualstudio.js 337:      sdk: '10.0.17763.0',
./MSBuild/Microsoft/VisualStudio/NodeJs/node_modules/npm/node_modules/node-gyp/test/test-find-visualstudio.js 395:      sdk: '10.0.17763.0',


