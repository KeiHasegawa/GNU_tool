プログラムのメッセージ

あるプログラムがメッセージを出しているとしよう.

% ./a.out
hello world
%

さてこの a.out はものすごく複雑なプログラムだと仮定する. デバッガで
このメッセージを出しているところを特定するためにどうすればよいか.

(*1) すぐに思いついた回答

このプログラムは write システムコールを呼び出すか, 他のプロセスを fork, exec
してそのプロセスが問題のメッセージを出力させるはずである.

だから, write と fork にブレークポイントをセットしてそこを見張ればよい.

実は b.out のデバッグで fork にブレークポイントを張っても期待通り動作しない.
b.out のようなプログラムは fork, exec, wait のようにしているかと思い込んでいた.

c.out は getopt_long_only を呼び出しているが,

% ./c.out --xxx
./c.out: unrecognized option '--xxx'
%

この c.out は write でブレークポイントにヒットするかと思い込んでいたがそうでもないらしい.


(*2) glibc をインストール

glibc-2.33 をインストールした.

% cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/glibc-2.33
% mkdir build
% cd build
% ../configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/glibc-2.33/install

のようにビルドするディレクトリとインストールするディレクトリを分ける必要があった.
通常通り configure を実行すると /usr/local にインストールすることになり
お勧めしませんという内容のメッセージが出たため.

(*3) インストールした glibc をリンクしてデバッグしてみた.

(gdb) b _start

としてプログラムのエントリポイントにブレークポイントをセットできている.
エントリポイントにプログラムの制御が遷移した時点ではすでにダイナミックリンクライブラリが
ロードされている.
この時点で write や fork にブレークポイントを普通にセットすることができる.

プログラム開始前に write や fork にブレークポイントをセットしようとすると

(gdb) b write
Function "write" not defined.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (write) pending.
(gdb)

のようになる. これはこれで期待した動作になっている.


プログラム b.out は

	int	$0x80

として

sh -c echo hello world

を実現していたことが判明した. 思い込みは良くない.
a.out は write でブレークポイントにヒットする.

ところで TAGS に system はあるが printf がないのはしょうがないらしい
printf は puts@plt の呼び出しに置き替えられているから.

しかし, puts@plt にも puts にもジャンプできないというのは少し悲しい.


追記

c.out だがこれはどうすればメッセージを出している原因をとらえられるのかは不明である.

(gdb) b vfprintf-internal.c:1404

ここまでは追いかけた. そしてここから write が呼び出されるものだと思っていたが
write にセットしたブレークポイントにはヒットしない.
これはおそらく

	int	$0x80

のような形で write を呼び出していると考えられる. 普通に C の函数として
write を呼び出していないから write のブレークポイントにはヒットしないのだろうが
こうなってしまうと, システムコールの入り口が一箇所ではなくなるのでシステムコール
の呼び出しを捉えることは難しくなる. さて何かいい方法はあるんだろうか.


