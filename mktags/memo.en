Tag generation

(*1) How to use ctags (vi version)
(*2) How to use ctags (emacs version)
(*3) Create tag file from program
(*4) How to build mktags.exe
(*5) tags fromat
(*6) TAGS format
(*7) Tag jump to C++ STL
(*8) Context
(*9) gcc -g3 option
(*10) For large program
(*11) emacs agnostic tag jump
(*12) Incomplete structure, union or class
(*13) C++ template instantiation
(*14) C++ template instantiation (part 2)
(*15) Enumerator
(*16) Function declaration
(*17) If tag jump doesn't work well

(*1) How to use ctags (vi version)

Tag jump    vi -t <name>
Tag jump    :ta <name>
Tag jump    Ctrl-]
Back	    Ctrl-T
Select	    :ts <name>

% cat a.c
#include <stdio.h>

void f();

#define X 2

int main()
{
  printf("hello\n");
  f();
  return 0;
}
% cat b.c
#include "d.h"

int a;

void g(int);

void f()
{
  g(a);
  g(X);
}

int f2(location loc)
{
  return loc;
}
% cat c.c
#include <stdio.h>
#include "d.h"

void g(int n)
{
  printf("n = %d\n", n);
}

extern int a;

void h(struct S* ps)
{
  printf("ps->m = %d\n", ps->m);
  printf("a = %d\n", a);
}
% cat d.h
#ifndef D_H
#define D_H

#define X 1

struct S {
  int m;
};

typedef unsigned int location;

#endif /* D_H */
% ctags a.c b.c c.c d.h
# Above generates `tags'
% vi -t location
# Run vi and display the definition part of `location' at `d.h'
vi command
:ta main
jumps to `main'
Set the cursor to what you want to search and

Ctrl-]

jumps there.

Ctrl-T

jumps back.

:ts X

shows the list of X and you can chose destination.

(*2) How to use ctags (emacs version)

Specify `TAGS'		M-x visit-tags-table
Tag jump		M-.
Back			M-*		(*A)
Next			C-u M-.		(*B)

(*A) At emacs 27.2, not binded.
     You can insert below into ~/.emacs:

(global-set-key "\M-*" 'pop-tag-mark)

(*B) emacs 23.3.1 only
     At emacs 27.2, bind to other function.

% ctags -e a.c b.c c.c d.h
# Above generates `TAGS'

Run emacs and

M-x visit-tags-table

and specify `TAGS' you generated. Normally current working directory `TAGS'
is being opened, so just [return] in that case.

Set the cursor to what you want to search and

M-.

jumps there.

M-*

jumps back.

C-u M-.

Find the next definition for the last tag. a.c and d.h have
macro `X' definition. 1st `X' tag jump goes to the macro `X' definition
of a.c. And then

C-u M-.

jumps to the macro `X' definition of d.h

At emacs 27.2, situation is a little diffent. For `X', execute

M-.

displays the list of `X'. And put the cursor you want to look for, and type

p

or

n

jumps there. The position of the list is only 1 line out of position.

(*3) Create tag file from program

% ./mktags.exe a.out
# creating tags for vi
% ./mktags.exe -e a.out
# creating TAGS for emacs

Option:

-a : Absolute path form. By default, relative path form.
-e : Creating TAGS for emacs. By default, creating tags for vi
-v : Message out like objdump -g
-E <dir> : Use like -e /usr. Ignore the file whose head of path is "/usr".
-w : No warning when opening source file is failed.
-n : Not create dummy tag for empty file. By default create it.
-o <file> : Specify output file name. By default, output file is "tags".
            If -e specified, default output file is "TAGS".
-p <dir> : Use like  -p d:/cygwin64 or -p /cygdrive/d. At Windows environment,
           this option converts file name
           /usr/local/include/c++/10.2.0/bits/stl_vector.h
	   to
	   d:/cygwin64/usr/local/include/c++/10.2.0/bits/stl_vector.h
	   or
	   /cygdrive/d/usr/local/include/c++/10.2.0/bits/stl_vector.h
	   respectively.

(*4) How to build mktags.exe

1. Build binutils from source file

     Refer to:

     Top -> "GNU tool" -> "linux binutils 2.36.1 install memo"

2. Download  mktags.cpp my_dwarf.c my_objdump.c adn Makefile
   and

% make -n
# Confirm that the way of envocation g++, gcc. And modify BINUTILS_DIR variable
# defined at Makefile for your environment.
% make
# If succeed, mktags.exe will be built.

(*5) tags fromat

(tag-name)	(file-name)	(vi command)"	[fvdsm]	[file:]

For example,
HOGE	./a.c	1;"	d	file:
main	./a.c	/^int main()$/;"	f

means:

    o For `HOGE' open ./a.c and jump to 1st line
    o For `main' open ./a.c and search regular expression ^int main()$

(*6) TAGS format

    TAGS version of (*5) becomes like below:

^L
./a.c,45
#define HOGE 1^?HOGE^A1,0
int main()^?main^A3,16

     ^L : Escape character '\f'
     45 : Bytes of #define ... 16
     ^? : putcchar(0177)
     ^A : putchar(1)

     Generally say,

^L
file-name1,bytes1
text1^Ltag-name1^Aline-number1,offset1
...

    where file-name1, byte1, text1, line-number1 and offset1
    are information for tag-name1.

(*7) Tag jump to C++ STL

     Generato TAGS like below:

% cat a.cpp
#include <vector>

int main()
{
  using namespace std;
  vector<int> vi;
  return 0;
}
% g++ -g3 a.cpp -o a.out
% ./mktags.exe -e a.out

     And tag jump for `vector' goes to 1st line of

/usr/local/include/c++/10.2.0/vector

     I guess that find-tag also accepts file-name, where find-tag
     is a Lisp function assigned to M-. But this phenomenon is
     restricted within emacs 23.3.1.

     If you want to the declaration of vector, specify the arugment
     of find-tag as

vector<int, std::allocator<int> >

     It is troublesome, but works. Note that just `vector<...>'
     not `std::vector<...>' is correct in this case.

     find-tag facility of jump to file name is sometimes useful.
     For example, generating TAGS of mktags.exe itself and tag jump
     to dwarf2.h

#include "dwarf2.h"  // Tag jump here

     You can open dwarf2.h easily. Note that the arugment of find-tag
     must be dwarf2.h not dwarf2. If not, jump to wrong file.

     And I noticed that dwarf2.h could be opened at emacs 27.2. It's
     very storage.

(*8) Context

     It's natural that find-tag doesn't understand context of it's
     argument. It's valid specification. But I hope that find-tag
     understantd the context. If find-tag can understand the context:

#include <vector> // Jump to the file `verctor' from here 

int main()
{
  using namespace std;
  vector<int> vi; // Jump to the declaration of `vector' from here
  return 0;       // 2nd candidacy may be default constuctor of `vector'
}

     Compiler generates its information. But it's very difficult to
     implement find-tag which satisfies above. I tryied to tag-jump
     using TAGS which was generated from mktags.exe itself.

     1st candidacy : File `vector'
     2nd candidacy : Member `const bfd_target *vector'
     3rd candidacy : Default constructor of `vector'

     2nd candidacy is not bug. But it's unfortunate.

     Repeatedly say this is restricted within emacs 23.3.1.
     At emacs 27.2, fin-tag shows the below list:

     1st candidacy          : Member `const bfd_target *vector'
     2nd candidacy and more : vector constructors

     This is, anyway, very easy to understand.

(*9) gcc -g3 option

     -g3 option also generates macro information. If you don't
     tag jump to name of macro, -g option is enough.

(*10) For large program

     For cc1 built with -g option, I tried like below:

linux % ls -l cc1
-rwxrwxr-x 1 khasegawa khasegawa 140158720  Mon 11 08:44 cc1
linux % date ; mktags.exe cc1 -e  ; date

     mktags.exe built with -O0 ran for about 3.0 minites.
     mktags.exe built with -O3 ran for about 2.5 minites.

     Here, `objdump -g cc1' ran for 3.5 minites.

     If you want to create tag for just special files, you can do like:

% ./mktags.exe a.o
% ./mktags.exe a.o b.o c.o
% ./mktags.exe libxxx.a

(*11) emacs agnostic tag jump

     mktags.exe generates TAGS for mktags.exe itself which containes
     4 `create' tags. But 5th candidacy becomes below:

static struct data_struct *
find_chunk (bfd *abfd, bfd_vma vma, bfd_boolean create)

     find-tag seems to be agnostic. Above is, of caurse, for `find_chunk'.

     Actually, this result is reproduced at at emacs 23.3.1. But
     at emacs 27.2, Just 4 candidacies are dislayed at the list.
     This technology is advancing together with the generation.

(*12) Incomplete structure, union or class

% cat a.c
struct S;

int main()
{
  struct S* ps = 0;
  return 0;
}
% gcc -g3 a.c -o a.out
% ./mktags.exe a.out
# There is no entry for `S' at tags

     Unfortunately, gcc doesn't generate line information for above `S'.

(*13) C++ template instantiation

% cat a.cpp
template<class C1> struct S1 {};

template<class C2> struct S2 {};

int main()
{
  S1<int>* p = nullptr;
  S2<int> si;
  return 0;
}
% g++ -g a.cpp -o a.out
% ./mktags.exe a.out
# There is no entry for `S1<int>' even though there exists entry 
# for `S2<int>' at tags

     This result is spawn because g++ just generates line information
     for S2<int> but not for S1<int>.

(*14) C++ template instantiation (part 2)

% cat a.cpp
template<class C> struct S {};

extern template class S<int>;

int main()
{
  return 0;
}
% g++ -g a.cpp -o a.out
% ./mktags.exe a.out
# No entry for `S<int>' at tags

     g++ doesn't genreate only line information but either name
     for `S<int>'. If this is based on some specification, it's should be 
     fixed, I think.

     Hello world program of C++ version:

% cat a.cpp
#include <iostream>

int main()
{
  using namespace std;
  cout << "hello" << endl;
  return 0;
}

     Because g++ doesn't generate debug information for `operator<<'
     or `endl', No entry exists for these at tag file. So you can
     not tag jump for these. But for `cout', you can, because `cout'
     is declared as variable.

(*15) Enumerator

     Currently for enumerators, mktags.exe fabricate line information
     which is same with tag name of enumerator:

enum E {  // tag name : E
  a,      // enumerator
  b,      // enumerator
  c       // enumerator
};

     For above example, gcc doesn't genrate line information for `a', `b',
     and `c', mktags.exe adds the same line information with `E'.
     This means tag jump to `c' leads to the position of `E'. 

(*16) Function declaration

     Normally, tag is not generated for function declaration because gcc
     doesn't generate debug information for declaration. But

     o -g or -g3 specified with -O2 option
     o The declared function is called or refered its address
     o The declared function is defined at another compilation unit

     Above conditions are satisfied, gcc generates debug information
     for the declared function. Therefore the tag is generated:

% cat a.c
void f();

void g()
{
  f();
}
% gcc -g -O2 a.c -c
% ./mktags.exe a.o
% cat tags
f	a.c	/^void f();$/;"	f         *** This is generated!
g	a.c	/^void g()$/;"	f
%

     It becomes more obvious if specified -S not -c and you investigate
     a.s.

     If this information exists or not, program behaviour is not changed.
     And I guess, gdb might work well. Expected specification is:

     o If -g or -g3 specified
     o Regardless optimization
     o Regardless another compilation unit or the same one

     For function declaration, gcc should generate debug information.
     If the function is not called or not refered its address, the
     debug information should not be generated because of unification
     of others (structure or typedef).

(*17) If tag jump doesn't work well

      The reasons are:

      o Generated tag file is not correct.
      o find-tag doesn't work well

      I recomend you that you might open generated tag file and search
      the pattern. Refer to (*5), (*6).
      Perhaps, tag is generated correctly with the form which you don't
      expected. Refrer to (*7).

      