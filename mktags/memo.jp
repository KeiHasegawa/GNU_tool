タグ生成

(*1) vi での ctags の簡単な使い方
(*2) emacs での ctags の簡単な使い方
(*3) プログラムファイルからタグファイルを生成する
(*4) mktags.exe のビルド方法
(*5) tags のフォーマット
(*6) TAGS のフォーマット
(*7) C++ の STL に emacs でタグジャンプする.
(*8) コンテキスト
(*9) gcc の -g3 オプション
(*10) 巨大なプログラムに対する動作
(*11) emacs のタグジャンプのゆるさ
(*12) 不完全型構造体の扱い
(*13) C++ テンプレートのインスタンシエーション
(*14) C++ テンプレートのインスタンシエーション(その2)
(*15) enum のメンバ
(*16) 函数の宣言
(*17) タグジャンプが期待通り動作しない場合

(*1) vi での ctags の簡単な使い方

起動時にタグジャンプ	vi -t <タグ名>
タグジャンプ		:ta <タグ名>
タグジャンプ		Ctrl-]
元に戻る			Ctrl-T
複数候補			:ts <タグ名>

% cat a.c
#include <stdio.h>

void f();

#define X 2

int main()
{
  printf("hello\n");
  f();
  return 0;
}
% cat b.c
#include "d.h"

int a;

void g(int);

void f()
{
  g(a);
  g(X);
}

int f2(location loc)
{
  return loc;
}
% cat c.c
#include <stdio.h>
#include "d.h"

void g(int n)
{
  printf("n = %d\n", n);
}

extern int a;

void h(struct S* ps)
{
  printf("ps->m = %d\n", ps->m);
  printf("a = %d\n", a);
}
% cat d.h
#ifndef D_H
#define D_H

#define X 1

struct S {
  int m;
};

typedef unsigned int location;

#endif /* D_H */
% ctags a.c b.c c.c d.h
# tags というファイルが生成される
% vi -t location
# vi が起動して d.h の location の定義位置が表示される
vi のコマンドで
:ta main
のようにするとタグ main へジャンプできる.
探したい名前のところにカーソルをもっていって

Ctrl-] 

とすればタグジャンプできる. タグジャンプした後

Ctrl-T

とすればもとに戻ることができる.

:ts X

とすれば複数ある候補のどれかを選択してジャンプすることができる.
インターネットを検索すれば vi と ctags のより詳しい使い方を発見できる.

(*2) emacs での ctags の簡単な使い方

タグファイルを読み込む	M-x visit-tags-table
タグジャンプ		M-.
元に戻る			M-*          (*A)
次の候補			C-u M-.      (*B)

(*A) emacs 27.2 ではキーバインドされていない
     ~/.emacs に以下を書けば M-* を使うことはできる

(global-set-key "\M-*" 'pop-tag-mark)

(*B) emacs 23.3.1 のみ
     emacs 27.2 では違う機能にキーバインドされているらしい

% ctags -e a.c b.c c.c d.h
# TAGS というファイルが作成される

emacs を起動して

M-x visit-tags-table

で生成した TAGS を指定する. 通常はカレントディレクトリの TAGS ファイルを
開こうとしているから, その場合はリターンキーを押せばよい.
これは明示的にやらなくてもタグジャンプしようとするとどの TAGS を
使うか聞いてくるのでそれに答えればよい.

ファイルを開いた状態で探したい名前のところにカーソルをもっていって

M-.

とすればタグジャンプできる. タグジャンプした後

M-*

とすればもとに戻ることができる.

C-u M-.

とすれば複数候補の次にジャンプする. a.c と d.h にマクロ X の
定義がそれぞれあるので X にタグジャンプすると
a.c の X の定義にジャンプする. その後

C-u M-.

とすると d.h の X の定義にジャンプする.

emacs 27.2 では少し様子が違っていて X に対して

M-.

とすると一覧が表示される. その一覧のところにカーソルがある状態で

p

や

n

を押すと目的の場所にジャンプできるようになっている. 一覧におけるカーソル
の位置が 1 行ずれている(?)のが気にはなる.

(*3) プログラムファイルからタグファイルを生成する

% ./mktags.exe a.out
# tags が生成される. vi 用
% ./mktags.exe -e a.out
# TAGS が生成される. emacs 用.

オプション:

-a : 絶対パスで生成する. デフォルトでは相対パスで生成.
-e : TAGS を生成する. emacs 用. デフォルトでは tags を生成する. vi 用.
-v : objdump -g が出力する結果を標準出力に書き出す.
-E <ディレクトリ> : -E /usr のように使用する. /usr から始まるファイルを無視する.
-w : ソースファイルをオープンできなかった場合にメッセージを出さない.
-n : 空のファイルに対して, ファイル名のタグを作成しない. デフォルトでは作成する.
-o <ファイル> : 出力ファイルを指定する. デフォルトでは tags. -e オプションが指定
               されている場合はデフォルトが TAGS.
-p <ディレクトリ> : -p d:/cygwin64 や -p /cygdrive/d のように使用する. Windows
                  でタグ生成したときに
		  /usr/local/include/c++/10.2.0/bits/stl_vector.h
		  のようなファイル名を
		  d:/cygwin64/usr/local/include/c++/10.2.0/bits/stl_vector.h
		  や
		  /cygdrive/d/usr/local/include/c++/10.2.0/bits/stl_vector.h
		  のように変更する.	       

(*4) mktags.exe のビルド方法

1. binutils をソースファイルからビルドする.

    トップ -> 「GNU のツール」->
    「linux での binutils 2.36.1 インストールメモ」

    が参考になる. cygwin でもトラブルが発生せずビルドとインストールが
    できている.

2. このページにある mktags.cpp my_dwarf.c my_objdump.c Makefile
   をダウンロードして以下のように実行する:

% make -n
# g++, gcc の起動方法を確認する. Makefile の BINUTILS_DIR を自分の環境に
# 合わせて修正する.
% make
# 正しく動けば同じディレクトリに mktags.exe をビルドできる.

(*5) tags のフォーマット

(タグ名)	(ファイル名)	(vi コマンド)"	[fvdsm]	[file:]

例えば
HOGE	./a.c	1;"	d	file:
main	./a.c	/^int main()$/;"	f

は

    o タグ HOGE に対して ./a.c を開いて 1 行目にジャンプするということを
      意味しているようである.
    o タグ main に対して ./a.c を開いて正規表現 ^int main()$
      を検索することを意味しているようである.

(*6) TAGS のフォーマット

    (*5) を TAGS で表現すると以下のようになる:

^L
./a.c,45
#define HOGE 1^?HOGE^A1,0
int main()^?main^A3,16

     ^L : エスケープ文字 '\f'
     45 : #define ... 16 までのバイト数
     ^? : 0177 を putc したもの
     ^A : 1 を putc したもの

^L
ファイル名,バイト数
テキスト1^Lタグ名1^A行番号1,ファイル内オフセット1
...

     のようになる.

(*7) C++ の STL に emacs でタグジャンプする.

% cat a.cpp
#include <vector>

int main()
{
  using namespace std;
  vector<int> vi;
  return 0;
}
% g++ -g3 a.cpp -o a.out
% ./mktags.exe -e a.out

     として TAGS を生成する. emacs で vector へタグジャンプしてみる.
     ジャンプした先は

/usr/local/include/c++/10.2.0/vector

     の 1 行目であった. これはどういうことかというと, find-tag の仕様で,
     ファイル名に vector というものがあればそこにジャンプするということ
     らしい. ここで　find-tag は M-. に割り当てられた Lisp の函数のことである.
     ただしこれは emacs 23.3.1 に限った話である. emacs 27.2 ではジャンプ
     先の候補とはならない.

     ファイル名ではなくて vector の宣言にジャンプするには find-tag の引数に
     以下を指定する:

vector<int, std::allocator<int> >

     これは面倒だが機能してはいる. std::vector ではなくて単に vector
     になっているのは a.cpp の書き方に依存しているようである.

     ファイル名にもジャンプするという find-tag の仕様は期せずして有用な
     ものではある. 例えば mktags.exe 自身の TAGS を生成して dwarf2.h に
     タグジャンプすれば

#include "dwarf2.h"  ここでタグジャンプ

     全く身に覚えのない, しかしビルド時に参照しているヘッダーファイルを簡単
     に開くことができる. ジャンプ先は dwarf2 ではなく dwarf2.h である. そう
     しないと意図したところにジャンプできない.

     そして不思議だが, emacs 27.2 でも dwarf2.h を開けている.

(*8) コンテキスト

     当然ながら emacs のタグジャンプでは対象が何かを判断していない.
     そういう仕様だからであるし, これは妥当に思える. 高望みすればタグ
     ジャンプする先は最小限であってほしい. find-tag がコンテキストを
     理解すれば

#include <vector> ここでタグジャンプしたらファイル vector を開く

int main()
{
  using namespace std;
  vector<int> vi; ここでタグジャンプしたら vector のクラス宣言にジャンプ
  return 0;       次の候補は vector のデフォルトコンストラクタ
}

     コンパイラはその情報を生成してはいる. しかしタグジャンプで
     上のような動作を実現することは難しい. mktags.exe の生成した
     タグファイルで vector にタグジャンプすると

     第一候補 : ファイル vector
     第二候補 : メンバ名の const bfd_target *vector
     第三候補 : vector のデフォルトコンストラクタ

     になっていた. 第二候補が出るのは仕様とはいえ, 非常に残念である.
     繰り返して申し訳ないがここでの話は emacs 23.3.1 に限ったことで
     emacs 27.2 だとリストが表示される.

     第一候補     : メンバ名の const bfd_target *vector
     第二候補以降 : vector のコンストラクタ

     これはこれで見やすい.

(*9) gcc の -g3 オプション

     -g オプションとの違いはマクロの情報が生成されることである.
     gdb や mktags.exe はこれらの情報を使用してプログラマに有用な
     情報を提供する. しかし -g オプションだけでも通常のデバッグ
     情報が生成されるので, マクロへのタグジャンプをしないのであれば
     -g で十分である.

(*10) 巨大なプログラムに対する動作

     デバッグビルドした cc1 に mktags.exe を実行した結果:

linux % ls -l cc1
-rwxrwxr-x 1 khasegawa khasegawa 140158720  Mon 11 08:44 cc1
linux % date ; mktags.exe cc1 -e  ; date

     mktag.exe を -O0 ビルドしたものでは 3 分で終了している. -O3
     ビルドで試してみたところ 2 分 20 秒くらいだった.

     mktags.exe の動作は objdump -g よりも少し複雑な動作をしている
     からそれよりも時間がかかることになると思った. インストールされて
     いる  objdump は -O2 ビルドされているが, cc1 に対する実行結果は
     3 分 30 秒くらいだった. 予想とは違い objdump -g のほうが実行時間
     が長かったが, これは I/O アクセスのコストが高いということ
     だと考えられる.

     大きいプログラムの一部に対してタグを生成したい場合

% ./mktags.exe a.o
% ./mktags.exe a.o b.o c.o
% ./mktags.exe libxxx.a

     のようにオブジェクトファイルやアーカイブを指定することもできる.

(*11) emacs のタグジャンプのゆるさ

     mktags.exe 自身の TAGS を生成すると create に対するタグが 4 つ
     生成されている. しかし 5 個目の候補もある. それが以下.

static struct data_struct *
find_chunk (bfd *abfd, bfd_vma vma, bfd_boolean create)

     これにジャンプしてしまう. おそらく find-tag がそういう仕様なの
     だろう. 上は勿論 find_chunk というタグに対応した箇所である. 

     この結果は emacs 23.3.1 での結果であった. 実は emacs 27.2 では 4
     つの候補しか一覧に出てこない. 日々進化しているということなのだろう.

(*12) 不完全型構造体の扱い

% cat a.c
struct S;

int main()
{
  struct S* ps = 0;
  return 0;
}
% gcc -g3 a.c -o a.out
% ./mktags.exe a.out
# tags には構造体 S のタグが生成されていない

      これは残念ながら gcc がそういう扱いをしているのでタグが生成されない
      ということになる.

(*13) C++ テンプレートのインスタンシエーション

% cat a.cpp
template<class C1> struct S1 {};

template<class C2> struct S2 {};

int main()
{
  S1<int>* p = nullptr;
  S2<int> si;
  return 0;
}
% g++ -g a.cpp -o a.out
% ./mktags.exe a.out
# tags には S1<int> のタグは生成されていない. S2<int> に対してはタグが生成
# されている.

     これも g++ が S1<int> に対して行番号情報を生成していないのでこういう
     結果になっている.

(*14) C++ テンプレートのインスタンシエーション(その2)

% cat a.cpp
template<class C> struct S {};

extern template class S<int>;

int main()
{
  return 0;
}
% g++ -g a.cpp -o a.out
% ./mktags.exe a.out
# S<int> のタグは生成されない

     これも g++ が S<int> に対して, 行番号はおろか, 名前すらも生成してい
     ないからこのような結果になってしまっている. これが仕様だとするならば,
     それ自体に問題がある.

     C++ 版の hello world だが

% cat a.cpp
#include <iostream>

int main()
{
  using namespace std;
  cout << "hello" << endl;
  return 0;
}

     これに対して operator<< や endl に対してタグが生成されないのも
     同じ理由である. cout は変数なので期待するタグは生成されている.

(*15) enum のメンバ

     現状 enum のメンバに対してタグを生成しているが, これは enum の
     タグ名に対する行番号を mktags.exe で付加している:

enum E {  // タグ名が E
  a,      // enum のメンバ
  b,      // enum のメンバ
  c       // enum のメンバ
};

     上の例なら, gcc が a, b, c に対して行番号情報を生成しないので E の
     行番号情報を付加しているということである. だから a に対してタグ
     ジャンプすると E の行にカーソルが移動する.

(*16) 函数の宣言

     通常は函数宣言に対してはタグが生成されない. これは gcc がタグを生成する
     ためのデバッグ情報を出していないからである. しかし

     o -g や -g3 とともに -O2 オプションを指定する
     o 宣言された函数を呼び出している
     o 宣言された函数は別の翻訳単位(ファイル)で定義されている

     という条件が成立した場合, 函数の宣言に対して gcc がデバッグ情報を生成する.
     この結果タグが生成される:

% cat a.c
void f();

void g()
{
  f();
}
% gcc -g -O2 a.c -c
% ./mktags.exe a.o
% cat tags
f	a.c	/^void f();$/;"	f         これが出ている
g	a.c	/^void g()$/;"	f
%

     もっと明白に -c オプションではなくて -S を gcc に指定して a.s
     の結果を見れば原因がはっきりする.

     なんだかこれは gcc のバグっぽい. このデバッグ情報があったところでプ
     ログラムの動作は変わらないし, デバッガも, おそらく, 正常に動作する.
     期待する仕様は:

     o -g や -g3 が指定された場合
     o 最適化オプションに関係なく
     o 別の翻訳単位かどうかにかかわらず

     函数の宣言に対して, デバッグ情報を出してもらいたい.
     呼び出したりアドレス参照していなければ, 他との統一(例えば構造体や
     typedef など)のため出さない.

     というところだろう.

     せっかくなので gcc にパッチを用意した. このページにある
     fundecl.diff である. パッチの適用方法は fundecl.diff を例えば
     /tmp/fundecl.diff として保存して

% cd gcc-10.2.0
% patch -p1< /tmp/fundecl.diff 
patching file gcc/dwarf2out.c

     のように適用する. このパッチは函数呼び出しがあればその宣言に対して
     デバッグ情報を gcc が出力するから, 結果的に宣言に対するタグが生成される
     というものである. 残念ながら, アドレスを参照しただけでは函数の宣言
     に対してデバッグ情報は生成されない.

(*17) タグジャンプが期待通り動作しない場合

     考えられる原因

     o 生成されたタグファイルに誤りがある
     o find-tag が期待した動作でない
     
     おすすめなのは生成したタグファイルをエディタで開いて目的のパターンを検索
     してみることである. (*5) や (*6) が参考になるだろう.
     もしかするとユーザーが意図しない形で正しくタグが生成されている場合もあ
     る. (*7) も参照.

     以下の hello world だが gcc が puts や puts@plt への呼び出しに
     変換した場合は残念ながら printf のタグは生成されない. これは分かりにくい.


     #include <stdio.h>

     int main()
     {
       printf("hello world\n");
       return 0;
     }
