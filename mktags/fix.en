Fix for the function declaration debugging information

The fact already konwn:

With -g -O2 option, gcc generates debugging information for function
declaration.

(*) For variable

If it is not refered, debugging information is not generated
even though there exists it's declaration.
If it is refered, debugging information is generated for the declaration.

(*) For function

% cat sample.c
extern int abcdef();

int f()
{
  return abcdef();
}
%
(gdb) run -quiet sample.c -quiet -dumpbase sample.c "-mtune=generic" "-march=pentiumpro" -auxbase sample -g -O2 -o sample.s

As above result, the string "abcdef" is generated into `sample.s'.
If -O2 is erased from above `run' command, the string "abcdef" is not
generated.

For each results, I saved as `sample.s.O0' and `sample.s.O2'.

The 1st diffrence was:

.p2align 4

I thought this did not effect the program execution, but
thought I should fix if it's valid.

.Ltext0:
	.p2align 4                # This one
	.globl	f
	.type	f, @function

First I thought I should make sure that which part genereates above.
As described at "cc1 assembler generation investigation",
`final_1' is the function to be annotated.

(gdb) b final_1

And ran until above break-point was hit.

(gdb) p *file

From the result of above, I noticed that the correspondig part
had been already generated.

(gdb) p file._IO_read_ptr
$2 = 0xb784b000 "\t.file\t\"sample.c\"\n\t.text\n.Ltext0:\n\t.p2align 4\n\t.globl\tf\n\t.type\tf, @function\nf:\n.LFB0:\n\t.file 1 \"sample.c\"\n\t.loc 1 4 1 view -0\n\t.cfi_startproc\n"

(gdb) p file._IO_read_ptr+25
$4 = 0xb784b019 ".Ltext0:\n\t.p2align 4\n\t.globl\tf\n\t.type\tf, @function\nf:\n.LFB0:\n\t.file 1 \"sample.c\"\n\t.loc 1 4 1 view -0\n\t.cfi_startproc\n"

So, set the watch-point to the address expressed as `$4':

(gdb) watch *(char*)0xb784b019
(gdb) run

The watch-point was hit as I expected.

After above, similarly set watch-point and investigate the part of
generation `.p2align' like below:

(gdb) watch *(char*)0xb784b022  # higher address than $4

      ASM_OUTPUT_MAX_SKIP_ALIGN (asm_out_file, align_log, max_skip);

And it was proved that above part generated `.p2align'.

  if (! DECL_USER_ALIGN (decl)
      && align_functions.levels[0].log > align
      && optimize_function_for_speed_p (cfun)) {

   ...
      ASM_OUTPUT_MAX_SKIP_ALIGN (asm_out_file, align_log, max_skip);

I see. So this should be executed when specified -O2 option.

  }

The 2nd difference was:

< 	.loc 1 4 1
---
> 	.loc 1 4 1 view -0

I guessed that this was related with debuggin information worthy of note.

This was also generated at the point that `final_1' was called.
So in the same way, I caught the moment when it was generated.

(gdb) p file._IO_read_ptr+118
$30 = 0xb784b076 "view -0\n\t.cfi_startproc\n"

So the watch-point should be set like below:

(gdb) watch *(char*)0xb784b076
(gdb) run

And knew that

	      if (FORCE_RESETTING_VIEW_P (table->view))
		fputs (" view -0", asm_out_file);
	      else
		fputs (" view 0", asm_out_file);

above part generated the annotated "view ...". I read the comment
of this part, and decided that it's not ncessary to fix for the
debug information.

The 3rd difference was:

 	.loc 1 5 3 view .LVU1
 	.loc 1 5 10 is_stmt 0 view .LVU2
 	jmp	abcdef

Above was -O2 result. This was related with code generation.
I see. Just `jmp' works well.
By the way,

`.loc 1 5 3'  meant line information of 'r' at 'return'
`.loc 1 5 10' meant line information of 'a' at 'return abcdef();'

I was not sure, but it should be only when -O2 specified.

Here, I changed the view point. I compared with the result of `objdump -g':

% cp sample.s.O0 sample_O0.s
% gcc -c sample_O0.s
% ls -l sample_O0.o
-rw-rw-r-- 1 khasegawa khasegawa 1768  June  8 16:07 sample_O0.o
% objdump -g sample_O0.o > sample_O0.objdump
% cp sample.s.O2 sample_O2.s
% gcc -c sample_O2.s 
% ls -l sample_O2.o 
-rw-rw-r-- 1 khasegawa khasegawa 1844  June  8 16:08 sample_O2.o
% objdump -g sample_O2.o > sample_O2.objdump
% 

Absolute diffrence was below:

 <1><4e>: Abbrev Number: 5 (DW_TAG_subprogram)
    <4f>   DW_AT_external    : 1
    <4f>   DW_AT_declaration : 1
    <4f>   DW_AT_linkage_name: (indirect string, offset: 0x59): abcdef
    <53>   DW_AT_name        : (indirect string, offset: 0x59): abcdef
    <57>   DW_AT_decl_file   : 1
    <58>   DW_AT_decl_line   : 1
    <59>   DW_AT_decl_column : 12

This came from the below part of `sample.s.O2':

	.uleb128 0x5
	.long	.LASF3
	.long	.LASF3
	.byte	0x1
	.byte	0x1
	.byte	0xc
	.byte	0

Then, I caught the moment when cc1 generate above.

I noticed that this part still had not been generated after finishing `final1':

(gdb) fin
Run till exit from #0  final_1 (first=0xb79070e0, file=0xa670cd0, seen=0, optimize_p=2) at ../.././gcc/final.c:1961
0x087f85cd in rest_of_handle_final () at ../.././gcc/final.c:4666
(gdb) p asm_out_file._IO_read_ptr+118
$34 = 0xb784b076 "view -0\n\t.cfi_startproc\n\t.loc 1 5 3 view .LVU1\n\t.loc 1 5 10 is_stmt 0 view .LVU2\n\tjmp\tabcdef\n.LVL0:\n"
(gdb)

Because I researched it beforehand from `sample.s.O2', I knew that the part was
located at from

asm_out_file._IO_read_ptr+0x2e0

to

asm_out_file._IO_read_ptr+0x2f0

So, it was rough, I set watch-point like below:

(gdb) p asm_out_file._IO_read_ptr+0x2f0
$35 = 0xb784b2f0 ""
(gdb) watch *(char*)0xb784b2f0
Hardware watchpoint 7: *(char*)0xb784b2f0
(gdb)

And this watch-point was hit as I expected:

(gdb) p asm_out_file._IO_read_ptr+0x2e0
$38 = 0xb784b2e0 "t\"\n\t.uleb128 0x5\n"
(gdb)

This was generated at below part:

static void
output_die (dw_die_ref die)
{
  dw_attr_node *a;
  dw_die_ref c;
  unsigned long size;
  unsigned ix;

  dw2_asm_output_data_uleb128 (die->die_abbrev, "(DIE (%#lx) %s)",
			       (unsigned long)die->die_offset,
			       dwarf_tag_name (die->die_tag));

I knew that above code generated. And after this,

	.uleb128 0x5
	.long	.LASF3   ; This was generated.
	.long	.LASF3

I guessed that the correspoinding `die' did not exist when -O2
was not specified for the first place.

I tried to go up:
(gdb) up


  FOR_EACH_CHILD (die, c, output_die (c));

where,

#define FOR_EACH_CHILD(die, c, expr) do {	\
  c = die->die_child;				\
  if (c) do {					\
    c = c->die_sib;				\
    expr;					\
  } while (c != die->die_child);		\
} while (0)

Maybe, die->die_child did not include below:

 <1><4e>: Abbrev Number: 5 (DW_TAG_subprogram)
    <4f>   DW_AT_external    : 1
    <4f>   DW_AT_declaration : 1
    <4f>   DW_AT_linkage_name: (indirect string, offset: 0x59): abcdef
    <53>   DW_AT_name        : (indirect string, offset: 0x59): abcdef
    <57>   DW_AT_decl_file   : 1
    <58>   DW_AT_decl_line   : 1
    <59>   DW_AT_decl_column : 12

when -O2 was not specified, but included when -O2 was specified.

So, I concluded that when -O2 was specified, I should catch the moment
when die->die_child was set. For

  FOR_EACH_CHILD (die, c, output_die (c));

(gdb) p die
$4 = (dw_die_ref) 0xb7869b70
(gdb) p die->die_child
$5 = (dw_die_ref) 0xb78f9990
(gdb) p &die->die_child
$6 = (dw_die_ref *) 0xb7869b7c
(gdb) watch *(int*)0xb7869b7c
Hardware watchpoint 3: *(int*)0xb7869b7c
(gdb) run

...
Hardware watchpoint 3: *(int*)0xb7869b7c

Old value = 0
New value = -1215326384
0x08734ab0 in add_child_die (die=0xb7869b70, child_die=0xb78f9750) at ../.././gcc/dwarf2out.c:5606
(gdb)

I could catch. This watch-point was hit 4 times. And 4th time was
the moment I should annotate:

-1215325808 = 0xb78f9990

As usual, for

dw_die_ref die

we should call the debugging function which prints the effective information
about `die'. Unfotunately, such a useful function did not exist. So I
had to create it.

While I was searching such a function, I found

DW_AT_linkage_name

at some source file. This was something  like specifing "abcdef".
I was not sure, but easily, set the break-point around the code:


  if (dwarf_version >= 4)
    add_AT_string (die, DW_AT_linkage_name, name);  // Here
  else
    add_AT_string (die, DW_AT_MIPS_linkage_name, name);

When above code was executed, `name' was "abcdef".

Time-series:

(1) The watch-point of `die_child' hit 4th time
(2) add_AT_string (die, DW_AT_linkage_name, name);
(3) asm_out_file._IO_read_ptr+0x2e0 watch-point hit

If I run cc1 from gdb without -O2, it's a matter of course that
the watch-point of `die_child' was hit just 3 times and 4th was not hit.

So I decided to investigate the reason why 4th was not hit.

I created simple print(dw_die_ref) and found that:

The watch-point about die and child_die were:

1st : memory allocation
2nd : die : DW_TAG_compile_unit, child_die : DW_TAG_subprogram
3rd :       DW_TAG_compile_unit              DW_TAG_base_type
4th :       DW_TAG_compile_unit              DW_TAG_subprogram

When -O2 specified, 4th time hit was occured by below code:

		if (pdie == NULL)
		  {
		    /* Creating a full DIE for tdecl is overly expensive and
		       at this point even wrong when in the LTO phase
		       as it can end up generating new type DIEs we didn't
		       output and thus optimize_external_refs will crash.  */
		    tdie = new_die (DW_TAG_subprogram, cdie, NULL_TREE);

And more, setting break-point at above if-statement, the break-point
was hit at 1st time after running.

If not specified -O2 option, above code was not executed.
When the break-point was hit by specifing -O2,

(gdb) p print(tdecl)
function return signed 32 bit integer (null) abcdef
(gdb)

So, now, all I have to do is to examine the reason why the program
execution doesn't come here without -O2 option. 

Above code at `resolve_addr' function, and it was called like below:

  FOR_EACH_CHILD (die, c, resolve_addr (c));


  for (ctnode = comdat_type_list; ctnode != NULL; ctnode = ctnode->next)
    resolve_addr (ctnode->root_die);
  resolve_addr (comp_unit_die ());  // At this point

for the return value of `comp_unit_die()', call print() like below:

-O2 specified case:

(gdb) p print($8)
(dw_die_ref)0xb7869b70 : DW_TAG_compile_unit
    (dw_die_ref)0xb78f9750 : DW_TAG_subprogram
        (dw_die_ref)0xb78f9960 : DW_TAG_GNU_call_site
    (dw_die_ref)0xb78f9780 : DW_TAG_base_type
$9 = void
(gdb)

-O2 not specified case:

(gdb) p print($10) 
(dw_die_ref)0xb7869b70 : DW_TAG_compile_unit
    (dw_die_ref)0xb78f9750 : DW_TAG_subprogram
    (dw_die_ref)0xb78f9780 : DW_TAG_base_type
$11 = void
(gdb)

If -O2 specified, annotated `abcdef' debug information will be added
like below:

(gdb) p print(die)
(dw_die_ref)0xb7869b70 : DW_TAG_compile_unit
    (dw_die_ref)0xb78f9750 : DW_TAG_subprogram
        (dw_die_ref)0xb78f9960 : DW_TAG_GNU_call_site
    (dw_die_ref)0xb78f9780 : DW_TAG_base_type
    (dw_die_ref)0xb78f9990 : DW_TAG_subprogram    # This one
$12 = void
(gdb)

I didn't wonder that `DW_TAG_GNU_call_site' was related or not.
But as far as I looked

sample_O2.objdump

it was not related directly, so I thought.

So when -O2 specified, the reason why

  resolve_addr (comp_unit_die ());

execution added

(dw_die_ref)0xb78f9990 : DW_TAG_subprogram

should be examined.

As this result, in fact, the below was related:

        (dw_die_ref)0xb78f9960 : DW_TAG_GNU_call_site

which was not realated with, at first, I judged.
Then, I caught the moment it was created like below:

(gdb) watch *(int*)0xb78f9960
(gdb) run

Above watch-point worked well.

	      if (die == NULL
		  && (ca_loc->symbol_ref || tloc))
		die = gen_call_site_die (decl, subr_die, ca_loc);  (*A)

When -O2 specified, the program execution reached to abvoe if-statement.
When -O2 not specified, not reached. So the above if-condition
did not effect the result.

This function was called from:

      if (decl)
        gen_subprogram_die (decl, context_die);

The program execution reached to above if-statement if -O2 specified or
not specified. If -O2 specified, 2nd time execution reached to (*A).

And more, if -O2 specified,

      if (call_arg_locations && (!dwarf_strict || dwarf_version >= 5))  (*B)

At 1st time, above codition was not satisfied. But 2nd time
above condition was satisfied. As this result, the program reached to (*A).

At the 2nd time, the situation was:

(gdb) p call_arg_locations 
$38 = (call_arg_loc_node *) 0xb78f6780
(gdb) p dwarf_strict
$39 = 0

On the other hand, if -O2 not specified,

(gdb) p call_arg_locations
$41 = (call_arg_loc_node *) 0x0
(gdb)

So the direct reason of not reaching to (*A) was that `call_arg_locations'
was nullptr.

(gdb) watch call_arg_locations

If -O2 specified, below code modified `call_arg_locations'

       call_arg_loc_last = ca_loc;             (*C)
      
and after this, the program execution reached to (*B).

	if ((debug_variable_location_views || call_insn != NULL)
	    && !DECL_IGNORED_P (current_function_decl))
	  debug_hooks->var_location (insn);   // This one

If -O2 specified or not, 

debug_hooks->var_location (insn);

was executed, but if -O2 specified, (*C) was executed, and
if -O2 not specified, *C) was not executed.

And both case,
(gdb) p print(insn)
CALL_INSN
(gdb)

Above print was created at past, poorly. But it worked well.

static void
dwarf2out_var_location (rtx_insn *loc_note)
{
...
	  if (find_reg_note (loc_note, REG_CALL_ARG_LOCATION, NULL_RTX)) // (*D)
	    {
	      call_insn = loc_note;
	      loc_note = NULL;
	      var_loc_p = false;

	      next_real = dwarf2out_next_real_insn (call_insn);
	      next_note = NULL;
	      cached_next_real_insn = NULL;
	      goto create_label;   // If -O2 specified, (*D) condition
	                           // was stasfied and goto create_label.
	    }
	  if (optimize == 0 && !flag_var_tracking)
	    {
            // If -O2 not specified, (*D) condition was, of cause, satisfied.
	    

Then I thought about the part:

	      if (!MEM_P (x)
		  || GET_CODE (XEXP (x, 0)) != SYMBOL_REF
		  || !SYMBOL_REF_DECL (XEXP (x, 0))
		  || (TREE_CODE (SYMBOL_REF_DECL (XEXP (x, 0)))
		      != FUNCTION_DECL))     // (*E)
		{
		  call_insn = loc_note;
		  loc_note = NULL;
		  var_loc_p = false;

		  next_real = dwarf2out_next_real_insn (call_insn);
		  next_note = NULL;
		  cached_next_real_insn = NULL;
		  goto create_label;
		}

Becase any condition of (*E) was not satisfied, `goto create_label;' was
not executed. So I decided to fix this condition for the case:

	      bool x_was_call = false;         // Add this flag
	      if (GET_CODE (x) == CALL) {
		x = XEXP (x, 0);
		x_was_call = true;
	      }
	      if (!MEM_P (x)
		  || GET_CODE (XEXP (x, 0)) != SYMBOL_REF
		  || !SYMBOL_REF_DECL (XEXP (x, 0))
		  || (TREE_CODE (SYMBOL_REF_DECL (XEXP (x, 0)))
		      != FUNCTION_DECL)
		  || ((TREE_CODE (SYMBOL_REF_DECL (XEXP (x, 0)))
		       == FUNCTION_DECL) && x_was_call)) // Add this one
		{
		  call_insn = loc_note;

Above code seems to be forcible, but works well as I expected.

If a function address is just refered, but is not called,
gcc does not generate debug information for the function declaration
even though -g -O2 options are specified. So not fix this case.
