gcc にオプションを追加してマクロの定義と参照位置をダンプする

vine linux で既にビルドした状態

% cd gcc-10.2.0/host-i686-pc-linux-gnu/gcc
% cat /tmp/a.c
extern int printf(const char*, ...);

int main()
{
  printf("hello world\n");
  return 0;
}

% ./xgcc -S /tmp/a.c

このコマンドで cc1 を exec できないというエラーメッセージが出た.

% set path = ( $path `pwd` )
% ./xgcc -S /tmp/a.c

今度は正常終了した. このディレクトリにある cc1 を起動できたから.
カレントディレクトリの a.s を見てみるとコンパイルがされたことを
確認できる.

同様のことを gdb から行う
gdb を起動する状態で PATH が gcc-10.2.0/host-i686-pc-linux-gnu/gcc に
通っていないとやはり cc1 を起動することはできないことに注意.
(Emacs から gdb を起動しているのなら M-x setenv で PATH を変更するとよい) 

(gdb) b main
(gdb) run -S /tmp/a.c

とすれば main 函数で停止してソースレベルデバッグができるだろう.

gcc には -### オプションがある. これでどのように外部コマンドを
起動するか等を表示することができる

% ./xgcc -S /tmp/a.c -###
...
 cc1 -quiet -iprefix /home/khasegawa/gcc-10.2.0/host-i686-pc-linux-gnu/gcc/../lib/gcc/i686-pc-linux-gnu/10.2.0/ /tmp/a.c -quiet -dumpbase a.c "-mtune=generic" "-march=pentiumpro" -auxbase a -o a.s
...

ひとまず xgcc に --output-macro-info オプションを追加してみたい. さらに
そのオプションを cc1 に引き継いでもらいたい.

以下の函数にブレークポイントをセットして実行してみる.
decode_cmdline_option
find_opt

find_opt では OPT_SPECIAL_unknown が返されて, option_map のテーブルの "--"
とマッチすることにより再び find_opt がよばれ, やはり OPT_SPECIAL_unknown
が返される.

1 回目 find_opt( input = "-output-macro-info", ...)
2 回目 find_opt( input = "foutput-macro-info", ...)

で呼ばれる. find_opt では

cl_options という配列を検索している. cl_options_count はその配列の
サイズ.

ソースからのビルドのログに

	gawk -f ../.././gcc/opt-gather.awk ../.././gcc/ada/gcc-interface/lang.opt ../.././gcc/brig/lang.opt ../.././gcc/d/lang.opt ../.././gcc/fortran/lang.opt ../.././gcc/go/lang.opt ../.././gcc/lto/lang.opt ../.././gcc/c-family/c.opt ../.././gcc/common.opt ../.././gcc/params.opt ../.././gcc/analyzer/analyzer.opt ../.././gcc/config/fused-madd.opt ../.././gcc/config/i386/i386.opt ../.././gcc/config/gnu-user.opt ../.././gcc/config/linux.opt ../.././gcc/config/linux-android.opt > tmp-optionlist

を発見. おそらくここがカギになるところとは思ったが, 単純にササっと済ますなら
decode_cmdline_option の呼び出しを以下のようにスキップさせる

gcc-10.2.0/gcc/opts-common.c

bool output_macro_info;  // このグローバル変数を追加

  for (i = 0 ; i < argc ; i += n)
   {
      ...
      // vvvvvv ここを追加
      if (strcmp(opt, "--output-macro-info") == 0) {
	hoge = true;
        n = 1;
	continue;
      }
      // ^^^^^^ ここを追加
      ...
      decode_cmdline_option( ... );
      ...
    }

cc1 を起動するときに後はこのオプションを伝える. 以下は
gcc-10.2.0/gcc/gcc.c で cc1 を exec する直前の状態.

  commands[0].prog = argbuf[0]; /* first command.  */
  // vvvvv ここを追加
  extern bool output_macro_info;
  if (output_macro_info) {
    const char* x = argbuf.pop();
    const char* y = "--output-macro-info";
    argbuf.safe_push(y);
    argbuf.safe_push(x);
  }
  // ^^^^^ ここを追加
  commands[0].argv = argbuf.address ();

これで cc1 に --output-macro-info オプションが渡る. しかし, この程度のこと
をしたいのであれば以下のように環境変数を使ったほうがだいぶお手軽かと思う.

  if (getenv("OUTPUT_MACRO_INFO")) {
    ... // 自分の好きなことをする
  }

もう少し正式と思われるやり方でオプションを追加してみたい. 
cl_options のありかを探す. xgcc のリンクで参照されるファイルは

gcc.o gcc-main.o ggc-none.o \
c/gccspec.o driver-i386.o  libcommon-target.a \
libcommon.a ../libcpp/libcpp.a   ../libbacktrace/.libs/libbacktrace.a ../libiberty/libiberty.a ../libdecnumber/libdecnumber.a 

なのでおそらくこの中のいずれか.

% objdump -x gcc.o gcc-main.o ggc-none.o \
c/gccspec.o driver-i386.o  libcommon-target.a \
libcommon.a ../libcpp/libcpp.a   ../libbacktrace/.libs/libbacktrace.a ../libiberty/libiberty.a ../libdecnumber/libdecnumber.a > /tmp/a

この結果からすると options.o で定義されているらしい.
ビルドのログからすると

gawk -f ../.././gcc/opt-functions.awk -f ../.././gcc/opt-read.awk \
	       -f ../.././gcc/optc-gen.awk \
	       -v header_name="config.h system.h coretypes.h options.h tm.h" < optionlist > options.c

により options.c が作成されていることが分かる. とすると optionlist の
作成方法だが, そうなると上で言及した tmp-optionlist の話に戻る.

gcc-10.2.0/gcc/c-family/c.opt の最後に以下のように --hogex オプションを
追加してみた.

w
C ObjC C++ ObjC++
; Documented in common.opt

-hogex
C ObjC C++ ObjC++ Var(flag_hogex)
; Added 2020.08.12 06:43 by khasegawa

; This comment is to ensure we retain the blank line above.

これでビルドしなおしてみて, 再実行.

find_opt からは 30 がかえってきている. が, --hogex オプションに
unrecognized command-line option
のメッセージ. どうやらこれだけでは十分ではないらしい.
 Var(flag_hogex) をさらに付け加えて再度ビルド. やはり unrecognized の
エラーがでる.

ざっくりと話しが省かれるが, gcc-10.2.0/gcc/gcc.c にある

The Specs Language

も関係している. --hogex オプションを追加するにはこの部分も変更する必要
がある.

これはさすがに面倒なのでやめる. 
gcc-10.2.0/gcc/common.opt に以下のように --output-macro-info を追加した.

fipa-ra
Common Report Var(flag_ipa_ra) Optimization
Use caller save register across calls if possible.

foutput-macro-info
Driver

; This comment is to ensure we retain the blank line above.

ポイントは foutput-macro-info の行で f から始まっている.
こうすることで xgcc にオプションが追加される. おそらく xg++ にも
追加されていることだろう.

% ./xgcc -S /tmp/a.c --output-macro-info -###

で確認すると, --output-macro-info オプションが認識され
-foutput-macro-info オプションが cc1 に引き継がれていることが確認
できる.

cc1 にも同様にオプションを追加する.
w
C ObjC C++ ObjC++
; Documented in common.opt

foutput-macro-info
C ObjC C++ ObjC++ Var(flag_output_macro_info)
; Added 2020.08.12 06:43 by khasegawa

; This comment is to ensure we retain the blank line above.

やはり f から始まっているのがポイント. Var(flag_output_macro_info)
は構造体のメンバに flag_output_macro_info が追加される
ようになる.

cc1 -foutput-macro-info オプション付きで実行した場合プログラムの制御が以下
の函数を呼び出した直後に

gcc-10.2.0/gcc/toplev.c

  decode_options (&global_options, &global_options_set,
		  save_decoded_options, save_decoded_options_count,
		  UNKNOWN_LOCATION, global_dc,
		  targetm.target_option.override);

  global_options.x_flag_output_macro_info

  に 1 がセットされる. ここまでがオプションを追加する話. マクロの
  定義と参照位置をダンプする話は今回は省略する.

output_macro_info.diff

をダウンロードして修正を反映する方法は以下.

% xz -d -c gcc-10.2.0.tar.xz | tar xf -
% cd gcc-10.2.0
% patch -p1 < output_macro_info.diff
patching file gcc/c-family/c-opts.c
patching file gcc/c-family/c.opt
patching file gcc/common.opt
patching file libcpp/directives.c
patching file libcpp/macro.c

後は通常通り ./configure と make install すればよい. 改造された
gcc は以下のように実行する.

% gcc foo.c --output-macro-info

これにより foo.i にマクロの定義位置と参照位置がダンプされる.

