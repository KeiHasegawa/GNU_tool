gcc lexical analyzer investigation(Part 3)

Index
(*1) Attributed value of token
(*2) c_token::type
(*3) c_token::id_kind
(*4) c_token::location
(*5) c_token::value
(*6) How to debug `tree'

(*1) Attributed value of token

Now we are ready to investigate `c_token',
even though we have gone away from the point because of bug fix.

c_token *
c_parser_peek_token (c_parser *parser)
{
  if (parser->tokens_avail == 0)
    {
      c_lex_one_token (parser, &parser->tokens[0]);   // Very important!
      parser->tokens_avail = 1;
    }
  return &parser->tokens[0];
}

Think about a piece of code:

int a = 1;

The tokens of above code are:

int
a
=
1
;

It's not so difficult to guess that `a' has to the something attributed
value except for token value. As far as gcc implementation, every
token has its attributed value. We'll see that below.

`c_token' objects created at `c_lex_one_token' are like below:

For `int'
{type = CPP_KEYWORD, id_kind = C_ID_NONE, keyword = RID_INT, pragma_kind = PRAGMA_NONE, location = 162, value = 0xb78f4630, flags = 64 '@'}

For `a'
{type = CPP_NAME, id_kind = C_ID_ID, keyword = RID_MAX, pragma_kind = PRAGMA_NONE, location = 288, value = 0xb7982630, flags = 1 '\001'}

For `='
{type = CPP_EQ, id_kind = C_ID_NONE, keyword = RID_MAX, pragma_kind = PRAGMA_NONE, location = 352, value = 0x0, flags = 1 '\001'}

For `1'
{type = CPP_NUMBER, id_kind = C_ID_NONE, keyword = RID_MAX, pragma_kind = PRAGMA_NONE, location = 416, value = 0xb78e0c94, flags = 1 '\001'}

For `;'
{type = CPP_SEMICOLON, id_kind = C_ID_NONE, keyword = RID_MAX, pragma_kind = PRAGMA_NONE, location = 448, value = 0x0, flags = 0 '\000'}

(*2) c_token::type

Token value.

      At gcc implementation, for integer literal `1' and floating literal `0.5'
      CPP_NUMBER is assigned. Similary, for `int' and `double'
      CPP_KEYWORD is assigned.

(*3) c_token::id_kind

If c_token:type is equal to `CPP_NAME', this value becomes like below:

	     C_ID_ID          so-called identifier
	     C_ID_TYPENAME    so-called typedef name
	     C_ID_CLASSNAME   so-called tag name
	     C_ID_ADDRSPACE   ????

Othewise, the value becomes `C_ID_NONE'

(*4) c_token::location

This member is to maintain the position at some file. This mebmer type
is `unsigned int' and specilized hashed.

gcc implementation

	o file path
	o line number
	o column
	o Is systemm header or not

These information is maintained. But not directly maintained, like:

struct info {
  string name;
  int line;
  int columun;
  bool sys;
};

From c_token::location, the way of obtaining above information
is described at 

output_macro_info.diff

which is at this web page.

+ 		       rich_location richloc(pfile->line_table, pfile->directive_line);
+ 		       expanded_location exloc = richloc.get_expanded_location(0);
+ 		       const char* file = exloc.file;
+ 		       int line = exloc.line;

Above code is one of examples.

(*5) c_token::value

This member type is `tree' like below:

union tree_node {
    tree_base base;
    tree_typed typed;
    tree_common common;
    tree_int_cst int_cst;
    tree_poly_int_cst poly_int_cst;
    tree_real_cst real_cst;
...
}* tree;

As you see, this is mixed up. And this is used at everywhere in source code.

Now for a pieace of code:

int a = 1;

For this `a', I guess that above tree types variable contains:

    o as a string,  "a"
    o type of `a' is not defined
    
Now we'll investigate these points.

c-lex.c:469

      *value = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok->val.node.node));  // HERE!

gcc-10.2.0/libcpp/include/cpplib.h
#define HT_NODE(NODE)		(&(NODE)->ident)

gcc-10.2.0/gcc/tree.h
#define HT_IDENT_TO_GCC_IDENT(NODE) \
  ((tree) ((char *) (NODE) - sizeof (struct tree_common)))

To simply say, refering to member `ident' and adjust address.

For `a', at above `// HERE!' point:
(gdb) p tok.val.node.node.ident
$33 = {str = 0xb7974170 "a", len = 1, hash_value = 4294967281}

And also at `c_parser_peek_token' point:

(gdb) p parser->tokens[0].value.identifier.id
$37 = {str = 0xb7974170 "a", len = 1, hash_value = 4294967281}

Now we can conclude that:

If c_token::type is equal to `CPP_NAME' and
if c_token::id_kind is equal to `C_ID_ID' then
c_token::value->identifier.id contains the name.

Unfortunately, how to maintain the information "type of `a' is not defined"
is not clear.

              => "gcc symbol table investigation" says about this feature.
	         Shortly say, identifier expressed by `tree' is bind
		 to declaration or not.

By the way,

gcc-10.2.0/gcc/c/c-parser.c:396
	decl = lookup_name (token->value);

above code is executed after token->value is created for `a'
Normaly thinking about this situation, symbol table is referenced
for `a'. But in this case, for `a'

Not refer to symbol table, just create name of `a'

This action is expected. Anyway, this time investigation is enough.

               => Similary, "gcc symbol table investigation" says about
	          this feature.

Again for a piece of code

int a = 1;

For `1', now we'll investigate how tree is created.

c-lex.c:488
	    *value = interpret_integer (tok, flags, &overflow);  // HERE!

And more:

static tree
wide_int_to_tree_1 (tree type, const wide_int_ref &pcst)
{
...

1st parameter `type' expresses `int' in this case, which is a type of `1'
2nd parameter `pcst' containes the value of `1' at *pcst.val

As you can see in this code, various macro is used for `tree' type:

  TREE_CODE (type) : INTEGER_TYPE
  TYPE_PRECISION (type) : 32
  TYPE_SIGN (type) : SIGNED

(*6) How to debug `tree'

Type `tree' variables are used at many code of gcc. I want to see it simply.

So I added the function at the end of

gcc-10.2.0/gcc/tree.c

like below:

void print(tree p)
{
  // ...
}

And will call this function from debugger command line.
At first, for a piece of code:

int a = 1;

`a' and `1' 's attributed value whose type is `tree' should be printed
suitably. This function will be huge as we understand `tree' type.
But in this situation, there is no way. Anyway, 1st version is very simple:

void print(tree p)
{
  if (!p) {
    printf("nullptr\n");
    return;
  }
  switch (p->base.code) {
  case IDENTIFIER_NODE:
    printf("IDENTIFIER_NODE\n");
    break;
  case INTEGER_CST:
    printf("INTEGER_CST\n");
    break;
  default:
    printf("Unknown\n");
    break;
  }
}

Of cause, it's enough to execute `make' at top directory.
But if you refer to build log, the below commands work well:

% g++ -c ... -o tree.o ... ../.././gcc/tree.c
% ar rcT libbackend.a ... tree.o
% g++ ... -o cc1 ... libbackend.a

This should be the same way as your build was done. So see your build log file.
Make a simple shell script or Makefile. And simple is important.
My log file was like below:

g++ -std=gnu++98 -fno-PIE -c   -g -DIN_GCC     -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-error=format-diag -Wno-format -Wmissing-format-attribute -Woverloaded-virtual -pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings -fno-common  -DHAVE_CONFIG_H -I. -I. -I../.././gcc -I../.././gcc/. -I../.././gcc/../include -I../.././gcc/../libcpp/include  -I../.././gcc/../libdecnumber -I../.././gcc/../libdecnumber/bid -I../libdecnumber -I../.././gcc/../libbacktrace   -o tree.o -MT tree.o -MMD -MP -MF ./.deps/tree.TPo ../.././gcc/tree.c

ar rcT libbackend.a gimple-match.o generic-match.o insn-attrtab.o insn-automata.o insn-dfatab.o insn-emit.o insn-extract.o insn-latencytab.o insn-modes.o insn-opinit.o insn-output.o insn-peep.o insn-preds.o insn-recog.o insn-enums.o ggc-page.o alias.o alloc-pool.o auto-inc-dec.o auto-profile.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o ccmp.o cfg.o cfganal.o cfgbuild.o cfgcleanup.o cfgexpand.o cfghooks.o cfgloop.o cfgloopanal.o cfgloopmanip.o cfgrtl.o symtab.o cgraph.o cgraphbuild.o cgraphunit.o cgraphclones.o combine.o combine-stack-adj.o compare-elim.o context.o convert.o coroutine-passes.o coverage.o cppbuiltin.o cppdefault.o cprop.o cse.o cselib.o data-streamer.o data-streamer-in.o data-streamer-out.o dbxout.o dbgcnt.o dce.o ddg.o debug.o df-core.o df-problems.o df-scan.o dfp.o digraph.o dojump.o dominance.o domwalk.o double-int.o dse.o dumpfile.o dwarf2asm.o dwarf2cfi.o dwarf2out.o early-remat.o emit-rtl.o et-forest.o except.o explow.o expmed.o expr.o fibonacci_heap.o file-prefix-map.o final.o fixed-value.o fold-const.o fold-const-call.o function.o function-abi.o function-tests.o fwprop.o gcc-rich-location.o gcse.o gcse-common.o ggc-common.o ggc-tests.o gimple.o gimple-builder.o gimple-expr.o gimple-iterator.o gimple-fold.o gimple-laddress.o gimple-loop-interchange.o gimple-loop-jam.o gimple-loop-versioning.o gimple-low.o gimple-pretty-print.o gimple-ssa-backprop.o gimple-ssa-evrp.o gimple-ssa-evrp-analyze.o gimple-ssa-isolate-paths.o gimple-ssa-nonnull-compare.o gimple-ssa-split-paths.o gimple-ssa-store-merging.o gimple-ssa-strength-reduction.o gimple-ssa-sprintf.o gimple-ssa-warn-alloca.o gimple-ssa-warn-restrict.o gimple-streamer-in.o gimple-streamer-out.o gimple-walk.o gimplify.o gimplify-me.o godump.o graph.o graphds.o graphviz.o graphite.o graphite-isl-ast-to-gimple.o graphite-dependences.o graphite-optimize-isl.o graphite-poly.o graphite-scop-detection.o graphite-sese-to-poly.o gtype-desc.o haifa-sched.o hash-map-tests.o hash-set-tests.o hsa-common.o hsa-gen.o hsa-regalloc.o hsa-brig.o hsa-dump.o hw-doloop.o hwint.o ifcvt.o ree.o inchash.o incpath.o init-regs.o internal-fn.o ipa-cp.o ipa-sra.o ipa-devirt.o ipa-fnsummary.o ipa-polymorphic-call.o ipa-split.o ipa-inline.o ipa-comdats.o ipa-visibility.o ipa-inline-analysis.o ipa-inline-transform.o ipa-predicate.o ipa-profile.o ipa-prop.o ipa-param-manipulation.o ipa-pure-const.o ipa-icf.o ipa-icf-gimple.o ipa-reference.o ipa-hsa.o ipa-ref.o ipa-utils.o ipa.o ira.o ira-build.o ira-costs.o ira-conflicts.o ira-color.o ira-emit.o ira-lives.o jump.o langhooks.o lcm.o lists.o loop-doloop.o loop-init.o loop-invariant.o loop-iv.o loop-unroll.o lower-subreg.o lra.o lra-assigns.o lra-coalesce.o lra-constraints.o lra-eliminations.o lra-lives.o lra-remat.o lra-spills.o lto-cgraph.o lto-streamer.o lto-streamer-in.o lto-streamer-out.o lto-section-in.o lto-section-out.o lto-opts.o lto-compress.o mcf.o mode-switching.o modulo-sched.o multiple_target.o omp-offload.o omp-expand.o omp-general.o omp-grid.o omp-low.o omp-simd-clone.o opt-problem.o optabs.o optabs-libfuncs.o optabs-query.o optabs-tree.o optinfo.o optinfo-emit-json.o options-save.o opts-global.o ordered-hash-map-tests.o passes.o plugin.o postreload-gcse.o postreload.o predict.o print-rtl.o print-rtl-function.o print-tree.o profile.o profile-count.o range.o range-op.o read-md.o read-rtl.o read-rtl-function.o real.o realmpfr.o recog.o reg-stack.o regcprop.o reginfo.o regrename.o regstat.o reload.o reload1.o reorg.o resource.o rtl-error.o rtl-tests.o rtl.o rtlhash.o rtlanal.o rtlhooks.o rtx-vector-builder.o run-rtl-passes.o sched-deps.o sched-ebb.o sched-rgn.o sel-sched-ir.o sel-sched-dump.o sel-sched.o selftest-rtl.o selftest-run-tests.o sese.o shrink-wrap.o simplify-rtx.o sparseset.o spellcheck.o spellcheck-tree.o sreal.o stack-ptr-mod.o statistics.o stmt.o stor-layout.o store-motion.o streamer-hooks.o stringpool.o substring-locations.o target-globals.o targhooks.o timevar.o toplev.o tracer.o trans-mem.o tree-affine.o asan.o tsan.o ubsan.o sanopt.o sancov.o tree-call-cdce.o tree-cfg.o tree-cfgcleanup.o tree-chrec.o tree-complex.o tree-data-ref.o tree-dfa.o tree-diagnostic.o tree-diagnostic-path.o tree-dump.o tree-eh.o tree-emutls.o tree-if-conv.o tree-inline.o tree-into-ssa.o tree-iterator.o tree-loop-distribution.o tree-nested.o tree-nrv.o tree-object-size.o tree-outof-ssa.o tree-parloops.o tree-phinodes.o tree-predcom.o tree-pretty-print.o tree-profile.o tree-scalar-evolution.o tree-sra.o tree-switch-conversion.o tree-ssa-address.o tree-ssa-alias.o tree-ssa-ccp.o tree-ssa-coalesce.o tree-ssa-copy.o tree-ssa-dce.o tree-ssa-dom.o tree-ssa-dse.o tree-ssa-forwprop.o tree-ssa-ifcombine.o tree-ssa-live.o tree-ssa-loop-ch.o tree-ssa-loop-im.o tree-ssa-loop-ivcanon.o tree-ssa-loop-ivopts.o tree-ssa-loop-manip.o tree-ssa-loop-niter.o tree-ssa-loop-prefetch.o tree-ssa-loop-split.o tree-ssa-loop-unswitch.o tree-ssa-loop.o tree-ssa-math-opts.o tree-ssa-operands.o tree-ssa-phiopt.o tree-ssa-phiprop.o tree-ssa-pre.o tree-ssa-propagate.o tree-ssa-reassoc.o tree-ssa-sccvn.o tree-ssa-scopedtables.o tree-ssa-sink.o tree-ssa-strlen.o tree-ssa-structalias.o tree-ssa-tail-merge.o tree-ssa-ter.o tree-ssa-threadbackward.o tree-ssa-threadedge.o tree-ssa-threadupdate.o tree-ssa-uncprop.o tree-ssa-uninit.o tree-ssa.o tree-ssanames.o tree-stdarg.o tree-streamer.o tree-streamer-in.o tree-streamer-out.o tree-tailcall.o tree-vect-generic.o tree-vect-patterns.o tree-vect-data-refs.o tree-vect-stmts.o tree-vect-loop.o tree-vect-loop-manip.o tree-vect-slp.o tree-vectorizer.o tree-vector-builder.o tree-vrp.o tree.o tristate.o typed-splay-tree.o unique-ptr-tests.o valtrack.o value-range.o value-prof.o var-tracking.o varasm.o varpool.o vec-perm-indices.o vmsdbgout.o vr-values.o vtable-verify.o web.o wide-int.o wide-int-print.o xcoffout.o i386.o analyzer/analysis-plan.o analyzer/analyzer.o analyzer/analyzer-logging.o analyzer/analyzer-pass.o analyzer/analyzer-selftests.o analyzer/bar-chart.o analyzer/call-string.o analyzer/checker-path.o analyzer/constraint-manager.o analyzer/diagnostic-manager.o analyzer/engine.o analyzer/function-set.o analyzer/pending-diagnostic.o analyzer/program-point.o analyzer/program-state.o analyzer/region-model.o analyzer/sm.o analyzer/sm-file.o analyzer/sm-malloc.o analyzer/sm-pattern-test.o analyzer/sm-sensitive.o analyzer/sm-signal.o analyzer/sm-taint.o analyzer/state-purge.o analyzer/supergraph.o x86-tune-sched.o x86-tune-sched-bd.o x86-tune-sched-atom.o x86-tune-sched-core.o i386-options.o i386-builtins.o i386-expand.o i386-features.o linux.o cet.o host-linux.o

g++ -std=gnu++98 -no-pie   -g -DIN_GCC     -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-error=format-diag -Wno-format -Wmissing-format-attribute -Woverloaded-virtual -pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings -fno-common  -DHAVE_CONFIG_H -static-libstdc++ -static-libgcc  -o cc1 c/c-lang.o c-family/stub-objc.o attribs.o c/c-errors.o c/c-decl.o c/c-typeck.o c/c-convert.o c/c-aux-info.o c/c-objc-common.o c/c-parser.o c/c-fold.o c/gimple-parser.o c-family/c-common.o c-family/c-cppbuiltin.o c-family/c-dump.o c-family/c-format.o c-family/c-gimplify.o c-family/c-indentation.o c-family/c-lex.o c-family/c-omp.o c-family/c-opts.o c-family/c-pch.o c-family/c-ppoutput.o c-family/c-pragma.o c-family/c-pretty-print.o c-family/c-semantics.o c-family/c-ada-spec.o c-family/c-ubsan.o c-family/known-headers.o c-family/c-attribs.o c-family/c-warn.o c-family/c-spellcheck.o i386-c.o glibc-c.o \
	  cc1-checksum.o libbackend.a main.o libcommon-target.a libcommon.a ../libcpp/libcpp.a ../libdecnumber/libdecnumber.a libcommon.a ../libcpp/libcpp.a   ../libbacktrace/.libs/libbacktrace.a ../libiberty/libiberty.a ../libdecnumber/libdecnumber.a   -lmpc -lmpfr -lgmp -rdynamic -ldl  -L./../zlib -lz 

Again execute cc1 under gdb control:

c_token *
c_parser_peek_token (c_parser *parser)
{
  if (parser->tokens_avail == 0)
    {
      c_lex_one_token (parser, &parser->tokens[0]);
      parser->tokens_avail = 1;  // Set a break-point here!

At this break-point, do print command like below:

(gdb) p print(parser->tokens[0]->value)

For `a'

IDENTIFIER_NODE

For `1'

INTEGER_CST

are printed. They are not enough. But you can improve yourself
