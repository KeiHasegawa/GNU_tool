M-x gdb(その3)

「M-x gdb(その2)」では emacs 27.2 でだましだまし emacs から gdb を
使用する方法を述べたが, そもそも emacs と gdb との間でどのようなインターフェース
になっているのか調べてみた.

% cat a.c
int main()
{
  return 0;
}
% gcc -g3 a.c -o a.out

改めてではあるが, emacs 27.2 と

/usr/share/emacs/23.3/lisp/progmodes/gdb-ui.el.gz

との組み合わせで emacs から M-x gdb である程度期待通りデバッグできることが
確認できる.
そこで以下のように dummy-gdb.exe をビルドする.
% g++ -g3 dummy-gdb.cpp -o dummy-gdb.exe

dumy-gdb.cpp はこのページからダウンロードできる.
但しブレークポイントにヒットしたときに開こうとしているファイルが私の環境の
ものなので, あなたが実際に確かめるためには自分の環境に合わせたパスに書き換えてほしい.

この dummy-gdb.exe を M-x gdb で以下のように起動する:

Run gdb (like this): ./dummy-gdb.exe --annotate=3 a.out

当たり前だが a.out は必要ない. 本来これは

Run gdb (like this): gdb --annotate=3 a.out

のように起動するべきものだったから, それと単純に引数を合わせているだけなのだ.

バッファは *gud-a.out* に切り替わって以下のようになる:
Current directory is d:/home/khasegawa/lang/53_GNU_tool/emacs/
(dummy-gdb)

この dummy-gdb.exe だが

b main
run
quit
(空のコマンド)

のみ受け付けるようになっている. それ以外のコマンドを入力してもエコーする
だけである.

それでは main にブレークポイントをセットしてそこまで実行してみよう:

(dummy-gdb) b main
Breakpoint 1 at 0x8049145: file a.c, line 3.
(dummy-gdb) run

ブレークポイントにヒットして画面が 2 分割され, ソースが表示されている.
期待した動作をしている. というか捏造できている. dummy-gdb.cpp を見て分かる通り
ポイントとなるのは

  032

を 2 つ標準出力に putc した後, 特殊な命令のようなものをさらに出力していることで
ある. これは gdb ユーザーの目には見えない.

さて問題は Windows 版の emacs 26.2 と gdb との問題だがパス名の問題で
ソースが表示できていないことが判明した.

/cygdrive/d/home/...

のようなパス名は

d:/home/...

のようにしないと現状はソースの表示ができない.

本来ならば Lisp の函数から呼び出されるファイルをオープンする機能を CYGWIN 対応にする
のが正しいように思える. だから emacs を修正する必要がおそらくある. そうすれば
これまで動作していた Lisp ライブラリは修正なしで動作する.

しかし gdb を修正しても期待通り動作するので今回は gdb を修正することにした.
本当は良くない. しかし一方で M-x perldb は期待した動作になっている. もしかす
ると Lisp の函数 perldb で CYGWIN のパス名の問題を解決しているのかもしれない.
あるいは相対パスで扱っていたからこのような問題が発生しなかったのかもしれない.

gdb-10.2 ならば

gdb-10.2/gdb/annotate.c

の以下の函数を修正すれば期待通り動作することになる:

static void
annotate_source (const char *filename, int line, int character, int mid,
		 struct gdbarch *gdbarch, CORE_ADDR pc)
{
  if (annotation_level > 1)
    printf_filtered (("\n\032\032source "));
  else
    printf_filtered (("\032\032"));

#ifdef __CYGWIN__
  using namespace std;
  string tmp = filename;
  string cygdrive = "/cygdrive/";
  int len = cygdrive.length();
  if (tmp.substr(0, len) == cygdrive) {
    if (tmp.length() > len+1) {
      auto drive = tmp.substr(len, 1);
      tmp.erase(0, len+1);
      tmp = drive + ':' + tmp;
    }
  }
  printf_filtered (("%s:%d:%d:%s:%s\n"), tmp.c_str(), line, character,
		   mid ? "middle" : "beg", paddress (gdbarch, pc));
#else // __CYGWIN__
  printf_filtered (("%s:%d:%d:%s:%s\n"), filename, line, character,
		   mid ? "middle" : "beg", paddress (gdbarch, pc));
#endif // __CYGWIN__
}
