interactive

As described at "C-x o", we define a Lisp function for moving
previous window. And there, we called `interactive' like below:

(defun other-window-backward ()
  "Select the previous window."
  (interactive)
  (other-window -1))

By the way, as described at "BackSpace key", we binded `delete-backward-char'
to BackSpace key. Let's see this function definition by

M-x describe-function

See `simple.el' where `delete-backward-char' is defined:

(defun delete-backward-char (n &optional killflag)
  "...."
  (declare (interactive-only delete-char))
  (interactive "p\nP")
...

Moreover, unexpectedly, above is very complicated. And also `interactive'
is called with argument "p\nP".
At first, see the defition of `interactive'. As we see, use
M-x describe-function:

*Help* buffer says like below:

interactive is a special form in `C source code'.

This is similar with `next-window' described at "C-x o". But it's not
same:

next-window is a built-in function in `C source code'.

However, they are both C functions. For `next-window', a word `built-in'
is used but for `interactive' it's not used. To begin with,
I was convinced that `built-in' means C function not Lisp function.
But now, it might be not.

And *Help* also says that

Just Åe(interactive)Åf means pass no arguments to the command ...

So I tried like below:

(defun foo () "test func" (interactive)(message "hello world"))

(global-set-key "\C-x\C-p" 'foo)

After evaluating above expressions, execute C-x C-p then,
display

hello world

into mini buffer without double quotation.

And also tried `(interacitve)' erased version:

(defun foo () "test func" (message "hello world"))

C-x C-p displays the message with warning beep:

command-execute: Wrong type argument: commandp, foo

Something wrong. I again evaluated right version expression and
executed C-x C-p.

I see. The expression

(global-set-key "\C-x\C-p" 'foo)

is not necessary to re-evaluate. Somehow, I guess the facility of single
quotation added before `foo'.







