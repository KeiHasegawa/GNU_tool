C-x o

emacs を使っているとき, 画面に 2 つのウィンドウを表示させると便利なことがある.
そしてほとんどが C-x 2 として上と下とで分ける.

一方のウィンドウからもう一方のウィンドウに移動するのに C-x o を使用する.
<f1> b によりキーバインドを確かめてみる:

C-x o		other-window

other-window というのが対応する Lisp の函数だった.

M-x describe-function
other-window

としてみる.

そうすると other-window が window.el で定義されていることや引数として
数字を取ること, オプショナルな引数としてフレームを取ることなどが書
かれている.

C-x 2 で画面に 2 つのウィンドウを表示した状態から C-x 3 でさらに現在のウ
ィンドウを 2 つに分割し, さらに分割されていないもう一方のウィンドウに移
って C-x 3 とすれば画面が 4 つのウィンドウに分割される.

C-x o で各ウィンドウに移動してみる.

+-----+-----+
|  1  |  2  |
+-----+-----+
|  3  |  4  |
+-----+-----+

のような順でウィンドウを循環して移動するだろう. ここで 1 のウィンドウにいる
状態で C-u 2 C-x o としてみる. そうすると 3 のウィンドウにジャンプすることが
確認できる.

C-u 2 は C-x o すなわち other-window への引数に 2 を与えることを意味するら
しい.

C-u 2 をタイプするのが面倒ならば

(other-window 2)

を C-x C-e で評価してもよい. あるいは何かにキーバインドしてもいいが
これがそれほど便利なわけではないからキーバインドする意味は薄い.

C-u -1 C-x o は 1 つ前のウィンドウにジャンプする. そもそも 2 つに
しか画面を分割しないのだから 1 つ前のウィンドウにジャンプするのも
次のウィンドウにジャンプするのも結果は同じである. しかし
ここはキーバインドの練習ということで

(global-set-key "\C-x\C-p" (other-window -1))

という Lisp の式を書いてみた. これは C-x C-p に 1 つ前のウィンドウ
に移動するつもりで書いた.
ひとまずお手軽に上を C-x C-e で評価して 4 のウィンドウから
3 のウィンドウへ 1 回の操作で移動できることを確認してみた.

残念. 間違えているようだ. C-x C-p には何もバインドされていないという
メッセージが表示されている.
次を試してみた.

(global-set-key "\C-x\C-p" (message "hello world"))

これは C-x C-p で hello world とカレントのバッファに文字が出力される.
思い出してみれば「Lisp の函数を定義する」や「Lisp の函数を定義する(その2)」
でやった hello-world の動作はミニバッファに, しかもダブルクォーテーションが
付いた形であったが, こちらの動作が自分が期待したものだった. いや, 話がそれてし
まった.

正解は以下のようになるらしい:

(global-set-key "\C-x\C-n" 'other-window)

(defun other-window-backward ()
  "Select the previous window."
  (interactive)
  (other-window -1))

(global-set-key "\C-x\C-p" 'other-window-backward)

なるほど, global-set-key の第二引数は ' 付きの Lisp の函数名とするのが
正しいようだ. しかし, 一方で C-x C-p に hello world をキーバインド
できているので必ずしもそのようにしないといけないわけではないらしい.
しかし, 今回はここまで.

ところで, 

M-x describe-function
other-window

で表示される説明に next-window が使われているということが記述されている.
next-window のところにカーソルを置いた状態でリターンキーを押すと
*Help* バッファは next-window のものに切り替わる:

next-window is a built-in function in ‘C source code’.

...
なるほどビルトインというわけだ. なのでこれは Lisp ではなく C で
記述されるということである. ここでもやはり C source code
のところにカーソルを置いてリターンキーを押すと...

私はソースからビルドしていたのでバッファが


DEFUN ("next-window", Fnext_window, Snext_window, 0, 3, 0,
       doc: /* Return live window after WINDOW in the cyclic ordering of window

のように切り替わった. ファイル

emacs-27.2-1.src/emacs-27.2/src/window.c

を開いている. この DEFUN というマクロは突っ込みどころが満載だが,
そこは今回は立ち入らないでおこう.
