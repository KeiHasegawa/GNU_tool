interactive

「C-x o」では 1 つ前のウィンドウに移動する函数を定義した. そこでは不明な函数
interactive を呼び出していた:

(defun other-window-backward ()
  "Select the previous window."
  (interactive)
  (other-window -1))

ところで, 「BackSpace キー」のところでは BackSpace キーに delete-backward-char
を割り当てたがこれの定義を例によって

M-x describe-function

で見てみよう. 定義されているファイル simple.el を見てみると:

(defun delete-backward-char (n &optional killflag)
  "...."
  (declare (interactive-only delete-char))
  (interactive "p\nP")
...

のようになっている. しかもこれは思いのほか色々なことをやっているらしい.
そしてここでも interactive が何やら "p\nP" という引数を伴って使われている.

まずは interactive の定義を見てみよう. やはり M-x describe-function を
使う.

そうすると *Help* バッファに次のように表示された:

interactive is a special form in `C source code'.

これは「C-x o」で触れた next-window と似ているが少し違う:

next-window is a built-in function in `C source code'.

しかしいずれも C の函数が実体である. next-window は built-in という
単語が使われていたが, interactive はそうではない. そもそも私が勝手に
built-in は Lisp の函数ではなくて C で書かれているものと思っていたが
それも違うのかも.

さらに *Help* を読み進めると

(interactive)

は引数を渡さずにコマンドを呼ぶとある.
そこで以下を試してみた.

(defun hello-world () "test func" (interactive)(message "hello world"))

(global-set-key "\C-x\C-p" 'hello-world)

上の 2 つの式を評価して C-x C-p としてみるとミニバッファに
ダブルクォーテーションなしで

hello world

と表示された. (interacitve) を削除した以下

(defun hello-world () "test func" (message "hello world"))

で C-x C-p を試すとミニバッファには警告音とともに以下が表示される:

command-execute: Wrong type argument: commandp, hello-world

間違っているらしい. もう一度期待通り動く (interactive) 付きの
ほうを評価して C-x C-p を試してみた.
なるほど, (global-set-key "\C-x\C-p" 'hello-world) のほうは評価し直す
必要がないわけだ. 何となくではあるが foo の前にあるシングルクォーテーション
の意味するところが推測できる.
