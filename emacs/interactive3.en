interactive(part 3)

As described at "interactive(part 2)", we examined argument "d" of interactive
but the result did not statisfied us.

Again executing anew

M-x describe-function
interactive

*Help* buffer says that

Code letters available are:
...
p -- Prefix arg converted to number.  Does not do I/O.
...

As descriebed at "interactive" or "interactive(part 2)",
"p" was used. Actually argument "p\nP" was used but
more complicated than "p", I guessed.

Again I evaluated the below expression:

(defun p-test (n) "test `p' format of interactive" (interactive "p")(+ n 1))

And evaluated below:

(p-test 10)

This displayed into mini buffer below messsage: 

11 (#o13, #xb, ?\C-k)

Also evaluated below:

(p-test)

If *Backtrace* doesn't become like below, once delete
*Backtrace* buffer by type d in the list displayed by C-x C-b,
and again evalueate:

Debugger entered--Lisp error: (wrong-number-of-arguments (lambda (n) "test `p' format of interactive" (interactive "p") (+ n 1)) 0)
  p-test()
  eval((p-test) nil)
  elisp--eval-last-sexp(nil)
  eval-last-sexp(nil)
  funcall-interactively(eval-last-sexp nil)
  call-interactively(eval-last-sexp nil nil)
  command-execute(eval-last-sexp)

Also evalueated below:

(p-test "hello")

This displayed into mini buffer below message:

Wrong type argument: number-or-marker-p, "hello"

Here, if you delete *Backtrace* buffer in the same manner,
and again evaluate above expression, *Backtrace* buffer will
becomes like below:

Debugger entered--Lisp error: (wrong-type-argument number-or-marker-p "hello")
  +("hello" 1)
  p-test("hello")
  eval((p-test "hello") nil)
  elisp--eval-last-sexp(nil)
  eval-last-sexp(nil)
  funcall-interactively(eval-last-sexp nil)
  call-interactively(eval-last-sexp nil nil)
  command-execute(eval-last-sexp)

I see. I digress from `interacitve', however, I understand
the situation where *Backtrace* is displayed like above.
Anyway, the difference is not clear between

o (interactive "p")
o (interactive "d")
