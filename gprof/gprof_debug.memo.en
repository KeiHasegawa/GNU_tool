Build gprof with -g and -O0 and execute under control gdb

(*1) Build gprof with -g and -O0
(*2) Execute gprof under control gdb

(*1) Build gprof with -g and -O0

     See your binutils install log file:

make[4]: Entering directory `/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/gprof'

     These commands are saved into `debug_build.mk'

make[4]: Leaving directory `/home/khasegawa/binutils-2.36.1-2.src/binutils-2.36.1/gprof'

     (a) Change `-O2' to `-O0'

     (b) The last `libtool: link: gcc' line is deleted.

     (c) If you execute like csh -vf debug_build.mk, existing object files
         are overwritten, so

% mkdir debug

         Change all

-o 

         to

-o debug/

          at debug_build.mk.

         The last command `/bin/sh ./libtool' inputs are current directory
	 object files, so change

basic_blocks.o

         to

debug/basic_blocks.o

         and as others.

         Now we can build `debug/gprof' with `-g -O0' option:

% csh -vf debug_build.mk
         
(*2) Execute gprof under control gdb

     Before doing like below, prepare `test000' and `gmon.out' as described
     at "Introduction of gprof" on this web page:

% gcc -pg -o test000 test000.c test000_0.c test000_1.c test000_2.c
% ./test000 1 2000 300000
# generates `gmon.out'

% gdb gprof

(gdb) run /home/khasegawa/my_directory/test000 /home/khasegawa/my_directory/gmon.out

     And execute like above. If you save above line into file `x', you can
     easily run like below:

(gdb) so x


  core_init (a_out_name);  // `test000' is read here

	  gmon_out_read (gmon_name);   // `gmon.out' is read here

      hist_print ();  // `Flat profile:' part is output

	  cg_print (cg);  // `Call graph' part is output


void
gmon_out_read (const char *filename)  // `gmon.out' is read here
{
...
      while (fread (&tag, sizeof (tag), 1, ifp) == 1)
	{
	  switch (tag)
	    {
	    case GMON_TAG_TIME_HIST:
	      ++nhist;                           For `test000' sample,
	      gmon_input |= INPUT_HISTOGRAM;     1st come here.
	      hist_read_rec (ifp, filename);
	      break;                        

	    case GMON_TAG_CG_ARC:
	      ++narcs;                           For `test000' sample,
	      gmon_input |= INPUT_CALL_GRAPH;    2nd, 3rd and 4th come here.
	      cg_read_rec (ifp, filename);       I guess that it is correspond
	      break;                             to `f', `g' and `h'
	      					 respectively

	    case GMON_TAG_BB_COUNT:
	      ++nbbs;                            For `test000' sample,
	      gmon_input |= INPUT_BB_COUNTS;     not come here.
	      bb_read_rec (ifp, filename);
	      break;
                                          

void
hist_read_rec (FILE * ifp, const char *filename)
{
...

record->lowpc  = 0x8048400   test000 start address
record->highpc = 0x8048744   test000 .rodata address

record->num_bins = 210       For `test000' sample, it becomes 210.

  for (i = 0; i < record->num_bins; ++i)


...


For `test000' sample, I guessed that below code is excuted, but actually
it's not. But I noticed that:

      /* Write execution time histogram if we have one.  */
      if (gmon_input & INPUT_HISTOGRAM)
	hist_write_hist (ofp, filename);

      /* Write call graph arcs if we have any.  */
      if (gmon_input & INPUT_CALL_GRAPH)
	cg_write_arcs (ofp, filename);

      /* Write basic-block info if we have it.  */
      if (gmon_input & INPUT_BB_COUNTS)  Here! <-----+
	bb_write_blocks (ofp, filename);             |
                                                     |
                                                     |
~/gcc-10.2.0/gcc/final.c:                            |
	case NOTE_INSN_BASIC_BLOCK:                  |
	  if (need_profile_function)     Here! <-----+
	    {
	      profile_function (asm_out_file);
	      need_profile_function = false;
	    }

`need_profile_function' is defined `final.c' like below:

/* True if profile_function should be called, but hasn't been called yet.  */
static bool need_profile_function;

