gcc docgen output

(*1) Let cc1 generate input file of doclink.exe
(*2) Patch file

(*1) Let cc1 generate input file of doclink.exe

     Originally hcc1.exe and docgen.dll do that. Refer to 

     "Top" -> "Document generator"

     about docgen.dll and doclink.exe

     At initail investigation level of `cc1', I didn't understand
     the way of judging if the compiling function uses

     o Global variable
     o Function
     o Struct or other tag

     or not. So this work was stopped.

     But now I already know that:

c-parse.c
static void
c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
...
{
...
	fnbody = c_parser_compound_statement (parser, &endloc);
      tree fndecl = current_function_decl;   // Stop here

(gdb) p print(fnbody)

     This shows the contents of `fnbody' as a tree described at
     "cc1 assembler generation investigation" on this web page.

     It's possible to generate input file of doclink.exe by calling
     the same kind function with `print(tree)'.

     For example,

% cat /tmp/a.c
struct S {
  int m;
};

int a;

int f();

int g(struct S* ps)
{
  return a + f(ps->m);
}
%
     Generate like below for above source:

$func $def g "/tmp/a.c" 9
{
    $ref f $func "/tmp/a.c" 11;
    $ref $tag S "/tmp/a.c" 11;
    $ref $var a "/tmp/a.c" 11;
}

     Each line means function `g' refers to function `f' at line 11,
     refers to tag `S' at line 11 and refers to variable `a' at line 11,
     respectively.

     This task more simple than `print(tree)' even though it' necessary
     to judge:

     o Variable is global
     o Function is external
     o Tag is declared outside function

  void traverse_decl(tree p)
  {
    if (DECL_FILE_SCOPE_P(p))  // judge file scope or not
      ...

      In passing, I fixed cc1plus. At this time, I noticed that:

cp/parser.c:17716
      type_spec = cp_parser_class_specifier (parser);
      invoke_plugin_callbacks (PLUGIN_FINISH_TYPE, type_spec);

      This may enable me not to make patch file but to make dynamic link
      library. But this time I dind't use this facility.

(*2) Patch file

% ls -d gcc-10.2.0.org gcc-10.2.0
gcc-10.2.0  gcc-10.2.0.org
% diff -Naur gcc-10.2.0.org gcc-10.2.0 > docgen.diff
This takes too long time.

I made patch file like below:

% diff -rc gcc-10.2.0{.org,}/gcc/c-family/c-opts.c > docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/c-family/c.opt >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/common.opt >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/libcpp/directives.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/libcpp/macro.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/tree.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/c/c-parser.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/cp/tree.c >> docgen.diff
% diff -rc gcc-10.2.0{.org,}/gcc/cp/parser.c >> docgen.diff

The way of using this patch file:
Download `docgen.diff' on this web page and locate

/tmp/docgen.diff

% xz -d -c gcc-10.2.0.tar.xz | tar xf -
% cd gcc-10.2.0
% patch -p1 < /tmp/docgen.diff
patching file gcc/c-family/c-opts.c
patching file gcc/c-family/c.opt
patching file gcc/common.opt
Hunk #1 succeeded at 3408 (offset -4 lines).
patching file libcpp/directives.c
patching file libcpp/macro.c
patching file gcc/tree.c
Hunk #1 succeeded at 15874 (offset -9 lines).
patching file gcc/c/c-parser.c
patching file gcc/cp/tree.c
patching file gcc/cp/parser.c
Hunk #1 succeeded at 11749 (offset -5 lines).
Hunk #2 succeeded at 11809 (offset -5 lines).
Hunk #3 succeeded at 18505 (offset -5 lines).
Hunk #4 succeeded at 18561 (offset -5 lines).
Hunk #5 succeeded at 18665 (offset -5 lines).
Hunk #6 succeeded at 19088 (offset -5 lines).
Hunk #7 succeeded at 20512 (offset -10 lines).
Hunk #8 succeeded at 20668 (offset -10 lines).
Hunk #9 succeeded at 20919 (offset -10 lines).
Hunk #10 succeeded at 24286 (offset -16 lines).
%

patch gave some messages but this worked well.
