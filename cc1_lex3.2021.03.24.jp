gcc の字句解析ルーチンの解析(その3)

目次
(*1) 字句の属性値
(*2) c_token::type
(*3) c_token::id_kind
(*4) c_token::location
(*5) c_token::value
(*6) tree のデバッグ

(*1) 字句の属性

その 1, その 2 のバグの修正で調査で横道にそれた感じもあるが,
結局は以下の函数やそこから呼ばれる函数が字句で重要なところらしい.

c_token *
c_parser_peek_token (c_parser *parser)
{
  if (parser->tokens_avail == 0)
    {
      c_lex_one_token (parser, &parser->tokens[0]);   ここが重要
      parser->tokens_avail = 1;
    }
  return &parser->tokens[0];
}

例えば

int a = 1;

のようなプログラム片で字句を並び挙げれば,

int
a
=
1
;

の 5 つということになる. このうち字句に属性値を持たせる必要があるのが
2 つ目の a と 4 つ目の 1 である. とはいえ gcc の実装では
全ての字句に属性を持たせてはいる(例えばファイルにおける位置など).

c_lex_one_token で作成される c_token オブジェクトは以下のようになっていた:

int に対して
{type = CPP_KEYWORD, id_kind = C_ID_NONE, keyword = RID_INT, pragma_kind = PRAGMA_NONE, location = 162, value = 0xb78f4630, flags = 64 '@'}

a に対して
{type = CPP_NAME, id_kind = C_ID_ID, keyword = RID_MAX, pragma_kind = PRAGMA_NONE, location = 288, value = 0xb7982630, flags = 1 '\001'}

= に対して
{type = CPP_EQ, id_kind = C_ID_NONE, keyword = RID_MAX, pragma_kind = PRAGMA_NONE, location = 352, value = 0x0, flags = 1 '\001'}

1 に対して
{type = CPP_NUMBER, id_kind = C_ID_NONE, keyword = RID_MAX, pragma_kind = PRAGMA_NONE, location = 416, value = 0xb78e0c94, flags = 1 '\001'}

; に対して
{type = CPP_SEMICOLON, id_kind = C_ID_NONE, keyword = RID_MAX, pragma_kind = PRAGMA_NONE, location = 448, value = 0x0, flags = 0 '\000'}

のように c_token が作られていることが分かる.

(*2) c_token::type

字句そのものの値.

	上から推察するに整数の 1 にも, 浮動小数点数の 0.5 にも CPP_NUMBER が
	割り振られているということだ. ここいらは gcc の実装がそうなっている
	ということであって, 別の実装では分けてあるかもしれない.
	同じことはキーワードについてもいえる. int と double に別の値を
	割り振ることもあるからだ.

(*3) c_token::id_kind

c_token:type が CPP_NAME の場合に限り C_ID_NONE 以外の値になる

	     C_ID_ID          いわゆる identifier
	     C_ID_TYPENAME    いわゆる typedef 名
	     C_ID_CLASSNAME   いわゆる タグ名
	     C_ID_ADDRSPACE   ????

(*4) c_token::location

これはファイルにおける位置を記録するもので, 型は unsigned int だが高度に
ハッシュ化されている.

gcc の実装では

	o ファイルパス名
	o 行番号
	o カラム数
	o システムヘッダーかどうか

を保持しているが, 字句一つ一つに例えば

struct info {
  string name;
  int line;
  int columun;
  bool sys;
};

のような情報は保持してはいないということ.

c_token::location から上の情報を取得する方法として, 例えばこのページにある
output_macro_info.diff の

+ 		       rich_location richloc(pfile->line_table, pfile->directive_line);
+ 		       expanded_location exloc = richloc.get_expanded_location(0);
+ 		       const char* file = exloc.file;
+ 		       int line = exloc.line;

が参考になる.

(*5) c_token::value

このメンバの型は tree 型で, すなわちそれは以下の共用体だったりする.

union tree_node {
    tree_base base;
    tree_typed typed;
    tree_common common;
    tree_int_cst int_cst;
    tree_poly_int_cst poly_int_cst;
    tree_real_cst real_cst;
...
}* tree;

見ての通りだが, これは色々なところで出現するようなごった煮なわけだ.

int a = 1;

の a に対して, おそらく a という文字列と a の型はまだ, この時点では
決まっていないという情報を持っていると考えられる. なのでここではそれ
を確認する.

c-lex.c:469

      *value = HT_IDENT_TO_GCC_IDENT (HT_NODE (tok->val.node.node));  ここ

gcc-10.2.0/libcpp/include/cpplib.h
#define HT_NODE(NODE)		(&(NODE)->ident)

gcc-10.2.0/gcc/tree.h
#define HT_IDENT_TO_GCC_IDENT(NODE) \
  ((tree) ((char *) (NODE) - sizeof (struct tree_common)))

参照しているのは ident でそこからアドレスの調整をしているといったところ.

(gdb) p tok.val.node.node.ident
$33 = {str = 0xb7974170 "a", len = 1, hash_value = 4294967281}

ということで

(gdb) p parser->tokens[0].value.identifier.id
$37 = {str = 0xb7974170 "a", len = 1, hash_value = 4294967281}

これがセットされているということだ.
まとめると, 

c_token::type が CPP_NAME で
c_token::id_kind が C_ID_ID ならば
c_token::value の identifier.id に文字列が入っているとうことである.

残念ながら「型がまだ決まっていない」という情報がどこに入っているのかは
不明だった.

ところで,

gcc-10.2.0/gcc/c/c-parser.c:396
	decl = lookup_name (token->value);

がこの a に対して実行された. 普通に考えれば記号表が参照されたという
ところなのだろうが, 自分が想像していたものではない. この場合の a
に対しては「記号表が参照されるべきではなく, 新しく名前を作る」
というのがコンパイラとしての動作だと考えているからだ.

とはいえ, 今回の a の調査ではこんなもので満足しておく.

int a = 1; の 1 についてはどうなっているべきだろうか.

c-lex.c:488
	    *value = interpret_integer (tok, flags, &overflow);  ここ

さらに以下で作られる.

static tree
wide_int_to_tree_1 (tree type, const wide_int_ref &pcst)
{
...

最初の type の引数には 1 の型である int が指定されていると推測される.
2 つ目の pcst の引数には値が保持されていて *pcst.val に 1 が入っていた.

この函数でも出現するが, tree 型にはマクロが駆使される:

  TREE_CODE (type) : INTEGER_TYPE
  TYPE_PRECISION (type) : 32
  TYPE_SIGN (type) : SIGNED

(*6) tree のデバッグ

tree 型の変数が gcc のたくさんのところで使用される. できればこれを簡単に
デバッグしたい.

以下の函数を gcc-10.2.0/gcc/tree.c の末尾に追加した:

void print(tree p)
{
  // ...
}

そしてこの函数をデバッガのコマンドラインから呼び出せばよい. まずは
int a = 1; の a や 1 には少なくとも対応したい. この函数は解析が進めば
どんどん膨大になっていく. しかし現状ではしょうがないことだ.

最初のバージョンは以下のようにした:

void print(tree p)
{
  if (!p) {
    printf("nullptr\n");
    return;
  }
  switch (p->base.code) {
  case IDENTIFIER_NODE:
    printf("IDENTIFIER_NODE\n");
    break;
  case INTEGER_CST:
    printf("INTEGER_CST\n");
    break;
  default:
    printf("Unknown\n");
    break;
  }
}

さてこれを cc1 に取り込むには, ビルドのログを参照するとよい.

% g++ -c ... -o tree.o ... ../.././gcc/tree.c
% ar rcT libbackend.a ... tree.o
% g++ ... -o cc1 ... libbackend.a

のようになる. これは自分が行ったビルドのログを見る必要がある.
スクリプトでもいいし, Makefile を書いてもよいがここは簡単であることが重要.
参考までに私のログファイルは以下のようになっていた:

g++ -std=gnu++98 -fno-PIE -c   -g -DIN_GCC     -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-error=format-diag -Wno-format -Wmissing-format-attribute -Woverloaded-virtual -pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings -fno-common  -DHAVE_CONFIG_H -I. -I. -I../.././gcc -I../.././gcc/. -I../.././gcc/../include -I../.././gcc/../libcpp/include  -I../.././gcc/../libdecnumber -I../.././gcc/../libdecnumber/bid -I../libdecnumber -I../.././gcc/../libbacktrace   -o tree.o -MT tree.o -MMD -MP -MF ./.deps/tree.TPo ../.././gcc/tree.c

ar rcT libbackend.a gimple-match.o generic-match.o insn-attrtab.o insn-automata.o insn-dfatab.o insn-emit.o insn-extract.o insn-latencytab.o insn-modes.o insn-opinit.o insn-output.o insn-peep.o insn-preds.o insn-recog.o insn-enums.o ggc-page.o alias.o alloc-pool.o auto-inc-dec.o auto-profile.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o ccmp.o cfg.o cfganal.o cfgbuild.o cfgcleanup.o cfgexpand.o cfghooks.o cfgloop.o cfgloopanal.o cfgloopmanip.o cfgrtl.o symtab.o cgraph.o cgraphbuild.o cgraphunit.o cgraphclones.o combine.o combine-stack-adj.o compare-elim.o context.o convert.o coroutine-passes.o coverage.o cppbuiltin.o cppdefault.o cprop.o cse.o cselib.o data-streamer.o data-streamer-in.o data-streamer-out.o dbxout.o dbgcnt.o dce.o ddg.o debug.o df-core.o df-problems.o df-scan.o dfp.o digraph.o dojump.o dominance.o domwalk.o double-int.o dse.o dumpfile.o dwarf2asm.o dwarf2cfi.o dwarf2out.o early-remat.o emit-rtl.o et-forest.o except.o explow.o expmed.o expr.o fibonacci_heap.o file-prefix-map.o final.o fixed-value.o fold-const.o fold-const-call.o function.o function-abi.o function-tests.o fwprop.o gcc-rich-location.o gcse.o gcse-common.o ggc-common.o ggc-tests.o gimple.o gimple-builder.o gimple-expr.o gimple-iterator.o gimple-fold.o gimple-laddress.o gimple-loop-interchange.o gimple-loop-jam.o gimple-loop-versioning.o gimple-low.o gimple-pretty-print.o gimple-ssa-backprop.o gimple-ssa-evrp.o gimple-ssa-evrp-analyze.o gimple-ssa-isolate-paths.o gimple-ssa-nonnull-compare.o gimple-ssa-split-paths.o gimple-ssa-store-merging.o gimple-ssa-strength-reduction.o gimple-ssa-sprintf.o gimple-ssa-warn-alloca.o gimple-ssa-warn-restrict.o gimple-streamer-in.o gimple-streamer-out.o gimple-walk.o gimplify.o gimplify-me.o godump.o graph.o graphds.o graphviz.o graphite.o graphite-isl-ast-to-gimple.o graphite-dependences.o graphite-optimize-isl.o graphite-poly.o graphite-scop-detection.o graphite-sese-to-poly.o gtype-desc.o haifa-sched.o hash-map-tests.o hash-set-tests.o hsa-common.o hsa-gen.o hsa-regalloc.o hsa-brig.o hsa-dump.o hw-doloop.o hwint.o ifcvt.o ree.o inchash.o incpath.o init-regs.o internal-fn.o ipa-cp.o ipa-sra.o ipa-devirt.o ipa-fnsummary.o ipa-polymorphic-call.o ipa-split.o ipa-inline.o ipa-comdats.o ipa-visibility.o ipa-inline-analysis.o ipa-inline-transform.o ipa-predicate.o ipa-profile.o ipa-prop.o ipa-param-manipulation.o ipa-pure-const.o ipa-icf.o ipa-icf-gimple.o ipa-reference.o ipa-hsa.o ipa-ref.o ipa-utils.o ipa.o ira.o ira-build.o ira-costs.o ira-conflicts.o ira-color.o ira-emit.o ira-lives.o jump.o langhooks.o lcm.o lists.o loop-doloop.o loop-init.o loop-invariant.o loop-iv.o loop-unroll.o lower-subreg.o lra.o lra-assigns.o lra-coalesce.o lra-constraints.o lra-eliminations.o lra-lives.o lra-remat.o lra-spills.o lto-cgraph.o lto-streamer.o lto-streamer-in.o lto-streamer-out.o lto-section-in.o lto-section-out.o lto-opts.o lto-compress.o mcf.o mode-switching.o modulo-sched.o multiple_target.o omp-offload.o omp-expand.o omp-general.o omp-grid.o omp-low.o omp-simd-clone.o opt-problem.o optabs.o optabs-libfuncs.o optabs-query.o optabs-tree.o optinfo.o optinfo-emit-json.o options-save.o opts-global.o ordered-hash-map-tests.o passes.o plugin.o postreload-gcse.o postreload.o predict.o print-rtl.o print-rtl-function.o print-tree.o profile.o profile-count.o range.o range-op.o read-md.o read-rtl.o read-rtl-function.o real.o realmpfr.o recog.o reg-stack.o regcprop.o reginfo.o regrename.o regstat.o reload.o reload1.o reorg.o resource.o rtl-error.o rtl-tests.o rtl.o rtlhash.o rtlanal.o rtlhooks.o rtx-vector-builder.o run-rtl-passes.o sched-deps.o sched-ebb.o sched-rgn.o sel-sched-ir.o sel-sched-dump.o sel-sched.o selftest-rtl.o selftest-run-tests.o sese.o shrink-wrap.o simplify-rtx.o sparseset.o spellcheck.o spellcheck-tree.o sreal.o stack-ptr-mod.o statistics.o stmt.o stor-layout.o store-motion.o streamer-hooks.o stringpool.o substring-locations.o target-globals.o targhooks.o timevar.o toplev.o tracer.o trans-mem.o tree-affine.o asan.o tsan.o ubsan.o sanopt.o sancov.o tree-call-cdce.o tree-cfg.o tree-cfgcleanup.o tree-chrec.o tree-complex.o tree-data-ref.o tree-dfa.o tree-diagnostic.o tree-diagnostic-path.o tree-dump.o tree-eh.o tree-emutls.o tree-if-conv.o tree-inline.o tree-into-ssa.o tree-iterator.o tree-loop-distribution.o tree-nested.o tree-nrv.o tree-object-size.o tree-outof-ssa.o tree-parloops.o tree-phinodes.o tree-predcom.o tree-pretty-print.o tree-profile.o tree-scalar-evolution.o tree-sra.o tree-switch-conversion.o tree-ssa-address.o tree-ssa-alias.o tree-ssa-ccp.o tree-ssa-coalesce.o tree-ssa-copy.o tree-ssa-dce.o tree-ssa-dom.o tree-ssa-dse.o tree-ssa-forwprop.o tree-ssa-ifcombine.o tree-ssa-live.o tree-ssa-loop-ch.o tree-ssa-loop-im.o tree-ssa-loop-ivcanon.o tree-ssa-loop-ivopts.o tree-ssa-loop-manip.o tree-ssa-loop-niter.o tree-ssa-loop-prefetch.o tree-ssa-loop-split.o tree-ssa-loop-unswitch.o tree-ssa-loop.o tree-ssa-math-opts.o tree-ssa-operands.o tree-ssa-phiopt.o tree-ssa-phiprop.o tree-ssa-pre.o tree-ssa-propagate.o tree-ssa-reassoc.o tree-ssa-sccvn.o tree-ssa-scopedtables.o tree-ssa-sink.o tree-ssa-strlen.o tree-ssa-structalias.o tree-ssa-tail-merge.o tree-ssa-ter.o tree-ssa-threadbackward.o tree-ssa-threadedge.o tree-ssa-threadupdate.o tree-ssa-uncprop.o tree-ssa-uninit.o tree-ssa.o tree-ssanames.o tree-stdarg.o tree-streamer.o tree-streamer-in.o tree-streamer-out.o tree-tailcall.o tree-vect-generic.o tree-vect-patterns.o tree-vect-data-refs.o tree-vect-stmts.o tree-vect-loop.o tree-vect-loop-manip.o tree-vect-slp.o tree-vectorizer.o tree-vector-builder.o tree-vrp.o tree.o tristate.o typed-splay-tree.o unique-ptr-tests.o valtrack.o value-range.o value-prof.o var-tracking.o varasm.o varpool.o vec-perm-indices.o vmsdbgout.o vr-values.o vtable-verify.o web.o wide-int.o wide-int-print.o xcoffout.o i386.o analyzer/analysis-plan.o analyzer/analyzer.o analyzer/analyzer-logging.o analyzer/analyzer-pass.o analyzer/analyzer-selftests.o analyzer/bar-chart.o analyzer/call-string.o analyzer/checker-path.o analyzer/constraint-manager.o analyzer/diagnostic-manager.o analyzer/engine.o analyzer/function-set.o analyzer/pending-diagnostic.o analyzer/program-point.o analyzer/program-state.o analyzer/region-model.o analyzer/sm.o analyzer/sm-file.o analyzer/sm-malloc.o analyzer/sm-pattern-test.o analyzer/sm-sensitive.o analyzer/sm-signal.o analyzer/sm-taint.o analyzer/state-purge.o analyzer/supergraph.o x86-tune-sched.o x86-tune-sched-bd.o x86-tune-sched-atom.o x86-tune-sched-core.o i386-options.o i386-builtins.o i386-expand.o i386-features.o linux.o cet.o host-linux.o

g++ -std=gnu++98 -no-pie   -g -DIN_GCC     -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-error=format-diag -Wno-format -Wmissing-format-attribute -Woverloaded-virtual -pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings -fno-common  -DHAVE_CONFIG_H -static-libstdc++ -static-libgcc  -o cc1 c/c-lang.o c-family/stub-objc.o attribs.o c/c-errors.o c/c-decl.o c/c-typeck.o c/c-convert.o c/c-aux-info.o c/c-objc-common.o c/c-parser.o c/c-fold.o c/gimple-parser.o c-family/c-common.o c-family/c-cppbuiltin.o c-family/c-dump.o c-family/c-format.o c-family/c-gimplify.o c-family/c-indentation.o c-family/c-lex.o c-family/c-omp.o c-family/c-opts.o c-family/c-pch.o c-family/c-ppoutput.o c-family/c-pragma.o c-family/c-pretty-print.o c-family/c-semantics.o c-family/c-ada-spec.o c-family/c-ubsan.o c-family/known-headers.o c-family/c-attribs.o c-family/c-warn.o c-family/c-spellcheck.o i386-c.o glibc-c.o \
	  cc1-checksum.o libbackend.a main.o libcommon-target.a libcommon.a ../libcpp/libcpp.a ../libdecnumber/libdecnumber.a libcommon.a ../libcpp/libcpp.a   ../libbacktrace/.libs/libbacktrace.a ../libiberty/libiberty.a ../libdecnumber/libdecnumber.a   -lmpc -lmpfr -lgmp -rdynamic -ldl  -L./../zlib -lz 

とりあえず cc1 を再度 gdb で動作させ

c_token *
c_parser_peek_token (c_parser *parser)
{
  if (parser->tokens_avail == 0)
    {
      c_lex_one_token (parser, &parser->tokens[0]);
      parser->tokens_avail = 1;  ここにブレークポイントをセット

ここで停止したときに

(gdb) p print(parser->tokens[0]->value)

のようにしてみるわけだ. a に対しては

IDENTIFIER_NODE

1 に対しては

INTEGER_CST

と表示しただろう. この表示結果は確かに満足できるものではないが,
これを進化させていけばよい.
