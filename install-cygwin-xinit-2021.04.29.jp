cygwin で xinit をインストールしたときのメモ

(*1) ダウンロードとインストール
% wget -q http://cygwin.mirror.constant.com/x86_64/release/xinit/xinit-1.4.1-1-src.tar.xz
% xz -d -c xinit-1.4.1-1-src.tar.xz | tar xf - 
% cd xinit-1.4.1-1.src
% bunzip2 -c xinit-1.4.1.tar.bz2 | tar xf -
% cd xinit-1.4.1
% ./configure
% make
% ls -l /usr/local/bin/xinit
# 作成されていることを確認した
% ls -l /usr/local/bin/startx
# 作成されていることを確認した
% ls -l /usr/local/etc/X11/xinit/xinitrc
# 作成されていることを確認した

(*2) 動作確認 => /usr/local/bin/X を実行しようとしてエラーしている.

> source ~/.tcshrc
> which startx
/usr/local/bin/startx
> file /usr/local/bin/startx
/usr/local/bin/startx: POSIX shell script, ASCII text executable
> sh -vf /usr/local/bin/startx
#!/bin/sh

#
# This is just a sample implementation of a slightly less primitive
# interface than xinit. It looks for user .xinitrc and .xserverrc
# files, then system xinitrc and xserverrc files, else lets xinit choose
# its default. The system xinitrc should probably do things like check
# for .Xresources files and merge them in, start up a window manager,
# and pop a clock and several xterms.
#
# Site administrators are STRONGLY urged to write nicer versions.
#

unset DBUS_SESSION_BUS_ADDRESS
unset SESSION_MANAGER
userclientrc=$HOME/.xinitrc
sysclientrc=/usr/local/etc/X11/xinit/xinitrc

userserverrc=$HOME/.xserverrc
sysserverrc=/usr/local/etc/X11/xinit/xserverrc
defaultclient=xterm
defaultserver=/usr/local/bin/X
defaultclientargs=""
defaultserverargs=""
defaultdisplay=""
clientargs=""
serverargs=""
vtarg=""
enable_xauth=1


# Automatically determine an unused $DISPLAY
d=0
while true ; do
    [ -e "/tmp/.X$d-lock" -o -S "/tmp/.X11-unix/X$d" ] || break
    d=$(($d + 1))
done
defaultdisplay=":$d"
unset d

whoseargs="client"
while [ x"$1" != x ]; do
    case "$1" in
    # '' required to prevent cpp from treating "/*" as a C comment.
    /''*|\./''*)
 if [ "$whoseargs" = "client" ]; then
     if [ x"$client" = x ] && [ x"$clientargs" = x ]; then
  client="$1"
     else
  clientargs="$clientargs $1"
     fi
 else
     if [ x"$server" = x ] && [ x"$serverargs" = x ]; then
  server="$1"
     else
  serverargs="$serverargs $1"
     fi
 fi
 ;;
    --)
 whoseargs="server"
 ;;
    *)
 if [ "$whoseargs" = "client" ]; then
     clientargs="$clientargs $1"
 else
     # display must be the FIRST server argument
     if [ x"$serverargs" = x ] && \
   expr "$1" : ':[0-9][0-9]*$' > /dev/null 2>&1; then
  display="$1"
     else
  serverargs="$serverargs $1"
     fi
 fi
 ;;
    esac
    shift
done

# process client arguments
if [ x"$client" = x ]; then
    client=$defaultclient

    # For compatibility reasons, only use startxrc if there were no client command line arguments
    if [ x"$clientargs" = x ]; then
        if [ -f "$userclientrc" ]; then
            client=$userclientrc
        elif [ -f "$sysclientrc" ]; then
            client=$sysclientrc
        fi
    fi
fi

# if no client arguments, use defaults
if [ x"$clientargs" = x ]; then
    clientargs=$defaultclientargs
fi

# process server arguments
if [ x"$server" = x ]; then
    server=$defaultserver
    # For compatibility reasons, only use xserverrc if there were no server command line arguments
    if [ x"$serverargs" = x -a x"$display" = x ]; then
 if [ -f "$userserverrc" ]; then
     server=$userserverrc
 elif [ -f "$sysserverrc" ]; then
     server=$sysserverrc
 fi
    fi
fi

# if no server arguments, use defaults
if [ x"$serverargs" = x ]; then
    serverargs=$defaultserverargs
fi

# if no vt is specified add vtarg (which may be empty)
have_vtarg="no"
for i in $serverargs; do
    if expr "$i" : 'vt[0-9][0-9]*$' > /dev/null; then
        have_vtarg="yes"
    fi
done
if [ "$have_vtarg" = "no" ]; then
    serverargs="$serverargs $vtarg"
fi

# if no display, use default
if [ x"$display" = x ]; then
    display=$defaultdisplay
fi

if [ x"$enable_xauth" = x1 ] ; then
    if [ x"$XAUTHORITY" = x ]; then
        XAUTHORITY=$HOME/.Xauthority
        export XAUTHORITY
    fi

    removelist=

    # set up default Xauth info for this machine
    case `uname` in
    Linux*)
        if [ -z "`hostname --version 2>&1 | grep GNU`" ]; then
            hostname=`hostname -f`
        else
            hostname=`hostname`
        fi
        ;;
    *)
        hostname=`hostname`
        ;;
    esac

    authdisplay=${display:-:0}

    mcookie=`/usr/bin/mcookie`







    if test x"$mcookie" = x; then
        echo "Couldn't create cookie"
        exit 1
    fi
    dummy=0

    # create a file with auth information for the server. ':0' is a dummy.
    xserverauthfile=$HOME/.serverauth.$$
    trap "rm -f '$xserverauthfile'" HUP INT QUIT ILL TRAP KILL BUS TERM
    xauth -q -f "$xserverauthfile" << EOF
add :$dummy . $mcookie
EOF

    xserverauthfilequoted=$(echo ${xserverauthfile} | sed "s/'/'\\\\''/g")
    serverargs=${serverargs}" -auth '"${xserverauthfilequoted}"'"




    # now add the same credentials to the client authority file
    # if '$displayname' already exists do not overwrite it as another
    # server may need it. Add them to the '$xserverauthfile' instead.
    for displayname in $authdisplay $hostname$authdisplay; do
        authcookie=`xauth list "$displayname" \
        | sed -n "s/.*$displayname[[:space:]*].*[[:space:]*]//p"` 2>/dev/null;
        if [ "z${authcookie}" = "z" ] ; then
            xauth -q << EOF
add $displayname . $mcookie
EOF
        removelist="$displayname $removelist"
        else
            dummy=$(($dummy+1));
            xauth -q -f "$xserverauthfile" << EOF
add :$dummy . $authcookie
EOF
        fi
    done
fi
xauth:  file /cygdrive/d/home/khasegawa/.serverauth.65350 does not exist


eval xinit \"$client\" $clientargs -- \"$server\" $display $serverargs
xinit "/usr/local/etc/X11/xinit/xinitrc" -- "/usr/local/bin/X" :0 -auth '/cygdrive/d/home/khasegawa/.serverauth.65350'

xinit: unable to run server "/usr/local/bin/X": No such file or directory
Use the -- option, or make sure that /usr/local/bin is in your path and
that "/usr/local/bin/X" is a program or a link to the right type of server
for your display.  Possible server names include:

    XWin        X Server for the Cygwin environment on Microsoft Windows
    Xvfb        Virtual frame buffer
    Xfake       kdrive-based virtual frame buffer
    Xnest       X server nested in a window on another X server
    Xephyr      kdrive-based nested X server
    Xvnc        X server accessed over VNC's RFB protocol
    Xdmx        Distributed Multi-head X server

xinit: giving up
xinit: unable to connect to X server: Connection refused
xinit: server error



retval=$?

if [ x"$enable_xauth" = x1 ] ; then
    if [ x"$removelist" != x ]; then
        xauth remove $removelist
    fi
    if [ x"$xserverauthfile" != x ]; then
        rm -f "$xserverauthfile"
    fi
fi
exit $retval
>

(*3) libX11 のインストール-+

% wget -q http://cygwin.mirror.constant.com/x86_64/release/libX11/libX11-1.6.12-1-src.tar.xz
% xz -d -c libX11-1.6.12-1-src.tar.xz | tar xf -
% cd libX11-1.6.12-1.src
% bunzip2 -c libX11-1.6.12.tar.bz2 | tar xf -
% cd libX11-1.6.12
% ./configure
ここで以下のエラー:
configure: error: Package requirements (xproto >= 7.0.17 xextproto xtrans xcb >= 1.11.1 kbproto inputproto) were not met:

Package 'xtrans', required by 'virtual:world', not found

(*4) 一旦 pkgconf のインストール
% wget -q http://cygwin.mirror.constant.com/x86_64/release/pkgconf/pkgconf-1.6.3-1-src.tar.xz
% xz -d -c pkgconf-1.6.3-1-src.tar.xz | tar xf -
% cd pkgconf-1.6.3-1.src
% xz -d -c pkgconf-1.6.3.tar.xz | tar xf -
% cd pkgconf-1.6.3
% ./configure
% make
% make install
% ls -l /usr/local/bin/
% ls -l /usr/local/bin/pkgconf.exe
# 作成されていることを確認した

(*5) libX11 のインストール再開

% cd ~/libX11-1.6.12-1.src/libX11-1.6.12
% ./configure

     (*3) と同じところでエラーした. (*4) ではエラーを回避できていなかった.
     config.log を見ると

     $PKG_CONFIG --exists --print-errors "$X11_REQUIRES"

     でエラーしたらしい.

% pkgconf --exists --print-errors 'xproto >= 7.0.17 xextproto xtrans xcb >= 1.11.1'
Package xproto was not found in the pkg-config search path.
Perhaps you should add the directory containing `xproto.pc'
to the PKG_CONFIG_PATH environment variable
Package 'xproto', required by 'virtual:world', not found
Package 'xextproto', required by 'virtual:world', not found
Package 'xtrans', required by 'virtual:world', not found
Package 'xcb', required by 'virtual:world', not found
%

     これはそれなりに動いてエラーしたっぽい.
     config.log から成功した pkgconf の実行があったのでそれを直接実行してみた:

% pkgconf --exists --print-errors "xorg-sgml-doctools >= 1.10"
Package xorg-sgml-doctools was not found in the pkg-config search path.
Perhaps you should add the directory containing `xorg-sgml-doctools.pc'
to the PKG_CONFIG_PATH environment variable
Package 'xorg-sgml-doctools', required by 'virtual:world', not found
%

     これは予期せずエラーしている. ということは ./configure から実行したのと
     そうでないのとでは何かが異なっている.

% /usr/bin/pkgconf --exists --print-errors "xorg-sgml-doctools >= 1.10"

     これは正常終了したようだ. どうやら /usr/bin/pkgconf は
     
     /usr/share/pkgconfig

     を参照しているようだ.

     /usr/share/pkgconfig/xorg-sgml-doctools.pc

     というファイルが存在している. これから推察すると, xproto.pc がないから
     エラーしているらしい.
     