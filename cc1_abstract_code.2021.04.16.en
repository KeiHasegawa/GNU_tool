cc1 abstract code investigation

(*1) 3 address code `gimple'
(*2) basic block `basic_block'

(*1) 3 address code `gimple'

     We've already investigated below:

     o tree : function body expression after parsing
     o rtn_insn : instruction sequence before assembler generation

     described at "cc1 assembler generation investigation" on this web page.

     And `gimple' is medium between tree and rtn_insn. Roughly say,

     tree -> gimple -> rtx_insn

     First, think about simple source file:

     int f(int a, int b, int c)
     {
       return a ? b : c;
     }

     Now I'll explain how `gimple' is created for above `f'. Before
     investigation, I expected something like below:

     f:
         if a != 0 goto label1
         t0 := b
         goto label2
         label1:
         t0 := c
         label2:
         return t0

     will be created. For these sequence, it's possible to generate
     target code by simple conversion.

     cc1 creates these at below:

gimplify.c:14805
  /* Gimplify the function's body.  */
  seq = NULL;
  gimplify_stmt (&DECL_SAVED_TREE (fndecl), &seq); // This function converts
  outer_stmt = gimple_seq_first_nondebug_stmt (seq);
  if (!outer_stmt)

     By the way, `gimple' does not exist in common dictionary. I guess that
     `gimple' is kind of coined word near `simple'.

     In above code, 1st argument of `gimplify_stmt' is a `tree' of function
     body.

(gdb) b gimplify_stmt
...
Stop at `gimplify_stmt'
(gdb) p debug_tree(*stmt_p)

     You can confirm by above operation or it's OK use your own `print(tree)' 
     And more, after `outer_stmt' variable is set, do like below:

(gdb) p debug_gimple_stmt(outer_stmt)
{
  if (a != 0) goto <D.1529>; else goto <D.1530>;
  <D.1529>:
  iftmp.0 = b;
  goto <D.1531>;
  <D.1530>:
  iftmp.0 = c;
  <D.1531>:
  D.1527 = iftmp.0;
  return D.1527;
}
$90 = void
(gdb)

    This is, what I've been looking for, even though it's not exactly same.
    It's very important for us to understand conversion form `tree' to
    `gimple'. But I'm not so interrested with that at this point.
    So omitted precise. Say, in my implementation, no tree and directly
    generate 3 address code which is correspond to `gimple'. Now just
    I say the conversion is perfomed at next function:

enum gimplify_status
gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,
	       bool (*gimple_test_f) (tree), fallback_t fallback)
{

    The most difference between `tree' and `gimple' is to express
    the flow of program. `gimple' uses goto and label.

    But there is another difference. For example:

    int f(int a, int b, int c)
    {
      return a + b * c;
    }

    Do same operation for above code:

(gdb) p debug_gimple_stmt(outer_stmt)
{
  _1 = b * c;
  D.1527 = a + _1;
  return D.1527;
}

    This is what I've looking for exactly.

(*2) basic block `basic_block'

     Once 3 address code sequence is generated, it's normal to create
     basic block. Of cause it's not ncessary if no optimization.
     For example,

     int f(int a, int b, int c)
     {
       return a ? b : c;
     }

     Above function `f' consists 4 basic blocks:

     B0
        if a != 0 goto label1

     B1
        t0 := b
        goto label2

     B2
        label1:
        t0 := c

     B3
        label2:
        return t0

     Grpahical explanation is:

               +----+
               | B0 |
               +----+
             /       \
      +----+           +----+
      | B1 |           | B2 |
      +----+           +----+
             \       /
               +----+
               | B3 |
               +----+

    cc1 creates basic block at below:

tree-cfg.c:548
      if (start_new_block || stmt_starts_bb_p (stmt, prev_stmt))
	{
	  if (!first_stmt_of_seq)
	    gsi_split_seq_before (&i, &seq);
	  bb = create_basic_block (seq, bb);
	  start_new_block = false;

      After `bb' is set, do like below:

(gdb) p debug_bb_slim(bb->prev_bb)
(gdb) p debug_bb_slim(bb)

      There is a useful function for `basic_block'. Above operation
      shows that this function consists from 5 basic blocks like below:

----------------------------------------------------------
;; basic block 2, loop depth 0
;;  pred:      
if (a != 0) goto <D.1529>; else goto <D.1530>;
;;  succ:      
----------------------------------------------------------
;; basic block 3, loop depth 0
;;  pred:      
<L0>:
iftmp.0 = b;
goto <D.1531>;
;;  succ:      
----------------------------------------------------------
;; basic block 4, loop depth 0
;;  pred:      
<L1>:
iftmp.0 = c;
;;  succ:      
----------------------------------------------------------
;; basic block 5, loop depth 0
;;  pred:      
<L2>:
D.1527 = iftmp.0;
goto <D.1532>;
;;  succ:      
----------------------------------------------------------
;; basic block 6, loop depth 0
;;  pred:      
<D.1532>:
return D.1527;
;;  succ:      
----------------------------------------------------------

      <D.1532> label exists, so not 4 basic blocks but 5.
