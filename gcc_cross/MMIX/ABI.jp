(*1) MMIX

https://ja.wikipedia.org/wiki/MMIX

(*2) レジスタ

	$0, ..., $255 : GPR
	$253 : フレームポインタ
	$254 : スタックポインタ

(*3) 特殊レジスタ

	rJ : 函数呼び出し命令 (push) で次の命令のアドレスを格納する.
	     函数復帰命令 (pop) でこのレジスタのアドレスにプログラムの制御が移る.

	rJ も含めて 32 本の特殊レジスタがある.
	
(*4) ローカルレジスタスタック

	例えば
	
	int f(int, int);

	f(5, 6);

	に対して

	setl	$3, #5
	setl	$4, #6
	pushj	$2, f

	のようにコードを書く. このとき呼び出された f で $0, $1 を参照すると 5 と 6 が入っ
	ている. この例で $2, $3, $4 ではなくて $7, $8, $9 であっても, やはり呼び出され
	た f で $0, $1 を参照すると 5 と 6 が入っている.

	上の例で呼び出し側のローカルレジスタは PUSHJ 命令の時点では $0, $1
	である. そのようにローカルレジスタという用語を定義する. ローカルレジスタは使用すると
	自動的に追加される.
	
	但し, グローバルレジスタは使用してもローカルレジスタにはならない. ここでグローバルレジ
	スタとは特殊レジスタ rG の値以上の番号の GPR である.

	函数呼び出しの前後でローカルレジスタは変更されない.

(*5) プロローグ

	以下は 128 バイトのローカル領域を使用する函数のプロローグ

	subu   $254, $254, 144
	stou   $253, $254, 136
	get    $1, rJ
	stou   $1, $254, 128
	addu   $253, $254, 144


	+---------------+ <- $254_{new} 
	|		|
	|		|
	~		~
	|		|
	|		|
   +128 +---------------+
	|   $rJ_{old}	|
   +136	+---------------+
	|   $253_{old}	|
   +144	+---------------+ <- $254_{old}, $253_{new}


	$254 をスタックポインタ, $253 をフレームポインタとして使用して
	いる. $253, $254 はグローバルレジスタである必要があるため
	rG レジスタをスタートアップルーチンで, 例えば 32 にセットして
	おく.

(*6) エピローグ

	以下は 128 バイトのローカル領域を使用する函数のエピローグ

	ldo	$253, $254, 136
	ldo	$1, $254, 128
	put	rJ, $1
	addu	$254, $254, 144
	pop	0, 0

	$253, $254, rJ が復元され呼び出し元に復帰する.

(*7) 函数呼び出し

	ローカルレジスタスタックで述べたように呼び出された函数では
	
        第 1 引数 : $0
	第 2 引数 : $1
	...

	第 16 引数 : $15
	第 17 引数 : スタックを利用する

	一方呼び出す側の函数は

	setl	$8, #5
	setl	$9, #6
	pushj	$7, f

	のように第 1 引数をセットするレジスタは pushj 命令に指定するレジスタの次のレジスタ
	になる. 上の例では $7 の次の $8 が第 1 引数になる. 第 17 引数はスタックに積む. 

