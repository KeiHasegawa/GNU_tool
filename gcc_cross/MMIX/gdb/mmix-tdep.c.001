#include "defs.h"
#include "value.h"
#include "arch-utils.h"
#include "regcache.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "dis-asm.h"
#include "dwarf2/frame.h"
#include "frame-base.h"
#include "frame-unwind.h"

static int
mmix_register_sim_regno(struct gdbarch *gdbarch, int regnum)
{
  return regnum;
}

static int
mmix_dbg_reg_to_regnum(struct gdbarch *gdbarch, int regnum)
{
  asm("int3");
  return regnum;
}

const int pc_regno = 64;
const int sp_regno = 0;

static const char*
mmix_register_name (struct gdbarch *gdbarch, int regno)
{
  if (regno == pc_regno)
    return "pc";
  if (regno == sp_regno)
    return "sp";

  if (regno < 16) {
    static const char* name[] = {
      "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
      "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"};
    return name[regno];
  }

  if (regno < 32) {
    static const char* name[] = {
      "alt0", "alt1", "alt2", "alt3", "alt4", "alt5", "alt6", "alt7",
      "alt8", "alt9", "alt10", "alt11", "alt12", "alt13", "alt14", "alt15"};
    return name[regno-16];
  }

  int n = regno - 32;
  static const char* name[] = {
    "sr", "ver", "esr", "fsr", "epc", "efp",
    "ss0", "ss1", "ss2", "ss3", "ss4", "gcr", "gsr"
  };
  if (n < sizeof name/sizeof name[0])
    return name[n];
  return 0;
}

static enum return_value_convention
mmix_return_value (struct gdbarch *gdbarch, struct value *function,
		    struct type *type, struct regcache *regcache,
		    gdb_byte *readbuf, const gdb_byte *writebuf)
{
  asm("int3");
  return return_value_convention(0);
}

static struct type*
mmix_register_type(struct gdbarch* gdbarch, int regno)
{
  switch (regno) {
  case pc_regno: return builtin_type (gdbarch)->builtin_func_ptr;
  case sp_regno: return builtin_type (gdbarch)->builtin_data_ptr;
  default:       return builtin_type(gdbarch)->builtin_int32;
  }
}

static void
mmix_print_registers_info(struct gdbarch *gdbarch, struct ui_file *file,
			   struct frame_info *frame, int regno, int cpregs)
{
  asm("int3");
}

static CORE_ADDR
mmix_skip_prologue(struct gdbarch *gdbarch, CORE_ADDR pc)
{
  asm("int3");
  return pc;
}

static struct frame_base mmix_frame_base = {
};

static void
mmix_frame_this_id (struct frame_info *this_frame, void **this_cache,
		     struct frame_id *this_id)
{
}

static struct value*
mmix_frame_prev_register(struct frame_info *this_frame, void **this_cache,
			  int regnum)
{
  asm("int3");
  return 0;
}

static struct frame_unwind mmix_frame_unwind = {
  NORMAL_FRAME,
  default_frame_unwind_stop_reason,
  mmix_frame_this_id,
  mmix_frame_prev_register,
  nullptr,
  default_frame_sniffer
};

static
int mmix_kind_from_pc(struct gdbarch* gdbarch, CORE_ADDR* addr)
{
  return 0;
}

static
const unsigned char* mmix_from_kind(gdbarch* handle, int kind, int* size)
{
  static unsigned char bkpt[] = { 0xba, 0xdb, 0xee, 0xf0 };
  *size = sizeof bkpt;
  return &bkpt[0];
}

static CORE_ADDR
mmix_push_dummy_call(struct gdbarch *gdbarch, struct value *function,
		      struct regcache *regcache, CORE_ADDR bp_addr,
		      int nargs, struct value **args, CORE_ADDR sp,
		      function_call_return_method return_method,
		      CORE_ADDR struct_addr)
{
  asm("int3");
  return 0;
}

static struct gdbarch*
mmix_gdbarch_init(struct gdbarch_info info, struct gdbarch_list *arches)
{
  struct gdbarch *gdbarch = gdbarch_alloc (&info, 0);

  set_gdbarch_num_regs(gdbarch, pc_regno+1);
  set_gdbarch_register_type(gdbarch, mmix_register_type);
  set_gdbarch_register_sim_regno(gdbarch, mmix_register_sim_regno);
  set_gdbarch_dwarf2_reg_to_regnum(gdbarch, mmix_dbg_reg_to_regnum);
  set_gdbarch_stab_reg_to_regnum(gdbarch, mmix_dbg_reg_to_regnum);
  set_gdbarch_register_name(gdbarch, mmix_register_name);

  set_gdbarch_pc_regnum(gdbarch, pc_regno);
  set_gdbarch_sp_regnum(gdbarch, sp_regno);
  set_gdbarch_print_registers_info(gdbarch, mmix_print_registers_info);

  set_gdbarch_ptr_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_addr_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_return_value(gdbarch, mmix_return_value);

  set_gdbarch_skip_prologue (gdbarch, mmix_skip_prologue);
  frame_base_set_default (gdbarch, &mmix_frame_base);
  dwarf2_append_unwinders(gdbarch);
  frame_unwind_append_unwinder(gdbarch, &mmix_frame_unwind);

  set_gdbarch_inner_than (gdbarch, core_addr_lessthan);
  set_gdbarch_breakpoint_kind_from_pc(gdbarch, mmix_kind_from_pc);
  set_gdbarch_sw_breakpoint_from_kind(gdbarch, mmix_from_kind);
  set_gdbarch_push_dummy_call(gdbarch, mmix_push_dummy_call);

  set_gdbarch_char_signed(gdbarch, 0);
  set_gdbarch_int_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_long_bit (gdbarch, 8 * TARGET_CHAR_BIT);

  set_gdbarch_wchar_signed(gdbarch, 0);
  set_gdbarch_wchar_bit(gdbarch, 2 * TARGET_CHAR_BIT);

  set_gdbarch_double_bit(gdbarch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_double_format(gdbarch, floatformats_ieee_double);
  set_gdbarch_long_double_bit(gdbarch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_long_double_format(gdbarch, floatformats_ieee_double);

  set_gdbarch_believe_pcc_promotion(gdbarch, 1);
 
  return gdbarch;
}

void _initialize_mmix_tdep();
void
_initialize_mmix_tdep()
{
  register_gdbarch_init(bfd_arch_mmix, mmix_gdbarch_init);
}

