AARCH64 (ARM64) のクロスコンパイル環境

(*1) AARCH64
(*2) スクリプトによるインストール
(*3) 動作確認 => target sim コマンドでエラー
(*4) target sim コマンドを受け付ける修正
(*5) 動作確認 => OK だが gdb(シミュレータ部分) と newlib の修正が必要

(*1) AARCH64

https://en.wikipedia.org/wiki/Aarch64

(*2) スクリプトによるインストール

「IQ2000」と同じスクリプトを使う

set TARGET = aarch64-elf   # ここを変更

(*3) 動作確認 => スタートアップルーチンが未完成(そのうち作成)

% aarch64-elf-gcc -g -o hello.elf hello.c
/media/8492805f-d30e-493d-8911-503c83a1d4ab/work/GNU_LANG/lib/gcc/aarch64-elf/10.2.0/../../../../aarch64-elf/bin/ld: /media/8492805f-d30e-493d-8911-503c83a1d4ab/work/GNU_LANG/lib/gcc/aarch64-elf/10.2.0/../../../../aarch64-elf/lib/libg.a(lib_a-exit.o): in function `exit':
/media/8492805f-d30e-493d-8911-503c83a1d4ab/work/GNU_LANG/newlib-4.1.0.aarch64-elf/aarch64-elf/newlib/libc/stdlib/../../../.././newlib/libc/stdlib/exit.c:64: undefined reference to `_exit'
...
%

これは exit で _exit を参照しているが _exit が定義されていないというエラー.
以下についてエラーが出ている:

_exit
_sbrk
_write
_close
_lseek
_read
_fstat
_isatty

% h8300-elf-gcc -g -o hello.elf hello.c
これは正常終了していた.
% h8300-elf-objdump -d hello.elf > aaa

これで aaa の中を確認すると

00000214 <_exit>:  # _exit  は C での exit
     214:	0d 04       	mov.w	r0,r4

00000216 <.LM2>:
     216:	19 11       	sub.w	r1,r1
     218:	5e 00 04 48 	jsr	@0x448:24

0000021c <.LM3>:
     21c:	6b 00 32 04 	mov.w	@0x3204:16,r0
     220:	6f 02 00 2a 	mov.w	@(0x2a:16,r0),r2

00000224 <.LM5>:
     224:	47 02       	beq	.+2 (0x228)

00000226 <.LM6>:
     226:	5d 20       	jsr	@r2

00000228 <.L2>:
     228:	0d 40       	mov.w	r4,r0
     22a:	5e 00 05 74 	jsr	@0x574:24   # これが _exit の呼び出し


00000574 <__exit>:  # C でいう _exit
     574:	79 01 de ad 	mov.w	#0xdead,r1
     578:	79 02 be ef 	mov.w	#0xbeef,r2
     57c:	0c 80       	mov.b	r0l,r0h
     57e:	18 88       	sub.b	r0l,r0l
     580:	01 80       	sleep


で, この _exit (アセンブラ名 __exit) の定義が
/media/8492805f-d30e-493d-8911-503c83a1d4ab/work/GNU_LANG/newlib-4.1.0.h8300-elf/newlib/libc/sys/h8300hms/_exit.S

にある.

64 ビットではない ARM はできていた.

% arm-elf-gcc -g -o hello.elf hello.c
% arm-elf-objdump -d hello.elf > aaa

こんな感じ. _exit はどこかで定義されているらしい.

00008250 <exit>:
    8250:	e1a0c00d 	mov	ip, sp
    8254:	e92dd810 	push	{r4, fp, ip, lr, pc}
    8258:	e3a01000 	mov	r1, #0
    825c:	e24cb004 	sub	fp, ip, #4
    8260:	e1a04000 	mov	r4, r0
    8264:	eb000b66 	bl	b004 <__call_exitprocs>
    8268:	e59f3020 	ldr	r3, [pc, #32]	; 8290 <exit+0x40>
    826c:	e5930000 	ldr	r0, [r3]
    8270:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    8274:	e3530000 	cmp	r3, #0
    8278:	1a000001 	bne	8284 <exit+0x34>
    827c:	e1a00004 	mov	r0, r4
    8280:	eb0001b3 	bl	8954 <_exit>
    8284:	e1a0e00f 	mov	lr, pc
    8288:	e1a0f003 	mov	pc, r3
    828c:	eafffffa 	b	827c <exit+0x2c>
    8290:	00010090 	.word	0x00010090

いろいろ回避策があるが, 以下のようにした

% cat dummy.c
int _exit;
int _sbrk;
int _write;
int _close;
int _lseek;
int _read;
int _fstat;
int _isatty;
% aarch64-elf-gcc -g -o hello.elf hello.c dummy.c

aarch64-elf-gdb

を動かしてみたが

target sim

がエラーになる.

gdb-10.2.aarch64-elf/sim/aarch64/

を見るとビルドされた形跡はある.

target sim コマンドが受け着けられないのは

      if (c->prefixlist && **line && !c->allow_unknown)
	undef_cmd_error (c->prefixname, *line);  ここが原因らしい

cmdlist 構造体をデバッグする函数で確かめると target コマンド自体はある.

c = lookup_cmd_1 (text, *found->prefixlist, result_list,
			default_args, ignore_help_classes);

ここにきたとき *found->prefixlist の期待値は

core
exec
extended-remote
record
record-btrace
record-core
record-full
remote
sim
tfile

のように sim が入っている必要があるが, 現状は

core
exec
extended-remote
record
record-btrace
record-core
record-full
remote
tfile

のようになっている.

(*4) target sim コンマンドを受け着けるための修正

gdb-10.2/gdb/init.c

に以下を追加. init.c は生成されるファイルなので, 例えば configure 実行のタイミングで
この修正が無効になる可能性はある.

 extern initialize_file_ftype _initialize_ser_socket;
 extern initialize_file_ftype _initialize_mi_cmd_env;
+extern initialize_file_ftype _initialize_remote_sim;

  _initialize_ser_socket ();
  _initialize_mi_cmd_env ();
+ _initialize_remote_sim ();

gdb-10.2/gdb/Makefile

を以下のように修正

SIM = ../sim/aarch64/libsim.a

SIM_OBS = remote-sim.o

これでビルドした gdb で target sim コマンドを入力すると

Target byte order unspecified
unable to create simulator instance

のようになる. 残念ながらまだ修正が完全ではない.

とりあえずこの修正で sim_open は呼ばれるようになった.

sim_open でエラーになるのは sim_config が呼ばれたとき
そこでエラーになっているから.

sim/common/sim-config.c

で以下のように修正した:

  /* verify the target byte order */
#if 0 
  if (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_UNKNOWN)
    {
      sim_io_eprintf (sd, "Target byte order unspecified\n");
      return SIM_RC_FAIL;
    }
#endif  

一応これでエラーを回避できている.

(*5) 動作確認 => OK だが gdb(シミュレータ部分) と newlib の修正が必要

これですぐに hello world できるかと言えばそうではなくて,

% aarch64-elf-gdb hello.elf
(gdb) target sim
(gdb) load
(gdb) run
Starting program: /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/hello.elf 
core: 8 byte write to unmapped address 0xfffffff0 at 0x0

Program received signal SIGSEGV, Segmentation fault.
0x0000000000000000 in ?? ()
(gdb)

のようになる. 不正メモリアクセスがターゲットプログラムで発生しているがなぜか
このメッセージになっている.

問題はスタートアップルーチン

/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/newlib-4.1.0.aarch64-elf/libgloss/aarch64/crt0.S

にあって, これは事前にスタックポインタがセットされているかのような状態で

_mainCRTStartup
(別名 _start)

がきている. つまり組込み用のスタートアップルーチンではないということ. Windows 用のもの.
例のアドレス

0xfffffff0

にアクセスしているのは 


0000000000400138 <_mainCRTStartup>:
  400138:	58000281 	ldr	x1, 400188 <_cpu_init_hook+0x4>
  40013c:	927cec20 	and	x0, x1, #0xfffffffffffffff0
  400140:	9100001f 	mov	sp, x0
  400144:	d280001d 	mov	x29, #0x0                   	// #0
  400148:	a9bf77fd 	stp	x29, x29, [sp, #-16]!

この stp 命令が問題で sp が 0 だとこのような結果になってしまう.
gdb + aarch64 シミュレータの問題は解決したが, これはまた別の問題. 

だからスタートアップルーチンを修正する必要がある.
一方でブレークポイントが期待したように動作していないことに気付いた.

=>「AARCH64 シミュレータのブレークポイント」

この修正を入れた後

=>「AARCH64 スタートアップルーチン」

とする必要がある.
