ETRAX CRIS の ABI

(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*1) 函数呼び出し

	jsr func

	疑似コード

	srp = (jsr 命令の次のアドレス)
	pc = func

	srp は p11 の別名

(*2) 函数復帰

	ret

	疑似コード

	pc = srp


(*3) プロローグ

	subq 4,$sp
	move $srp,[$sp]
	subq 4,$sp
	move.d $r8,[$sp]
	move.d $sp,$r8
	subu.b 128,$sp

	上は 128 バイトのローカルエリアを使用する函数のプロローグである.
	sp は r14 の別名


	+------------------+ <- sp_{new}
	|                  |
	|                  |
	|    local area    |
	|                  |
	|                  |
	+------------------+ +128 <- r8_{new}
	|      r8_{old}    |
	+------------------+ +132
	|     srp_{old}    |
	+------------------+ <- sp_{old}

(*4) エピローグ

	move.d $r8,$sp
	move.d [$sp+],$r8
	jump [$sp+]

	上は使用するローカルエリアのバイト数に依存しない函数のエピローグである.
	r8, srp, sp が復元され呼び出し元に復帰する.

(*5) 通常の函数の引数と戻り値

	第 1 引数 : r10
	第 2 引数 : r11
	第 3 引数 : r12
	第 4 引数 : r13
	第 5 引数以降 : スタックを使用する

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10, 11, 12, 13, 14, 15, 16, 17);

	に対して f の先頭アドレスでは

	r10 = 10, r11 = 11, r12 = 12, r13 = 13
	
	+------------------+ <- sp
	|        14        |
	+------------------+ +4
	|        15        |
	+------------------+ +8 
	|        16        |
	+------------------+ +12
	|        17        |
	+------------------+ +16

	函数の戻り値は r10 にセットされる.
	

(*6) long long を引数にとる函数, 返す函数

        sizeof(long long) = 8

	long long の引数に対して 2 つのレジスタが使用され, 残りはスタックが使用される.
	例えば

	long long f(int a0, long long a1, long long a2);

	f(10, 0x123456789abcdef0LL, 0x1122334455667788LL);

	に対して f の先頭アドレスでは

	r10 = 10, r11 = 0x9abcdef0, r12 = 0x12345678, r13 = 0x55667788
	
	+------------------+ <- sp
	|    0x11223344    |
	+------------------+ +4

	のようになっている.
	函数の戻り値は r10, r11 にセットされる.
	
	
(*7) 浮動少数点数を引数にとる函数, 返す函数

        sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	ETRAX CRIS には FPU がないのでソフトウェアで浮動少数点数演算が行なわれる.
	float に対しては (*5) の規則が, double, long double に対しては (*6)
	の規則が適用される.

(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数に取る函数を呼び出すときレジスタは使用せず, スタックが使用される.
	構造体を返す函数を呼び出すとき戻り値を格納するアドレスが r10 にセットされる.
