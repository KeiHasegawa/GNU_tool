ARM のクロスコンパイル環境

(*1) ARM
(*2) スクリプトによるインストール
(*3) gcc-3.4.4
(*4) gdb
(*5) newlib-1.13.0
(*6) 動作確認 => OK

(*1) ARM
https://ja.wikipedia.org/wiki/ARM%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3

(*2) スクリプトによるインストール
「IQ2000」と同じスクリプトを使用する:

set TARGET = arm-elf   # ここを変更

すると gcc-10.2 の make で以下のエラーになる:

./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=arm-elf --disable-libstdc++-v3 --disable-libssp --disable-libquadmath --disable-libgfortran --disable-libobjc
...
make
...
checking for struct tms... yes
checking for clock_t... yes
checking for F_SETLKW... yes
checking if mkdir takes one argument... no
*** Configuration arm-unknown-elf not supported
make[1]: *** [Makefile:4314: configure-gcc] エラー 1
make[1]: ディレクトリ '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf' から出ます
make: *** [Makefile:938: all] エラー 2

これは一見, configure でエラーしたように見える. もう少し厳密に言えば

make から実行された configure コマンドがエラーした

ということになる. 最後の make のメッセージは

/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf

で

configure-gcc

というターゲットに対応するコマンドを実行した結果エラーしたと読むのが正しい.
これは「MIPS」とは違うエラーになっている.
このエラーは結局回避できなかった. 急いでいる方は (*3) に進んで下さい.

いずれにしても configure でエラーしているので

% ls -ltr `find . -name 'config.log'`

のようにすることで最後に実行した configure のログが判明した:

./host-i686-pc-linux-gnu/gcc/config.log

最後の行を見てみると

configure: exit 1

とある. エラーしている. さてこの config.log から

*** Configuration arm-unknown-elf not supported

という文字を探してみたが見つからない. さてどこでエラーしたと考えるべきか.

このメッセージの直前にある

checking if mkdir takes one argument... no

が原因かと思い, このメッセージを config.log から探してみた. すると

configure:11925: checking if mkdir takes one argument
configure:11951: g++ -c -g    conftest.cpp >&5
configure:11951: $? = 0
configure:11958: result: no

のようになっている. $? = 0 なので正常終了なのだが, だとすれば何故エラーなのだろう.

config.log の先頭には

  $ /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/configure --srcdir=../.././gcc --cache-file=./config.cache --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --disable-libstdc++-v3 --disable-libssp --disable-libquadmath --disable-libgfortran --disable-libobjc --enable-languages=c,c++,fortran,lto,objc --program-transform-name=s&^&arm-elf-& --disable-option-checking --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu --target=arm-elf

のようにあるのでこのように実行されたのだろうと思う.
実際にやってみた:

% cd ./host-i686-pc-linux-gnu/gcc
% /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/configure --srcdir=../.././gcc --cache-file=./config.cache --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --disable-libstdc++-v3 --disable-libssp --disable-libquadmath --disable-libgfortran --disable-libobjc --enable-languages=c,c++,fortran,lto,objc --program-transform-name='s&^&arm-elf-&' --disable-option-checking --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu --target=arm-elf


ここで

's&^&arm-elf-&'

の部分はシングルクォーテーションで囲う必要がある.

...
checking if mkdir takes one argument... no
*** Configuration arm-unknown-elf not supported
%

エラーは再現できているようである.

% sh -vx /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/configure --srcdir=../.././gcc --cache-file=./config.cache --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --disable-libstdc++-v3 --disable-libssp --disable-libquadmath --disable-libgfortran --disable-libobjc --enable-languages=c,c++,fortran,lto,objc --program-transform-name='s&^&arm-elf-&' --disable-option-checking --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu --target=arm-elf


のように実行してみた. そうするとログの中から以下を発見した

# Unsupported targets list.  Do not put an entry in this list unless
# it would otherwise be caught by a more permissive pattern.  The list
# should be in alphabetical order.
case ${target} in
 # Avoid special cases that are not obsolete
   arm*-*-*eabi*			\
 )
	;;
   arm*-wince-pe*			\
 | arm*-*-ecos-elf			\
 | arm*-*-elf				\
 | arm*-*-linux*			\
 | arm*-*-uclinux*			\
 | i[34567]86-go32-*			\
 | i[34567]86-*-go32*			\
 | m68k-*-uclinuxoldabi*		\
 | mips64orion*-*-rtems*		\
 | pdp11-*-bsd				\
 | powerpc*-*-linux*paired*		\
 | powerpc*-*-*spe*			\
 | sparc-hal-solaris2*			\
 | spu*-*-*				\
 | thumb-*-*				\
 | *-*-freebsd[12] | *-*-freebsd[1234].* \
 | *-*-freebsd*aout*			\
 | *-*-linux*aout*			\
 | *-*-linux*coff*			\
 | *-*-linux*libc1*			\
 | *-*-linux*oldld*			\
 | *-*-rtemsaout*			\
 | *-*-rtemscoff*			\
 | *-*-solaris2				\
 | *-*-solaris2.[0-9]			\
 | *-*-solaris2.[0-9].*			\
 | *-*-solaris2.10*			\
 | *-*-sysv*				\
 | vax-*-vms*				\
 )
	echo "*** Configuration ${target} not supported" 1>&2
	exit 1
	;;
esac
++ case ${target} in
++ echo '*** Configuration arm-unknown-elf not supported'
*** Configuration arm-unknown-elf not supported

なるほどここらしい.

/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/configure

の中から上の該当箇所は見つからず. 一体どういうカラクリなのだろう.
上のファイルから別のシェルスクリプトが実行されればこのようなログになる
可能性はある. それであれば

case ${target} in

という文字列をファイルから探したほうが良いと思ったので

% find /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf -type f -exec grep --color -nH --null -e 'case.*target.*in' \{\} +

のように実行してみた. 思いの他合致している.
検索する文字を変更して以下のようにしてみた:

find /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf -type f -exec grep --color -nH --null -e 'Avoid special cases that are not obsolete' \{\} +
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/config.gcc:267: # Avoid special cases that are not obsolete

ヒットしている.

 | arm*-*-elf				\

の行を config.gcc から削除した.

% sh -vx /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/configure --srcdir=../.././gcc --cache-file=./config.cache --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --disable-libstdc++-v3 --disable-libssp --disable-libquadmath --disable-libgfortran --disable-libobjc --enable-languages=c,c++,fortran,lto,objc --program-transform-name='s&^&arm-elf-&' --disable-option-checking --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu --target=arm-elf

もう一度実行してみたところ, まだエラーしているようである.
しかもこのときはログが多すぎて何を見ていいのかサッパリである.

% /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/configure --srcdir=../.././gcc --cache-file=./config.cache --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --disable-libstdc++-v3 --disable-libssp --disable-libquadmath --disable-libgfortran --disable-libobjc --enable-languages=c,c++,fortran,lto,objc --program-transform-name='s&^&arm-elf-&' --disable-option-checking --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu --target=arm-elf

のように実行してみたところ

checking if mkdir takes one argument... no
*** Configuration arm-unknown-elf not supported

これは, エラーを回避できていなかったらしい.
ログの中から以下を見つけた:

*)
	echo "*** Configuration ${target} not supported" 1>&2
	exit 1
	;;
esac
++ case ${target} in
++ echo '*** Configuration arm-unknown-elf not supported'

これはどれにも該当する case ラベルがなかったということなのだろう.
おそらく先ほど config.gcc で削除した

 | arm*-*-elf				\

でもエラーを回避し切れなかったようである.

/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/configure

では

# Collect target-machine-specific information.
. ${srcdir}/config.gcc || exit 1

のように config.gcc を読み込んでいるらしい. そこでこれをコメントアウト
してみた.

% /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/gcc/configure --srcdir=../.././gcc --cache-file=./config.cache --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --disable-libstdc++-v3 --disable-libssp --disable-libquadmath --disable-libgfortran --disable-libobjc --enable-languages=c,c++,fortran,lto,objc --program-transform-name='s&^&arm-elf-&' --disable-option-checking --build=i686-pc-linux-gnu --host=i686-pc-linux-gnu --target=arm-elf

改めて上を実行してみたところエラーは発生していない. この対処が正しいか
どうかは別にしてこれでやってみることにする.

% cd ../..
% make
...

TARGET_CPU_DEFAULT="" \
HEADERS="tm-preds.h" DEFINES="" \
/bin/sh ../.././gcc/mkconfig.sh tm_p.h
make[2]: *** 's-mddeps' に必要なターゲット '../.././gcc/config//.md' を make するルールがありません.  中止.
make[2]: ディレクトリ '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/host-i686-pc-linux-gnu/gcc' から出ます
make[1]: *** [Makefile:4372: all-gcc] エラー 2
make[1]: ディレクトリ '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf' から出ます
make: *** [Makefile:938: all] エラー 2
%

さてこのエラーだが


../.././gcc/config//.md

ではなくて

../.././gcc/config/arm/arm.md

を参照すれば良いはずなのだが...

同じことを

gcc-5.3.0

でやってみたがやはり同じエラーが出た.

gcc-3.4.4

でもやってみたが, ここでは違うエラーになっている.
しかし問題の箇所の configure の実行は以下のようになっていた:

checking if mkdir takes one argument... no
Using `./config/arm/arm.c' for machine-specific logic.
Using `./config/arm/arm.md' as machine description file.
Using the following target machine macro files:
	./config/dbxelf.h
	./config/elfos.h
	./config/arm/unknown-elf.h
	./config/arm/elf.h
	./config/arm/aout.h
	./config/arm/arm.h
Using host-default.o for host machine hooks.

そこで再び gcc-10.2.0.arm-elf/gcc/configure
を以下のように修正した:

#. ${srcdir}/config.gcc || exit 1
. ../../gcc-3.4.4.arm-elf/gcc/config.gcc || exit 1

もう一度トップディレクトリで configure からやり直しした

% cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf
% find . -name config.cache -exec rm -f {} \;
% ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=arm-elf \
 --disable-libstdc++-v3 --disable-libssp --disable-libquadmath \
 --disable-libgfortran --disable-libobjc
% make
...

g++ -c   -g -O2 -DIN_GCC  -DCROSS_DIRECTORY_STRUCTURE   -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-error=format-diag -Wmissing-format-attribute -Woverloaded-virtual -pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings   -DHAVE_CONFIG_H  -DGENERATOR_FILE -fno-PIE -I. -Ibuild -I../.././gcc -I../.././gcc/build -I../.././gcc/../include  -I../.././gcc/../libcpp/include  \
	-o build/genpreds.o ../.././gcc/genpreds.c
In file included from ../.././gcc/config/arm/arm.h:53,
                 from ./tm.h:12,
                 from ../.././gcc/genpreds.c:26:
../.././gcc/config/arm/arm-opts.h:29:10: 致命的エラー: arm-isa.h: そのようなファイルやディレクトリはありません
   29 | #include "arm-isa.h"
      |          ^~~~~~~~~~~
コンパイルを停止しました。
make[2]: *** [Makefile:2722: build/genpreds.o] エラー 1
make[2]: ディレクトリ '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/host-i686-pc-linux-gnu/gcc' から出ます
make[1]: *** [Makefile:4372: all-gcc] エラー 2
make[1]: ディレクトリ '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf' から出ます
make: *** [Makefile:938: all] エラー 2

エラーにはなったが問題の箇所は回避できている.

> ls -l gcc/config/arm
lrwxrwxrwx 1 khasegawa khasegawa 90  6月 17 05:59 gcc/config/arm -> /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-3.4.4.arm-elf/gcc/config/arm/
> find . -name confi.cache -exec rm -f {} \;
> ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=arm-elf \
 --disable-libstdc++-v3 --disable-libssp --disable-libquadmath \
 --disable-libgfortran --disable-libobjc
> make
...
make[2]: ディレクトリ '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/host-i686-pc-linux-gnu/gcc' に入ります
Makefile:2326: 警告: ターゲット '.c.o' のためのレシピを置き換えます
Makefile:1116: 警告: ターゲット '.c.o' のための古いレシピは無視されます
Makefile:2326: warning: ignoring prerequisites on suffix rule definition
g++ -c   -g -O2 -DIN_GCC  -DCROSS_DIRECTORY_STRUCTURE   -fno-exceptions -fno-rtti -fasynchronous-unwind-tables     -DHAVE_CONFIG_H  -DGENERATOR_FILE -fno-PIE -I. -Ibuild -I../.././gcc -I../.././gcc/build -I../.././gcc/../include  -I../.././gcc/../libcpp/include  \
	-o build/genpreds.o ../.././gcc/genpreds.c
In file included from ./tm.h:9,
                 from ../.././gcc/genpreds.c:26:
../.././gcc/config/arm/unknown-elf.h:27:9: エラー: 汚染された 'TARGET_VERSION' 使おうとしています
   27 | #ifndef TARGET_VERSION
      |         ^
In file included from ./tm.h:10,
                 from ../.././gcc/genpreds.c:26:
../.././gcc/config/arm/elf.h:104:9: エラー: 汚染された 'TARGET_VERSION' 使おうとしています
  104 | #ifndef TARGET_VERSION
      |         ^
../.././gcc/config/arm/elf.h:135: 警告: "MAX_OFILE_ALIGNMENT" が再定義されました
  135 | #define MAX_OFILE_ALIGNMENT (32768 * 8)
 ...

さて, このエラーは全く経験したことのないエラーかもしれない.

> cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-10.2.0.arm-elf/host-i686-pc-linux-gnu/gcc
> g++ -c   -g   -DIN_GCC  -DCROSS_DIRECTORY_STRUCTURE   -fno-exceptions -fno-rtti -fasynchronous-unwind-tables     -DHAVE_CONFIG_H  -DGENERATOR_FILE -fno-PIE -I. -Ibuild -I../.././gcc -I../.././gcc/build -I../.././gcc/../include  -I../.././gcc/../libcpp/include  	-o build/genpreds.o ../.././gcc/genpreds.c

エラーは再現できている.

> g++ -E   -g   -DIN_GCC  -DCROSS_DIRECTORY_STRUCTURE   -fno-exceptions -fno-rtti -fasynchronous-unwind-tables     -DHAVE_CONFIG_H  -DGENERATOR_FILE -fno-PIE -I. -Ibuild -I../.././gcc -I../.././gcc/build -I../.././gcc/../include  -I../.././gcc/../libcpp/include  	-o build/genpreds.i ../.././gcc/genpreds.c

エラーしている. プリプロセスの段階でエラーしているというわけだ.

> chmod +x x
> cat x
#! /bin/csh -f

setenv LANG C
g++ -E   -g   -DIN_GCC  -DCROSS_DIRECTORY_STRUCTURE   -fno-exceptions -fno-rtti -fasynchronous-unwind-tables     -DHAVE_CONFIG_H  -DGENERATOR_FILE -fno-PIE -I. -Ibuild -I../.././gcc -I../.././gcc/build -I../.././gcc/../include  -I../.././gcc/../libcpp/include  	../.././gcc/genpreds.c
> ./x
In file included from ./tm.h:9,
                 from ../.././gcc/genpreds.c:26:
../.././gcc/config/arm/unknown-elf.h:27:9: error: attempt to use poisoned "TARGET_VERSION"
   27 | #ifndef TARGET_VERSION


poisoned とは一体?

Stack overflow にもあるが

#pragma GCC poison HOGE

#ifndef HOGE
#endif


のようにすればこのエラーが再現する.
さて, 直接の原因は判明したが, もともと gcc-3.4.4 のビルドではここは回避できていたはず.

> cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gcc-3.4.4.arm-elf/
> find . -name 'genpreds.*'
./gcc/genpreds.c
./gcc/genpreds.j
./gcc/genpreds.o
> rm ./gcc/genpreds.o
> make
...
gcc -c   -g -O2 -DIN_GCC -DCROSS_COMPILE  -W -Wall -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -pedantic -Wno-long-long    -DHAVE_CONFIG_H -DGENERATOR_FILE    -I. -I. -I. -I./. -I./../include  genpreds.c -o genpreds.o
...
ここではエラーしていない.
おそらく include のしかたが違っている.

さてこのエラーを回避する簡単な方法は何か.


ひとまず一番簡単そうなのは gcc-3.4.4 でビルドすることのように思える.

(*3) gcc-3.4.4

「MIPS」で述べた方法と同じようにすれば arm-elf-gcc をインストールすることができる.
実は順番は ARM の方が先で何をどう対処したか記録するのが難しかったので
こういうことになっている.

(*4) gdb

    スクリプトと同じ方法でインストールできる.

(*5) newlib-1.13.0

newlib は newlib-4.1.0 だとエラーになったので, newlib-1.13.0 を使用した.
ここも実は「MIPS」と同じだが最初に対処したのは実は ARM

(*6) 動作確認

% arm-elf-gcc -o hello.elf -g hello.c
% arm-elf-gdb hello.elf
Reading symbols from hello.elf...
(gdb) target sim
Connected to the simulator.
(gdb) load
Loading section .init, size 0x1c lma 0x8000
Loading section .text, size 0x804c lma 0x801c
Loading section .fini, size 0x18 lma 0x10068
Loading section .rodata, size 0x224 lma 0x10080
Loading section .eh_frame, size 0x4 lma 0x202a4
Loading section .ctors, size 0x8 lma 0x202a8
Loading section .dtors, size 0x8 lma 0x202b0
Loading section .jcr, size 0x4 lma 0x202b8
Loading section .data, size 0x940 lma 0x202bc
Start address 0x8110
Transfer rate: 286688 bits in <1 sec.
(gdb) b main
Breakpoint 1 at 0x8224: file hello.c, line 5.
(gdb) run
Breakpoint 1, main () at hello.c:5
5	  printf("hello world\n");
(gdb) disassemble
Dump of assembler code for function main:
   0x00008218 <+0>:	mov	r12, sp
   0x0000821c <+4>:	push	{r11, r12, lr, pc}
   0x00008220 <+8>:	sub	r11, r12, #4
=> 0x00008224 <+12>:	ldr	r0, [pc, #12]	; 0x8238 <main+32>
   0x00008228 <+16>:	bl	0x8330 <printf>
   0x0000822c <+20>:	mov	r3, #0
   0x00008230 <+24>:	mov	r0, r3
   0x00008234 <+28>:	ldm	sp, {r11, sp, pc}
   0x00008238 <+32>:	andeq	r0, r1, r0, lsl #1
End of assembler dump.
(gdb) c
hello world
[Inferior 1 (process 42000) exited normally]

