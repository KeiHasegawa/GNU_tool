FR-V の ABI

(*0) グローバルポインタ
(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*0) グローバルポインタ

        スタックではないメモリに配置された変数をアクセスするとき gr16
	レジスタ相対でアクセスするようなコードをコンパイラが生成する. 

(*1) 函数呼び出し

	call func

	疑似コード
	
	lr = (call 命令の次のアドレス)
	pc = func
	
(*2) 函数復帰

	ret

	疑似コード

	pc = lr

	しかしコンパイラは大抵 lr レジスタを gr5 に移して

	jmpl @(gr5,gr0)

	のようなコードを生成する (*4) も参照. gr0 は常に 0 が読み出されるレジスタ.
	
(*3) プロローグ

	addi sp,#-144,sp
	sti fp, @(sp,128)
	addi sp,#128,fp
	movsg lr, gr5
	sti gr5, @(fp,8)

	上は 128 バイトのローカルエリアを使用する函数のプロローグ.


	+----------+ <- sp_{new}
	|          |
	|          |	
	|  local   |
	|   area   |
	|          |
	|          |
	+----------+ <- fp_{new}
	| fp_{old} |
	+----------+
	|          |
	+----------+
	| lr_{old} | 戻りアドレス
	+----------+
	|          |
	+----------+ <- sp_{old}

	sp は gr1 の別名.


(*4) エピローグ

	ldi @(fp,8), gr5
	ld @(fp,gr0), fp
	addi sp,#144,sp
	jmpl @(gr5,gr0)

	上は 128 バイトのローカルエリアを使用する函数のエピローグ.
	fp, sp が復元され呼び出し元へ復帰する.

(*5) 通常の函数の引数と戻り値

	第 1 引数 : gr8
	第 2 引数 : gr9
	第 3 引数 : gr10
	第 4 引数 : gr11
	第 5 引数 : gr12
	第 6 引数 : gr13
	第 7 引数 : スタックに積む

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10, 11, 12, 13, 14, 15, 16, 17);

	に対して f の先頭では

	gr8 = 10, gr9 = 11, gr10 = 12, gr11 = 13, gr12 = 14, gr13 = 15
	
	+----------+ <- sp
	|    16    |
	+----------+
	|    17    |
	+----------+

	のようになっている.
	
	函数の戻り値は gr8 にセットされる.

(*6) long long を引数にとる函数, 返す函数

	sizeof(long long) = 8

	long long の引数に対してレジスタを 2 個使用して函数にわたす. 残りは
	スタックに積まれる. 例えば
	
	long long f(int a0, long long a1, long long a2, long long a3);

	f(10, 0x123456789abcdef0LL, 0x1122334455667788, 0x99aabbccddeeff00LL);

	に対して f の先頭アドレスでは
	
	gr8  = 10
	gr9  = 0x12345678, gr10 = 0x9abcdef0
	gr11 = 0x11223344, gr12 = 0x55667788
        gr13 = 0x99aabbcc

	+----------+ <- sp
	|0xddeeff00|
	+----------+

	のようになっている.
	函数の戻り値は gr8, gr9 にセットされる.
	
(*7) 浮動少数点数を引数にとる函数, 返す函数

	sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	FR-V に FPU はあるが fr0, fr1 などのレジスタは使用されず,
	float に対しては (*5) と同じ規則で引数がわたされる. 例えば
	
	float f(float a0, float a1, float a2, float a3,
	       float a4, float a5, float a6, float a7);

	f(10.0F, 11.0F, 12.0F, 13.0F, 14.0F, 15.0F, 16.0F, 17.0F);

	に対して f の先頭アドレスでは

	gr8  = 0x41200000
	gr9  = 0x41300000
	gr10 = 0x41400000
	gr11 = 0x41500000
	gr12 = 0x41600000
	gr13 = 0x41700000

	+----------+ <- sp
	|0x41800000|
	+----------+
	|0x41880000|
	+----------+

	のようになっている.

	double, long double に対する浮動少数点数演算はソフトウェアで行なう.
	やはり (*6) と同じ規則が適用される.

(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数とする函数を呼び出すとき, レジスタは使用されずにスタックにコピー
	される.
	構造体を返す函数を呼び出すとき gr3 に函数の戻り値を格納するアドレスをセット
	して呼び出す.
	