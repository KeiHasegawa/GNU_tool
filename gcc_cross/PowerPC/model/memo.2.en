Now, at this point hello world 11 program worked well with ppc-elf-run.
And here, no rtx_insn* insn was generated like below:

  RTX_FRAME_RELATED_P(insn) = true;

I tried to execute hello wordl 11 program compiled with -g option with
ppc-elf-gdb. 
it could skip `main' prologue suitably. But it could not skip `f' prologue
when stepping into `f'.

So then, for every rtx_insn* insn generatd at `expand_prologue',
I did like below:

  RTX_FRAME_RELATED_P(insn) = true;

But this phenomenon was not fixed. Onece I canceled above fix.

If ppc-elf-gdb skip `f' prologue, it could display `a' and `b' suitably.
Then, `where' command resulted like below:

(ppc-elf-gdb) where
#0  f (a=5, b=6) at a.c:5
#1  0x20000000 in ?? ()
#2  0x00000230 in main () at a.c:10
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(ppc-elf-gdb) 

.debug_frame section generated by my `cc1' became like below:

Contents of the .debug_frame section (loaded from test.elf):

00000000 00000010 ffffffff CIE
  Version:               3
  Augmentation:          ""
  Code alignment factor: 1
  Data alignment factor: -4
  Return address column: 66

  DW_CFA_def_cfa: r1 ofs 0
  DW_CFA_register: r66 in r64
  DW_CFA_nop

00000014 0000000c 00000000 FDE cie=00000000 pc=000001c8..00000210

00000024 0000000c 00000000 FDE cie=00000000 pc=00000210..00000268

Here, original `cc1' doesn't generate .debug_frame section.

My `cc1' code:
f:
.LFB3:
.LM1:
	stwu	1, -24(1)
	mflr	0
	stw	0, 28(1)
	stw	31, 20(1)
	mr	31, 1
	stw	3, 8(31)
	stw	4, 12(31)
.LM2:

Original `cc1' code:
f:
.LFB3:
	.file 1 "a.c"
	.loc 1 4 1
	.cfi_startproc
	stwu 1,-32(1)
	.cfi_def_cfa_offset 32
	stw 31,28(1)
	.cfi_offset 31, -4
	mr 31,1
	.cfi_def_cfa_register 31
	stw 3,8(31)
	stw 4,12(31)

.cfi_xxx pseudo instructions are generated by original `cc1'.

static void
def_cfa_1 (dw_cfa_location *new_cfa)
{
  dw_cfi_ref cfi;

  if (cur_trace->cfa_store.reg == new_cfa->reg && new_cfa->indirect == 0)
    cur_trace->cfa_store.offset = new_cfa->offset;

  cfi = def_cfa_0 (&cur_row->cfa, new_cfa);
  if (cfi)
    {
      cur_row->cfa = *new_cfa;
      cur_row->cfa_cfi = (cfi->dw_cfi_opc == DW_CFA_def_cfa_expression
			  ? cfi : NULL);

      add_cfi (cfi);  // Here
    }
}

About my `cc1', above code was executed.

static void
add_cfi (dw_cfi_ref cfi)
{
  any_cfis_emitted = true;

  if (add_cfi_insn != NULL)
    {
      add_cfi_insn = emit_note_after (NOTE_INSN_CFI, add_cfi_insn);
      NOTE_CFI (add_cfi_insn) = cfi;  // But not executed
    }



  RTX_FRAME_RELATED_P (insn) = 1;
  add_reg_note (insn, REG_FRAME_RELATED_EXPR,
		gen_rtx_SET (stack_pointer_rtx,
			     gen_rtx_PLUS (Pmode,
					   stack_pointer_rtx,
					   GEN_INT (-size_int))));

And here, I noticed that 2nd rtx_insn generated by gen_stwu() at my `cc1'
was not added below property:

  RTX_FRAME_RELATED_P(insn) = true;

Then fixed like below:

#if 1
  auto insn = emit_insn(gen_stwu(gen_rtx_CONST_INT(Pmode, size+12)));
  RTX_FRAME_RELATED_P(insn) = true;
  auto ins1 = XVECEXP(PATTERN(insn), 0, 1);      // This one 
  RTX_FRAME_RELATED_P(ins1) = true;              // This one
#else
  emit_insn(gen_stwu(gen_rtx_CONST_INT(Pmode, size+12)));
#endif

And for every rtx_insn* insn generated at expand_prologue, add property like
below:

  RTX_FRAME_RELATED_P(insn) = true;

But the phenomenon still occured. Once again, I canceled above fix.


