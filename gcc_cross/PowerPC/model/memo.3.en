I thought below was not correct:

00000014 00000028 00000000 FDE cie=00000000 pc=000001c8..00000210
  DW_CFA_advance_loc4: 4 to 000001cc
  DW_CFA_offset: r1 at cfa+0
  DW_CFA_def_cfa_offset: 24

At this point, `stwu' was implemented like below:

; sp := sp - (size+12)
; [sp] := sp
(define_insn "stwu"
  [
   (set (reg:SI STACK_POINTER_REGNUM)
	(minus:SI (reg:SI STACK_POINTER_REGNUM)
	  	  (match_operand:SI 0 "immediate_operand" "")))
   (set (mem:SI (reg:SI STACK_POINTER_REGNUM))
        (reg:SI STACK_POINTER_REGNUM))
  ] 
  ""
  "stwu	1, -%0(1)")

Then I changed like below:

; {[sp - delta] := sp ; sp := sp - delta}
(define_insn "stwu"
  [
   (set (mem:SI (plus:SI (reg:SI STACK_POINTER_REGNUM))
                         (match_operand:SI 0 "immediate_operand" ""))
        (reg:SI STACK_POINTER_REGNUM))

   (set (reg:SI STACK_POINTER_REGNUM)
	(minus:SI (reg:SI STACK_POINTER_REGNUM)
	  	  (match_dup 0)))
  ] 
  ""
  "stwu	1, -%0(1)")

But ppc-elf-gdb did not change its motion. It could not still skip prologue
suitably.


Original `cc1':
   (LR_REGNO			96)

I tried to do the same manner above.

2022.02.15 7:10

`where' command result was changed but still not correct.

Breakpoint 1, main () at a.c:10
10	  printf("hello world %d\n", f(5, 6));
f (a=-858993460, b=0) at a.c:4
4	{
#0  f (a=-858993460, b=0) at a.c:4
#1  0x00000000 in ?? ()
Warning:
Cannot insert breakpoint 0.
Cannot access memory at address 0x0

gdbcom:10: Error in sourced command file:
Command aborted.
(ppc-elf-gdb) q
A debugging session is active.


Once I cancelled the fix of `stwu':

; sp := sp - (size+12)
; [sp] := sp
(define_insn "stwu"
  [
   (set (reg:SI STACK_POINTER_REGNUM)
	(minus:SI (reg:SI STACK_POINTER_REGNUM)
	  	  (match_operand:SI 0 "immediate_operand" "")))
   (set (mem:SI (reg:SI STACK_POINTER_REGNUM))
        (reg:SI STACK_POINTER_REGNUM))
  ] 
  ""
  "stwu	1, -%0(1)")

And I did like below: 

#define FRAME_TRUE
#define USE_FAKE

void ppc_expand_prologue()
{
  // {[sp - delta] := sp ; sp := sp - delta}
  auto size = get_frame_size();
#ifdef FRAME_TRUE
  auto insn = emit_insn(gen_stwu(gen_rtx_CONST_INT(Pmode, size+12)));
  RTX_FRAME_RELATED_P(insn) = true;
#ifdef USE_FAKE
#else
  auto ins1 = XVECEXP(PATTERN(insn), 0, 1);
  RTX_FRAME_RELATED_P(ins1) = true;
#endif  
#else
  emit_insn(gen_stwu(gen_rtx_CONST_INT(Pmode, size+12)));
#endif

It's not easy to read above code but `stwu' instruction
just did

sp := sp - (size+12)

Then `main' .debug_frame

00000040 00000028 00000000 FDE cie=00000000 pc=00000210..00000268
  DW_CFA_advance_loc4: 4 to 00000214
  DW_CFA_offset_extended_sf: r1 at cfa+16  # This would be removed
  DW_CFA_def_cfa_offset: 16
  DW_CFA_advance_loc4: 12 to 00000220
  DW_CFA_offset_extended_sf: r96 at cfa+4
  DW_CFA_offset: r31 at cfa-4
  DW_CFA_advance_loc4: 4 to 00000224
  DW_CFA_def_cfa_register: r31
  DW_CFA_nop

became like below:

0000003c 00000024 00000000 FDE cie=00000000 pc=00000210..00000268
  DW_CFA_advance_loc4: 4 to 00000214
  DW_CFA_def_cfa_offset: 16
  DW_CFA_advance_loc4: 12 to 00000220
  DW_CFA_offset_extended_sf: r96 at cfa+4
  DW_CFA_offset: r31 at cfa-4
  DW_CFA_advance_loc4: 4 to 00000224
  DW_CFA_def_cfa_register: r31

But ppc-elf-gdb still could not work well.

