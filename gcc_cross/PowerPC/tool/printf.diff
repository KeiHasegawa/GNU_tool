*** gdb-10.2.tmp/sim/ppc/idecode.c	2021-11-22 15:16:49.000000000 +0900
--- gdb-10.2.ppc-elf/sim/ppc/idecode.c	2021-11-20 12:17:21.000000000 +0900
***************
*** 6527,6532 ****
--- 6527,6718 ----
    /*63*/ { 0, MASK32(21,31), 0, idecode_table_21_31__63_0_5 },
  };
  
+ #include <assert.h>
+ #include <stdlib.h>
+ 
+ static const char* first_string(cpu* processor, unsigned cia)
+ {
+   gpreg r3 = GPR(3);
+   static char buf[1024];
+   for (int i = 0 ; i != sizeof buf/sizeof buf[0] ; ++i ) {
+     char c = MEM(signed, r3+i, 1);
+     buf[i] = c;
+     if (c == '\0')
+       return &buf[0]; // ok
+   }
+   assert(0 && "not enough buffer");
+   return &buf[0];
+ }
+ 
+ enum arg_class { NONE, WORD, DW, DF, LDF, STR };
+ 
+ static const char* get_part(const char* fmt, enum arg_class* how)
+ {
+   for ( ; *fmt ; ++fmt) {
+     char c = *fmt;
+     if (c == 'd' || c == 'i' || c == 'x' || c == 'u') {
+       if (*how == NONE)
+ 	*how = WORD;
+       return ++fmt;
+     }
+     if (c == 'c') {
+       *how = WORD;
+       return ++fmt;
+     }
+     if (c == 'f') {
+       char prev = *(fmt-1);
+       *how = prev == 'L' ? LDF : DF;
+       return ++fmt;
+     }
+     if (c == 's') {
+       *how = STR;
+       return ++fmt;
+     }
+     if (c == 'l') {
+       if (*how == NONE)
+ 	*how = WORD;
+       else
+ 	*how = DW;
+     }
+   }
+   assert(0 && "unexpected");
+   return fmt;
+ }
+ 
+ static unsigned int arg32(cpu* processor, unsigned cia, int nth)
+ {
+   assert(nth);
+   if (nth < 8)
+     return GPR(nth+3);
+   int sp = GPR(1);
+   int addr = sp + 4*(nth-8) + 8;
+   return MEM(unsigned, addr, 4);
+ }
+ 
+ static unsigned long long arg64(cpu* processor, unsigned cia, int nth)
+ {
+   assert(nth);
+   assert(!(nth & 1));
+   if (nth < 7) {
+     unsigned long long a = GPR(nth+3);
+     unsigned b = GPR(nth+4);
+     return (a << 32) | b;
+   }
+   int sp = GPR(1);
+   int addr = sp + 4*(nth-8) + 8;
+   unsigned long long a = MEM(unsigned, addr, 4);
+   unsigned b = MEM(unsigned, addr+4, 4);
+   return (a << 32) | b;
+ }
+ 
+ static double float64(cpu* processor, unsigned cia, int fargc)
+ {
+   if (fargc < 9) {
+     union {
+       unsigned long long i;
+       double d;
+     } u = { processor->regs.fpr[fargc] };
+     return u.d;
+   }
+   int sp = GPR(1);
+   int addr = sp + 4*(fargc-9) + 8;
+   unsigned long long a = MEM(unsigned, addr, 4);
+   unsigned b = MEM(unsigned, addr+4, 4);
+   union {
+     unsigned long long i;
+     double d;
+   } u = { (a << 32) | b };  
+   return u.d;
+ }
+ 
+ static const char* handle(cpu* processor, unsigned cia,
+ 			  const char* fmt, int* nth, int* fargc, int* ret)
+ {
+   char c = *fmt;
+   if (c != '%') {
+     putchar(c);
+     ++*ret;
+     return fmt+1;
+   }
+   const char* beg = fmt;
+   c = *++fmt;
+   if (c == '%') {
+     putchar(c);
+     ++*ret;
+     return fmt+1;
+   }
+   enum arg_class how = NONE;
+   const char* end = get_part(fmt, &how);
+   char part_fmt[256];
+   int n = end - beg;
+   assert(n + 1 < sizeof part_fmt/sizeof part_fmt[0]);
+   strncpy(&part_fmt[0], beg, n);
+   part_fmt[n] = '\0';
+   if (how == WORD) {
+     int arg = arg32(processor, cia, (*nth)++);
+     *ret += printf(part_fmt, arg);
+     return end;
+   }
+   if (how == DW) {
+     if (*nth & 1)
+       ++*nth;
+     unsigned long long arg = arg64(processor, cia, *nth);
+     *nth += 2;
+     *ret += printf(part_fmt, arg);
+     return end;
+   }
+   if (how == DF || how == LDF) {
+     double d = float64(processor, cia, (*fargc)++);
+     if (how == DF)
+       *ret += printf(part_fmt, d);
+     else
+       *ret += printf(part_fmt, (long double)d);
+     return end;
+   }
+   if (how == STR) {
+     unsigned addr = arg32(processor, cia, (*nth)++);
+     char buf[256];
+     for (int i = 0 ; i != sizeof buf/sizeof buf[0] ; ++i) {
+       char c = MEM(signed, addr+i, 1);
+       buf[i] = c;
+       if (c == '\0') {
+ 	*ret += printf(part_fmt, &buf[0]);  // ok
+ 	return end;
+       }
+     }
+     assert(0 && "not enough buffer");
+     return end;
+   }
+   asm("int3");
+   return end;
+ }
+ 
+ static void do_printf(cpu* processor, unsigned cia)
+ {
+   const char* fmt = first_string(processor, cia);
+   int nargc = 1;
+   int fargc = 1;
+   int ret = 0;
+   while (*fmt)
+     fmt = handle(processor, cia, fmt, &nargc, &fargc, &ret);
+   GPR(3) = ret;
+ }
+ 
+ static void do_puts(cpu* processor, unsigned cia)
+ {
+   const char* arg = first_string(processor, cia);
+   int ret = puts(arg);
+   GPR(3) = ret;
+ }
+ 
+ static void do_putchar(cpu* processor, unsigned cia)
+ {
+   int arg = GPR(3);
+   int ret = putchar(arg);
+   GPR(3) = arg;
+ }
+ 
+ 
  PSIM_INLINE_IDECODE\
  (void)
  idecode_run(psim *system,
***************
*** 6629,6634 ****
--- 6815,6845 ----
          /* cache miss */
          instruction_word instruction =
            vm_instruction_map_read(cpu_instruction_map(processor), processor, cia);
+ 	switch (instruction) {
+ 	case 0x7fffbad0: exit(0);
+ 	case 0x7fffbad1:
+  	  do_printf(processor, cia);
+ 	  cia += 4;
+ 	  instruction =
+ 	    vm_instruction_map_read(cpu_instruction_map(processor),
+ 				    processor, cia);
+ 	  break;
+ 	case 0x7fffbad2:
+  	  do_puts(processor, cia);
+ 	  cia += 4;
+ 	  instruction =
+ 	    vm_instruction_map_read(cpu_instruction_map(processor),
+ 				    processor, cia);
+ 	  break;
+ 	case 0x7fffbad3:
+  	  do_putchar(processor, cia);
+ 	  cia += 4;
+ 	  instruction =
+ 	    vm_instruction_map_read(cpu_instruction_map(processor),
+ 				    processor, cia);
+ 	  break;
+ 	}
+ 	
          if (WITH_MON != 0)
            mon_event(mon_event_icache_miss, processors[current_cpu], cia);
          {
