pru-elf-ld で行番号情報がずれる原因の調査.

% ./x


cat -n a.S || exit 1
     1		.text
     2		.global _start
     3	_start:
     4		nop
     5		ldi32 sp, stack
     6		nop
pru-elf-as -o a.o -g a.S || exit 1
pru-elf-ld a.o --defsym stack=0x1000 || exit 1
pru-elf-objdump -d --dwarf=decodedline a.out || exit 1

a.out:     ファイル形式 elf32-pru

.debug_line セクションの内容:

CU: a.S:
File name                            Line number    Starting address    View    Stmt
a.S                                            4          0x20000000               x
a.S                                            5          0x20000000       1       x
a.S                                            6          0x20000004       2       x
a.S                                            -          0x20000008



セクション .text の逆アセンブル:

20000000 <_start>:
20000000:	12e0e0e0 	nop
20000004:	241000e2 	ldi	sp, 4096
20000008:	12e0e0e0 	nop
>

4 行目も 5 行目も 0x20000000 になっている. 5 行目は 0x20000004 になるのが正しい.

stack の値を大きくして試してみた:

> ./x


cat -n a.S || exit 1
     1		.text
     2		.global _start
     3	_start:
     4		nop
     5		ldi32 sp, stack
     6		nop
pru-elf-as -o a.o -g a.S || exit 1
pru-elf-ld a.o --defsym stack=0x100000 || exit 1
pru-elf-objdump -d --dwarf=decodedline a.out || exit 1

a.out:     ファイル形式 elf32-pru

.debug_line セクションの内容:

CU: a.S:
File name                            Line number    Starting address    View    Stmt
a.S                                            4          0x20000000               x
a.S                                            5          0x20000004       1       x
a.S                                            6          0x2000000c       2       x
a.S                                            -          0x20000010



セクション .text の逆アセンブル:

20000000 <_start>:
20000000:	12e0e0e0 	nop
20000004:	240010c2 	ldi	sp.w2, 16
20000008:	24000082 	ldi	sp.w0, 0
2000000c:	12e0e0e0 	nop
>

これはできている. なるほど ldi32 は指定されたラベルがあるビット幅に収まらない場合に
ldi 2 命令になるというわけだ. 1 命令で済む場合は 1 命令のままということ.

ldi32 ではなくて ldi で試してみた:
> ./x


cat -n a.S || exit 1
     1		.text
     2		.global _start
     3	_start:
     4		nop
     5		ldi sp, stack
     6		nop
pru-elf-as -o a.o -g a.S || exit 1
pru-elf-ld a.o --defsym stack=0x100000 || exit 1
a.o: in function `_start':
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.pru-elf/ld/a.S:5:(.text+0x4): relocation truncated to fit: R_PRU_U16 against `stack'
>

期待通りエラーしている.

というわけで問題は ldi32 疑似命令で 2 命令になる場合は問題が発生しないが 1 命令になる場合は
行番号がずれるということ.

これはリンカのバグということで問題なさそう.

M-x gdb
gdb --annotate=3 ./ld-new
(gdb) run a.o --defsym stack=0x1000
Starting program: /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.pru-elf/ld/ld-new a.o --defsym stack=0x1000
[Inferior 1 (process 1078) exited normally]
(gdb)

> ./y


pru-elf-objdump -d --dwarf=decodedline a.out || exit 1

a.out:     ファイル形式 elf32-pru

.debug_line セクションの内容:

CU: a.S:
File name                            Line number    Starting address    View    Stmt
a.S                                            4          0x20000000               x
a.S                                            5          0x20000000       1       x
a.S                                            6          0x20000004       2       x
a.S                                            -          0x20000008



セクション .text の逆アセンブル:

20000000 <_start>:
20000000:	12e0e0e0 	nop
20000004:	241000e2 	ldi	sp, 4096
20000008:	12e0e0e0 	nop
> 

gdb から ld-new を実行しても再現する.

さてこのバグはどうやったら特定できるか.
.debug_line セクションを読み込んでそこを書き代えているはずだから,
bfd_get_section_contents が呼び出されていると予測するのは別に間違いじゃないと思える.

まずはしかし -g3 -O0 でビルドし直すべき.

(gdb) b bfd_get_section_contents
(gdb) run

いくつかヒットしたが .debug_line セクションを読み出していたのは以下:

elf32_pru_adjust_diff_reloc_value (count=4, shrinked_insn_address=536870916, symval=536870912, irel=0x819f6dc, isec=0x819a55c, abfd=0x8198068) at elf32-pru.c:1006

(gdb) delete
(gdb) b elf32-pru.c:1006
(gdb) run

Breakpoint 3, elf32_pru_adjust_diff_reloc_value (count=4, shrinked_insn_address=536870916, symval=536870912, irel=0x819f6dc, isec=0x819a55c, abfd=0x8198068) at elf32-pru.c:1006
(gdb) p isec->name
$5 = 0x8198e1e ".debug_line"
(gdb) n
(gdb) p isec_contents
$6 = (unsigned char *) 0x81b07b0 ":"
(gdb) p isec->size
$7 = 62
(gdb) x/62bx 0x81b07b0
0x81b07b0:	0x3a	0x00	0x00	0x00	0x03	0x00	0x1a	0x00
0x81b07b8:	0x00	0x00	0x01	0x01	0xfb	0x0e	0x0d	0x00
0x81b07c0:	0x01	0x01	0x01	0x01	0x00	0x00	0x00	0x01
0x81b07c8:	0x00	0x00	0x01	0x00	0x61	0x2e	0x53	0x00
0x81b07d0:	0x00	0x00	0x00	0x00	0x00	0x05	0x02	0x00
0x81b07d8:	0x00	0x00	0x00	0x15	0x03	0x01	0x09	0x04
0x81b07e0:	0x00	0x01	0x03	0x01	0x09	0x08	0x00	0x01
0x81b07e8:	0x09	0x04	0x00	0x00	0x01	0x01
(gdb)

さてこれは前にも ft32-elf-{as,ld} の調査で見たことのあるデータ.

0x81b07e0+5

がすでに 8 になっている. しかしこれ自体は問題ではない.
ところで期待値を作り出すために以下を試してみた.

> ./x


cat -n a.S || exit 1
     1		.text
     2		.global _start
     3	_start:
     4		nop
     5		ldi sp, stack
     6		nop
pru-elf-as -o a.o -g a.S || exit 1
pru-elf-ld a.o --defsym stack=0x1000 || exit 1
pru-elf-objdump -d --dwarf=decodedline a.out || exit 1

a.out:     ファイル形式 elf32-pru

.debug_line セクションの内容:

CU: a.S:
File name                            Line number    Starting address    View    Stmt
a.S                                            4          0x20000000               x
a.S                                            5          0x20000004       1       x
a.S                                            6          0x20000008       2       x
a.S                                            -          0x2000000c



セクション .text の逆アセンブル:

20000000 <_start>:
20000000:	12e0e0e0 	nop
20000004:	241000e2 	ldi	sp, 4096
20000008:	12e0e0e0 	nop
>

この a.o で同じことをやってみた:

(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.pru-elf/ld/ld-new a.o --defsym stack=0x1000
[Inferior 1 (process 3161) exited normally]
(gdb)

ブレークポイントにヒットするかと思ったが, そうではないらしい. しかしどこかで .debug_line
セクションは読み出しているはずだから

(gdb) b bfd_get_section_contents
(gdb) run


binutils-2.36.1.pru-elf/bfd/compress.c

      if (!bfd_get_section_contents (abfd, sec, p, 0, sz))

ここだった.

(gdb) p p
$10 = (bfd_byte *) 0x81bab90 ":"
(gdb) p sz
$11 = 62
(gdb) x/62bx 0x81bab90 
0x81bab90:	0x3a	0x00	0x00	0x00	0x03	0x00	0x1a	0x00
0x81bab98:	0x00	0x00	0x01	0x01	0xfb	0x0e	0x0d	0x00
0x81baba0:	0x01	0x01	0x01	0x01	0x00	0x00	0x00	0x01
0x81baba8:	0x00	0x00	0x01	0x00	0x61	0x2e	0x53	0x00
0x81babb0:	0x00	0x00	0x00	0x00	0x00	0x05	0x02	0x00
0x81babb8:	0x00	0x00	0x00	0x15	0x03	0x01	0x09	0x04
0x81babc0:	0x00	0x01	0x03	0x01	0x09	0x04	0x00	0x01
0x81babc8:	0x09	0x04	0x00	0x00	0x01	0x01
(gdb)

これは a.o から読み出したそのままのもの. これで set_address (0x02) の後の 4 バイトが
0x20000000 に書き代えられるというわけだ.

(gdb) watch *(int*)(0x81babb0+7)
(gdb) c
Continuing.

Hardware watchpoint 5: *(int*)(0x81babb0+7)

Old value = 0
New value = 536870912
0x0807e35a in bfd_putl32 (data=536870912, p=0x81babb7) at libbfd.c:786
(gdb) p/x 536870912
$12 = 0x20000000
(gdb)

どうやらそうらしい. おそらく他は書き代える必要がないはず.

(gdb) x/62bx 0x81bab90
0x81bab90:	0x3a	0x00	0x00	0x00	0x03	0x00	0x1a	0x00
0x81bab98:	0x00	0x00	0x01	0x01	0xfb	0x0e	0x0d	0x00
0x81baba0:	0x01	0x01	0x01	0x01	0x00	0x00	0x00	0x01
0x81baba8:	0x00	0x00	0x01	0x00	0x61	0x2e	0x53	0x00
0x81babb0:	0x00	0x00	0x00	0x00	0x00	0x05	0x02	0x00
0x81babb8:	0x00	0x00	0x20	0x15	0x03	0x01	0x09	0x04
0x81babc0:	0x00	0x01	0x03	0x01	0x09	0x04	0x00	0x01
0x81babc8:	0x09	0x04	0x00	0x00	0x01	0x01
(gdb) 

これが ldi32 sp, stack の場合でも出ればできていることになる.
これと比較すれば期待値は以下のようになると言える:

*(char*)(0x81b07d8+3) は 0x20 に書き代えられる. これはすでに出来ている.
*(char*)(0x81b07e0+5) は 8 から 4 に書き代えられる. これがまだできていない.

8 から 4 に書き代える条件は, 2 命令が必要なかったと判断できたこと. これがどこなのかはまだ
判明していない.

       => この条件を探したが実は必要なかった. しかし以下はその条件を探した場合の話.

.text セクションから 16 バイト読み込んでいる箇所があるはず. そしてそれを 12 バイトに
決定しているところがあるはず.

.text セクションから 16 バイト読み込んでいるところは以下:

      if (!bfd_get_section_contents (abfd, sec, p, 0, sz))

同じところだった.

(gdb) fin
Run till exit from #0  bfd_get_section_contents (abfd=0x8198068, section=0x819a31c, location=0x819a2e0, offset=0, count=16) at section.c:1564
0x080c7a2b in bfd_get_full_section_contents (abfd=0x8198068, sec=0x819a31c, ptr=0xbffff1c8) at compress.c:288
Value returned is $13 = 1
(gdb) p sz
$14 = 16
(gdb) p p
$15 = (bfd_byte *) 0x819a2e0 "\340\340\340", <incomplete sequence \302>
(gdb) x/16bx  0x819a2e0
0x819a2e0:	0xe0	0xe0	0xe0	0x12	0xc2	0x00	0x00	0x24
0x819a2e8:	0x82	0x00	0x00	0x24	0xe0	0xe0	0xe0	0x12
(gdb)

0xe0e0e012 は nop の命令コードでそれが 0x819a2e0 と 0x819a2e8+4
にある. PRU はリトルエンディアンだから正確には 0x12e0e0e0 である.

一方.

0xc2	0x00	0x00	0x24
0x82	0x00	0x00	0x24

のどちらかが捨てられ, 残ったほうは

0xe2    0x00    0x10    0x24

に変換される.
単純に

0x819a2e0+4

と

0x819a2e8

にウォッチポイントをセットしてみた.

(gdb) watch *(int*)(0x819a2e0+4)
(gdb) watch *(int*)0x819a2e8
(gdb) c
Continuing.

Hardware watchpoint 7: *(int*)0x819a2e8

Old value = 603979906
New value = 603980002
0x0807e35a in bfd_putl32 (data=603980002, p=0x819a2e8) at libbfd.c:786
(gdb) p/x 603980002
$16 = 0x240000e2
(gdb)



	      SET_INSN_FIELD (RDSEL, insn, RSEL_31_0);
	      bfd_put_32 (abfd, insn, contents + irel->r_offset + 4);

	      /* Delete the first LDI instruction.  Note that there should
		 be no relocations or symbols pointing to the second LDI
		 instruction.  */
	      if (!pru_elf_relax_delete_bytes (abfd, sec, irel->r_offset, 4))
		goto error_return;

それっぽい.

(gdb) p/x value
$17 = <optimized out>
(gdb)

まだ -g3 -O0 ビルドされていないソースがあるらしい.

> pushd ../bfd
Makefile を修正. -g3 -O0 にした
> make clean ; make
> pushd
> make
リンクするだけかと思ったが, ビルドし直している.

(gdb) delete
(gdb) b elf32-pru.c:1481
(gdb) run

Breakpoint 8, pru_elf32_relax_section (abfd=0x819d068, sec=0x819f31c, link_info=0x81891e0 <link_info>, again=0xbffff208) at elf32-pru.c:1481
(gdb) p/x value
$18 = 0x1000
(gdb)

これは期待した結果.
さてこれとライン情報をどうやってリンクさせるかだが

残された命令のオフセット   : irel->r_offset + 4
削除された命令のオフセット ： irel->r_offset

である. irel->r_offset を記録すれば良い.


	      if (!pru_elf_relax_delete_bytes (abfd, sec, irel->r_offset, 4))
		goto error_return;

#if 1
	      extern void pru_register_offset_for_debug_line(bfd_vma);
	      pru_register_offset_for_debug_line(irel->r_offset);
#endif	      

	      /* We're done with deletion of the first instruction.


こうしておいた.

       => これは実は必要なかった.

binutils-2.36.1.pru-elf/bfd/pru_register_offset_for_debug_line.cpp

このファイルに空の函数を定義した.
これをビルド環境に取り込むために簡単に以下のスクリプトを作成した:

> cat build_ld
#! /bin/csh -vf

cd ../bfd || exit 1
g++ -g3 -O0 -c pru_register_offset_for_debug_line.cpp || exit 1
rm -f libbfd.a || exit 1
ar r libbfd.a *.o || exit 1
cd ../ld || exit 1
g++ -W -Wall -Wstrict-prototypes -Wmissing-prototypes -Wshadow -Wstack-usage=262144 -DELF_LIST_OPTIONS=TRUE -DELF_SHLIB_LIST_OPTIONS=FALSE -DELF_PLT_UNWIND_LIST_OPTIONS=FALSE -g3 -O0 -o ld-new ldgram.o ldlex-wrapper.o lexsup.o ldlang.o mri.o ldctor.o ldmain.o ldwrite.o ldexp.o ldemul.o ldver.o ldmisc.o ldfile.o ldcref.o plugin.o ldbuildid.o epruelf.o ldelf.o ldelfgen.o  ../bfd/libbfd.a ../libctf/.libs/libctf.a /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.pru-elf/bfd/.libs/libbfd.a -L/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.pru-elf/zlib -L/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.pru-elf/libctf/../libiberty -liberty ../libiberty/libiberty.a -lz -ldl || exit 1
> 

これは簡単に取り込めた. 追加した函数は以下のようにした:

#include "config.h"
#include "bfd.h"

#include <set>

std::set<bfd_vma> delete_ldi_offset;

extern "C" void pru_register_offset_for_debug_line(bfd_vma offset)
{
  using namespace std;
  delete_ldi_offset.insert(offset);
}

         => これも必要なかった.

これで

---------------------------------------------------------------------------
8 から 4 に書き代える条件は, 2 命令が必要なかったと判断できたこと. これがどこなのかはまだ
判明していない.
---------------------------------------------------------------------------

ができたことになる.

しかし elf32_pru_adjust_diff_reloc_value が呼び出された時点で, 実はこの条件が
成立していたのだったとこの時点になって気付いた.

そしてこの函数では

      x = bfd_get_signed_16 (abfd, reloc_contents);
...
      x -= count;
...
	bfd_put_signed_16 (abfd, x & 0xFFFF, reloc_contents);

のようなことをしている.
この函数は合計 4 回呼び出されて

1 回目 :  4 -> 0
2 回目 :  8 -> 4
3 回目 :  4 -> 0
4 回目 : 16 -> 12

のように書き代えられている. だから 1 回目と 3 回目は必要なかったのだ.

4 回の履歴は以下

Breakpoint 1, elf32_pru_adjust_diff_reloc_value (abfd=0x81a2a70, isec=0x81a4f64, irel=0x81aa0e4, symval=536870912, shrinked_insn_address=536870916, count=4) at elf32-pru.c:1002
(gdb) c
Continuing.

Breakpoint 1, elf32_pru_adjust_diff_reloc_value (abfd=0x81a2a70, isec=0x81a4f64, irel=0x81aa0f0, symval=536870912, shrinked_insn_address=536870916, count=4) at elf32-pru.c:1002
(gdb) 
Continuing.

Breakpoint 1, elf32_pru_adjust_diff_reloc_value (abfd=0x81a2a70, isec=0x81a4f64, irel=0x81aa0fc, symval=536870912, shrinked_insn_address=536870916, count=4) at elf32-pru.c:1002
(gdb) 
Continuing.

Breakpoint 1, elf32_pru_adjust_diff_reloc_value (abfd=0x81a2a70, isec=0x81a51a4, irel=0x81aa174, symval=536870912, shrinked_insn_address=536870916, count=4) at elf32-pru.c:1002
(gdb) 
Continuing.
[Inferior 1 (process 11505) exited normally]
(gdb)

shrinked_insn_address = 536870916 = 0x20000004

でこの値は同じ.

1 回目
(gdb) p/x start_address
$2 = 0x20000000
(gdb) p/x end_address
$3 = 0x20000004
(gdb) 

2 回目
(gdb) p/x start_address
$6 = 0x20000004
(gdb) p/x end_address
$7 = 0x2000000c
(gdb)

3 回目
(gdb) p/x start_address
$8 = 0x2000000c
(gdb) p/x end_address
$9 = 0x20000010
(gdb)


4 回目
(gdb) p/x start_address
$10 = 0x20000000
(gdb) p/x end_address
$11 = 0x20000010
(gdb)

こんな感じ.

1 回目と 3 回目で put しないためには以下のようにする:

#if 0
  if (shrinked_insn_address >= start_address
      && shrinked_insn_address <= end_address)
#else
  if (shrinked_insn_address == start_address || 
      end_address - start_address > 4)
#endif    

これで期待した実行ファイルを生成できている.
