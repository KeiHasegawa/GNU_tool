pru-elf-gdb でブレークポイントがずれる件の調査

M-x gdb
gdb --annotate=3 ./gdb
(gdb) cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/test_pru.003
(gdb) run -q -x x test003.elf

で再現している.

単純に nop だけを配置した場合は問題ないが

	.text
start:
	nop
	ldi32	sp, stack
	call	%label(my_func)
end:
	nop
	
my_func:
	ret
	

のようなソースで再現している. ここで start は 0x100 番地に配置されている.
一応, 逆アセンブルの結果を確認した:

00000100 <start>:
 100:	12e0e0e0 	nop
 104:	241000e2 	ldi	sp, 4096
 108:	230044c3 	call	110 <my_func>

0000010c <end>:
 10c:	12e0e0e0 	nop

00000110 <my_func>:
 110:	20c30000 	ret

	ldi32	sp, stack

はもしかするとシンボル stack によって 1 命令だったり, 2 命令だったりするものなのかもしれない.

ライン情報は以下のようになっていた:

 Line Number Statements:
  [0x0000002a]  拡張命令コード 2: 設定アドレス 0x100
  [0x00000031]  Special opcode 7: advance Address by 0 to 0x100 and Line by 2 to 3
  [0x00000032]  行を 1 進め 4 とします
  [0x00000034]  PC を固定サイズ 0 分進め 0x100 とします
  [0x00000037]  コピー (view 1)
  [0x00000038]  行を 1 進め 5 とします
  [0x0000003a]  PC を固定サイズ 4 分進め 0x104 とします
  [0x0000003d]  コピー (view 2)
  [0x0000003e]  行を 2 進め 7 とします
  [0x00000040]  PC を固定サイズ 4 分進め 0x108 とします
  [0x00000043]  コピー (view 3)
  [0x00000044]  行を 5 進め 12 とします
  [0x00000046]  PC を固定サイズ 4 分進め 0x10c とします
  [0x00000049]  コピー (view 4)
  [0x0000004a]  PC を固定サイズ 4 分進め 0x110 とします
  [0x0000004d]  拡張命令コード 1: 列の終り

.debug_line セクションの内容:

CU: test003.S:
File name                            Line number    Starting address    View    Stmt
test003.S                                      3               0x100               x
test003.S                                      4               0x100       1       x
test003.S                                      5               0x104       2       x
test003.S                                      7               0x108       3       x
test003.S                                     12               0x10c       4       x
test003.S                                      -               0x110


3 行目も 4 行目もアドレス 0x100
おそらく 4 行目の情報を上書きしてアドレス 0x100 は 4 行目に対応したというところだろうか.

いずれにしてもこれはリンカの出力に問題がある. もしかするとアセンブラかもしれないので
確認した:

% pru-elf-objdump -x -d --dwarf=rawline --dwarf=decodedline  test003.o > test003.o.objdump
...
File name                            Line number    Starting address    View    Stmt
test003.S                                      3                   0               x
test003.S                                      4                 0x4       1       x
test003.S                                      5                 0xc       2       x
test003.S                                      7                0x10       3       x
test003.S                                     12                0x14       4       x
test003.S                                      -                0x18

アセンブラはできているように思える. だからこれはリンカの問題なのか.
以下も試してみた.

	.text
start:
	nop
	ldi	sp, stack
	call	%label(my_func)
end:
	nop
	
my_func:
	ret

これだと問題は発生しない.
