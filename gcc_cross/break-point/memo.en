Break-point

ARM `nop' instruction is the same with

mov r0, r0

and its length is 4 byte and its value is 0xe1a00000.

At address 0x100 of this test program `start.elf', 4 `nop' instructions
are located.

If you set break-point at `start' = 0x100, nop instruction is changed
to 0xe7ffdefe.

0xe7ffdefe is a not instruction. I don't investigate break instruction
such a `int3' of i386.

And actually, ARM simulator executes this 0xe7ffdefe and reconizes
that it's a break-point like below:


		  if (BITS (0, 19) == 0xfdefe)
		    {
		    // This condition satisfys.
		      if (!ARMul_OSHandleSWI (state, SWI_Breakpoint))
			ARMul_Abort (state, ARMul_SWIV);
		    }

After above, gdb will ask ARM simulator the stop reason like below: 

  // gdb says "Why are you stop?" to ARM simulator
  sim_stop_reason (sim_data->gdbsim_desc, &reason, &sigrc);
             
  switch (reason)
    {
    case sim_exited:
      status->kind = TARGET_WAITKIND_EXITED;
      status->value.integer = sigrc;
      break;
    case sim_stopped:
      switch (sigrc)
	{
	case GDB_SIGNAL_ABRT:
	  quit ();
	  break;
	case GDB_SIGNAL_INT:
	case GDB_SIGNAL_TRAP:  // At this time GDB_SIGNAL_TRAP is euqal to 5 
	default:
	  // comes here
	  status->kind = TARGET_WAITKIND_STOPPED;
	  status->value.sig = (enum gdb_signal) sigrc;
	  break;
	}
      break;

Of cause, 0xe7ffdefe is change to 0e1a00000, i.e. nop instruction.
