MSP430 の ABI

(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long, long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*1) 函数呼び出し

	CALL	#func

	疑似コード

	R1 -= 2
	memory[R1] = (CALL 命令の次のアドレス)
	pc = func

(*2) 函数復帰

	RET

	疑似コード

	pc = memory[R1]
	R1 += 2;

(*3) プロローグ

	PUSHM.W	#3, R10     ; オプショナル
	SUB.W	#128, R1

	上は 128 バイトの領域を使用する函数のプロローグである. 函数内で
	R8, R9, R10 を使用する場合上のように PUSHM 命令で 3 つのレジスタが
	保存される.

(*4) エピローグ

	ADD.W	#128, R1
	POPM.W	#3, r10     ; オプショナル.
	RET

	上は 128 バイトの領域を使用する函数のエピローグである.
	R1 が復元され呼び出し元に復帰する.  PPOPM は (*3) の PUSHM と
	ペアで生成される.

(*5) 通常の函数の引数と戻り値

        sizeof(int) = 2

	第 1 引数 : R12
	第 2 引数 : R13
	第 3 引数 : R14
	第 4 引数 : R15
	第 5 引数以降 : スタックに積む

	int f(int a0, int a1, int a2, int a3, int a4, int a5);

	f(10, 11, 12, 13, 14, 15);

	に対して f の先頭アドレスでは以下のようになっている:

	R12 = 10, R13 = 11, R14 = 12, R15 = 13
	
	+----------------------+ <- sp
	|    return address    |
	+----------------------+ +2
	|          14          |
	+----------------------+ +4
	|          15          |
	+----------------------+ +6

	函数の戻り値は R12 にセットされる.
	函数が可変個引数をとる場合レジスタは使用されずスタックが使用される. 

(*6) long, long long を引数にとる函数, 返す函数

	sizeof(long) = 4
	sizeof(long long) = 8

	long 型の引数にレジスタが 2 つ使用される. 残りはスタックに積まれる.

	long f(int a0, long a1, long a2);
	
	f(0x1234, 0x56789abcL, 0xddeeff00L);

	に対して f の先頭アドレスでは以下のようになっている:

        r12 = 0x1234, r13 = 0x9abc, r14 = 0x5678, 15= 0xff00

	+----------------------+ <- sp
	|    return address    |
	+----------------------+ +2
	|       0xddee         |
	+----------------------+ +4

	函数の戻り値は R12 と R13 にセットされる.

	long long 型の引数が第 1 引数ならば R12, R13, R14, R15 に
	引数の値をセットして函数が呼び出される.
	そうでなければスタックが使用される.
	
	例えば

	long long f(int, long long);

	f(5, 0x123456789abcdef0LL);

	に対して f の先頭アドレスでは

	R12 = 5

	+----------------------+ <- sp
	|    return address    |	
	+----------------------+ +2
	|        0xdef0        |
	+----------------------+ +4
	|        0x9abc        |
	+----------------------+ +6
	|        0x5678        |
	+----------------------+ +8
	|        0x1234        |
	+----------------------+ +10

	のようになっている.


(*7) 浮動少数点数を引数にとる函数, 返す函数

	sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	MSP430 には FPU がないのでソフトウェアで浮動少数点演算を行なう.

	float に対しては (*5) と同様. double, long double に対しては (*6) と同様.
	
(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数に取る函数を呼び出すときに構造体のアドレスが (*5) の規則に従って
	渡される.
	構造体を返す函数を呼び出すときに戻り値を格納する領域が R12 にセットされる.
