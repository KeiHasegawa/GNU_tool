#include "defs.h"
#include "value.h"
#include "arch-utils.h"
#include "regcache.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "dis-asm.h"
#include "dwarf2/frame.h"
#include "frame-base.h"
#include "frame-unwind.h"
#include <cassert>

static int
ns32k_register_sim_regno(gdbarch*, int regnum)
{
  return regnum;
}

static int
ns32k_dbg_reg_to_regnum(gdbarch*, int regnum)
{
  return regnum;
}

const int sp_regno = 10;
const int pc_regno = 12;

static const char*
ns32k_register_name (gdbarch*, int regno)
{
  if (regno == pc_regno)
    return "pc";

  if (regno < 8) {
    static const char* name[] = {
      "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7"};
    return name[regno];
  }

  if (regno == 8)
    return "sp0";
  if (regno == 9)
    return "sp1";
  if (regno == sp_regno)
    return "sp";
  if (regno == 11)
    return "fp";

  return nullptr;
}

static bool is_aggregate(type_code code)
{
  switch (code) {
  case TYPE_CODE_STRUCT: case TYPE_CODE_UNION: case TYPE_CODE_ARRAY:
    return true;
  default:
    return false;
  }
}

static void
n32k_extract_return_value(type* valtype, regcache* regs, gdb_byte *valbuf)
{
  ULONGEST tmp;
  regcache_cooked_read_unsigned(regs, 0, &tmp);
  store_unsigned_integer(valbuf, 4, BFD_ENDIAN_LITTLE, tmp);
  int len = TYPE_LENGTH(valtype);
  if (len < 4)
    return;
  regcache_cooked_read_unsigned(regs, 1, &tmp);
  store_unsigned_integer(valbuf+4, 4, BFD_ENDIAN_LITTLE, tmp);
}

static return_value_convention
ns32k_return_value(gdbarch* arch, value* function,
		   type* valtype, regcache* rc,
		   gdb_byte* readbuf, const gdb_byte* writebuf)
{
  auto code = valtype->code();
  if (is_aggregate(code)) {
    if (readbuf) {
      int len = TYPE_LENGTH(valtype);
      ULONGEST addr;
      regcache_raw_read_unsigned(rc, 0, &addr);
      read_memory(addr, readbuf, len);
    }
    return RETURN_VALUE_ABI_RETURNS_ADDRESS;
  }
  
  assert(!writebuf);

  if (readbuf)
    n32k_extract_return_value(valtype, rc, readbuf);

  return RETURN_VALUE_REGISTER_CONVENTION;
}

static type* ns32k_register_type(gdbarch* arch, int regno)
{
  switch (regno) {
  case pc_regno: return builtin_type(arch)->builtin_func_ptr;
  case sp_regno: return builtin_type(arch)->builtin_data_ptr;
  default:       return builtin_type(arch)->builtin_int32;
  }
}

static void
ns32k_print_registers_info(gdbarch* arch, ui_file* file,
			   frame_info* frame, int regno, int cpregs)
{
  fprintf_filtered (file, "%s at %s:%d called\n", __func__, __FILE__, __LINE__);
}

static CORE_ADDR
ns32k_skip_prologue(gdbarch* arch, CORE_ADDR pc)
{
  CORE_ADDR func_addr, func_end;
  if (!find_pc_partial_function (pc, nullptr, &func_addr, &func_end))
    return pc;
  
  symtab_and_line sal = find_pc_line (func_addr, 0);
  if (sal.end && sal.end < func_end)
    return sal.end;

  return pc;
}

static frame_base ns32k_frame_base = {
};

struct ns32k_frame {
  bool available;
  CORE_ADDR prologue_start;
  CORE_ADDR prev_sp;
  int size;
  ns32k_frame(frame_info* frame)
  {
    available = false;
    prologue_start = -1;
    prev_sp = get_frame_sp(frame);
    size = 0;
  }
};

inline void update(uint8_t insn, ns32k_frame* frame)
{
}

static ns32k_frame* ns32k_create_frame(frame_info* frame)
{
  using namespace std;
  auto ret = new ns32k_frame(frame);
  CORE_ADDR pc = get_frame_pc(frame);
  auto block_addr = get_frame_address_in_block(frame);
  CORE_ADDR func_end;
  bool found = find_pc_partial_function(block_addr, nullptr,
					&ret->prologue_start, &func_end);
  if (!found) {
    ret->available = false;
    ret->prologue_start = pc;
    return ret;
  }

  symtab_and_line sal = find_pc_line(ret->prologue_start, 0);
  auto end = sal.end ? min(pc, sal.end) : pc;
  ret->available = true;
  for (auto addr = ret->prologue_start; addr != end ; addr += 1) {
    ULONGEST insn;
    if (!safe_read_memory_unsigned_integer(addr, 1, BFD_ENDIAN_LITTLE, &insn))
      return ret;
    update(insn, ret);
  }
  return ret;
}

static void
ns32k_frame_this_id(frame_info* frame, void** ptr, frame_id* id)
{
  auto pf  = reinterpret_cast<ns32k_frame*>(*ptr);
  if (!pf)
    *ptr = pf = ns32k_create_frame(frame);

  if (!pf->available)
    *id = frame_id_build_unavailable_stack(pf->prologue_start);
  else
    *id = frame_id_build(pf->prev_sp, pf->prologue_start);
}

static value*
ns32k_frame_prev_register(frame_info* frame, void** ptr, int regno)
{
  if (regno == pc_regno) {
#if 0    
    auto pc = get_frame_pc(frame);
    return frame_unwind_got_constant(frame, regno, pc);
#else
    return frame_unwind_got_constant(frame, regno, -1);
#endif    
  }

  assert(regno == sp_regno);
  auto sp = get_frame_sp(frame);
  return frame_unwind_got_constant(frame, regno, sp);
}

static frame_unwind ns32k_frame_unwind = {
  NORMAL_FRAME,
  default_frame_unwind_stop_reason,
  ns32k_frame_this_id,
  ns32k_frame_prev_register,
  nullptr,
  default_frame_sniffer
};

static
int ns32k_kind_from_pc(gdbarch*, CORE_ADDR* addr)
{
  return 0;
}

static const unsigned char* ns32k_from_kind(gdbarch*, int kind, int* size)
{
  static unsigned char bkpt[] = { 0xf2 };  // bpt
  *size = sizeof bkpt;
  return &bkpt[0];
}

static CORE_ADDR
ns32k_push_dummy_call(gdbarch* arch, value* function,
		      regcache* rc, CORE_ADDR bp_addr,
		      int nargs, value** args, CORE_ADDR sp,
		      function_call_return_method rm,
		      CORE_ADDR struct_addr)
{
  asm("int3");
  return 0;
}

static gdbarch*
ns32k_gdbarch_init(gdbarch_info info, gdbarch_list* arches)
{
  gdbarch* arch = gdbarch_alloc (&info, 0);

  set_gdbarch_num_regs(arch, pc_regno+1);
  set_gdbarch_register_type(arch, ns32k_register_type);
  set_gdbarch_register_sim_regno(arch, ns32k_register_sim_regno);
  set_gdbarch_dwarf2_reg_to_regnum(arch, ns32k_dbg_reg_to_regnum);
  set_gdbarch_stab_reg_to_regnum(arch, ns32k_dbg_reg_to_regnum);
  set_gdbarch_register_name(arch, ns32k_register_name);

  set_gdbarch_pc_regnum(arch, pc_regno);
  set_gdbarch_sp_regnum(arch, sp_regno);
  set_gdbarch_print_registers_info(arch, ns32k_print_registers_info);

  set_gdbarch_ptr_bit(arch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_addr_bit(arch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_return_value(arch, ns32k_return_value);

  set_gdbarch_skip_prologue(arch, ns32k_skip_prologue);
  frame_base_set_default(arch, &ns32k_frame_base);
  dwarf2_append_unwinders(arch);
  frame_unwind_append_unwinder(arch, &ns32k_frame_unwind);

  set_gdbarch_inner_than (arch, core_addr_lessthan);
  set_gdbarch_breakpoint_kind_from_pc(arch, ns32k_kind_from_pc);
  set_gdbarch_sw_breakpoint_from_kind(arch, ns32k_from_kind);
  set_gdbarch_push_dummy_call(arch, ns32k_push_dummy_call);

  set_gdbarch_char_signed(arch, 0);
  set_gdbarch_int_bit(arch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_bit(arch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_long_bit (arch, 8 * TARGET_CHAR_BIT);

  set_gdbarch_wchar_signed(arch, 0);
  set_gdbarch_wchar_bit(arch, 2 * TARGET_CHAR_BIT);

  set_gdbarch_double_bit(arch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_double_format(arch, floatformats_ieee_double);
  set_gdbarch_long_double_bit(arch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_long_double_format(arch, floatformats_ieee_double);

  set_gdbarch_believe_pcc_promotion(arch, 1);
 
  return arch;
}

void _initialize_ns32k_tdep();
void
_initialize_ns32k_tdep()
{
  register_gdbarch_init(bfd_arch_ns32k, ns32k_gdbarch_init);
}

