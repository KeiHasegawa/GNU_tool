(*0) SPU

https://en.wikipedia.org/wiki/Cell_Broadband_Engine

(*1) binutils install

% xz -d -c ../binutils-2.36.1-2.src/binutils-2.36.1.tar.xz | tar xf -
% mv binutils-2.36.1 binutils-2.36.1.spu-elf
% cd binutils-2.36.1.spu-elf
% ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=spu-elf
% make
% make all

(*2) gcc install

Use gcc-9.1.0 archive and specifiy `--enable-obsolete' executing `configure'
like below:

% xz -d -c ../gcc-9.1.0.tar.xz | tar xf -
% mv gcc-9.1.0 gcc-9.1.0.spu-elf
% cd gcc-9.1.0.spu-elf
% sed -e s/host_subdir = @host_subdir@/host_subdir = host-i686-pc-linux-gnu/ libgcc/Makefile.in
% mv libgcc/Makefile.in.new libgcc/Makefile.in
% ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=spu-elf --enable-obsolete
% make all-gcc
% make all-target-libgcc
...
/tmp/ccrVcYWV.s: Assembler messages:
/tmp/ccrVcYWV.s:54: Error: Relocation doesn't fit. (relocation value = 0x518)
make[3]: *** [../../.././libgcc/config/spu/t-elf:33: cachemgr.o] Error 1
...
%

Unfortunately, `libgcc.a' cannot be built. But cc1 and gcc can be built.

% make all-gcc

(*3) gdb install

Unfortunately, nobody develops SPU simulator. So I decided to develop by myself.

% xz -d -c ../gdb-10.2-1.src/gdb-10.2.tar.xz | tar xf -
% mv gdb-10.2 gdb-10.2.spu-elf
% cd gdb-10.2.spu-elf/gdb

Did the same with: 
d30v, fr30, z8k, i960, mmix, z80, i386, pdp11, vax, alpha, m68k and ns32k

gdb-10.2.ns32k-elf/gdb/configure.tgt:

h8300-*-*)
	# Target: H8300 processor
	gdb_target_obs="h8300-tdep.o"
	gdb_sim=../sim/h8300/libsim.a
	;;

+spu-*-*)
+	gdb_target_obs="spu-tdep.o"
+	gdb_sim=../sim/spu/libsim.a
+	;;

hppa*-*-linux*)

% cp ~/lang/53_GNU_tool/gcc_cross/MCORE/gdb/mcore-tdep.c.001 spu-tdep.c

Replace `mcore' with `spu'.

% cd ..
% ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=spu-elf
% make
...
  CXX    init.o
No rule target for '../sim/spu/libsim.a'
...
%

% tar xf ~/lang/53_GNU_tool/gcc_cross/NS32000/gdb/ns32k.1.tar
% mv ns32k spu
% cd spu

Replace `ns32k' with `spu'.
Add `spu.o' for build target and add the function into `spu.cpp' for
getting rid of link error.

% make
OK if no error.

% cd ../../gdb
% make
OK if no error.

A few fix enable us to execute a few nop program at address 0x100.

  => Refer "SPU gdb". `spu-tdep.c.1' and `spu.1.tar'.





