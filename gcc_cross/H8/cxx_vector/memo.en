C++ vector

% ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=h8300-elf
% make all-gcc
% make maybe-configure-target-libgcc
% make maybe-all-target-libgcc
% make maybe-configure-target-libstdc++-v3
configure: error: No support for this host/target combination.
make: *** [Makefile:11272: configure-target-libstdc++-v3] Error 1

I couldn't install like above.

I tried to use Standard Template Library of native compiler like below:

% g++ -E use_vec.cpp > use_vec.i

where, paths of file are recorded in `use_vec.i'. Then

% h8300-elf-g++ -o use_vec.o use_vec.cpp -g -c -I/usr/local/include/c++/10.2.0 -I/usr/local/include/c++/10.2.0/i686-pc-linux-gnu -I/usr/include

Normally done. Finally,

% h8300-elf-ld -o use_vec.elf /home/khasegawa/lang/53_GNU_tool/gcc_cross/H8/tool/start.o use_vec.o mine.o mine2.o /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/lib/gcc/h8300-elf/10.2.0/libgcc.a -T /home/khasegawa/lang/53_GNU_tool/gcc_cross/H8/tool/sample.x

where, `start.o' and `sample.x' are described at "Test tool".

For linking successfuly, deinfe refered variable and functions at
`mine.S' or `mine2.cpp'. I had to define below:

___gxx_personality_sj0

extern "C" void abort();

void std::__throw_length_error(const char*);

void std::__throw_bad_alloc();

void operator delete(void*, size_t);

void* operator new(size_t);

extern "C" void* memmove(void*, const void*, size_t);

Now, I could confirmed that `use_vec.elf' worked well by using
h8300-elf-gdb or h8300-elf-run.
