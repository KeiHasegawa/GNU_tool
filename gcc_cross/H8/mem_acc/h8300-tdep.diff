*** gdb-10.2.org/gdb/h8300-tdep.c	2021-04-25 13:06:26.000000000 +0900
--- gdb-10.2.h8300-elf/gdb/h8300-tdep.c	2022-01-01 13:28:49.000000000 +0900
***************
*** 612,617 ****
--- 612,619 ----
     - It often wastes argument registers, of which there are only three
       to begin with.  */
  
+ extern "C" void clear_cache(int);
+ 
  static CORE_ADDR
  h8300_push_dummy_call (struct gdbarch *gdbarch, struct value *function,
  		       struct regcache *regcache, CORE_ADDR bp_addr,
***************
*** 705,711 ****
    /* Store return address.  */
    sp -= wordsize;
    write_memory_unsigned_integer (sp, wordsize, byte_order, bp_addr);
! 
    /* Update stack pointer.  */
    regcache_cooked_write_unsigned (regcache, E_SP_REGNUM, sp);
  
--- 707,714 ----
    /* Store return address.  */
    sp -= wordsize;
    write_memory_unsigned_integer (sp, wordsize, byte_order, bp_addr);
!   clear_cache(bp_addr);
!   
    /* Update stack pointer.  */
    regcache_cooked_write_unsigned (regcache, E_SP_REGNUM, sp);
  
***************
*** 880,887 ****
  		    struct type *type, struct regcache *regcache,
  		    gdb_byte *readbuf, const gdb_byte *writebuf)
  {
!   if (h8300_use_struct_convention (type))
!     return RETURN_VALUE_STRUCT_CONVENTION;
    if (writebuf)
      h8300_store_return_value (type, regcache, writebuf);
    else if (readbuf)
--- 883,896 ----
  		    struct type *type, struct regcache *regcache,
  		    gdb_byte *readbuf, const gdb_byte *writebuf)
  {
!   if (h8300_use_struct_convention (type)) {
!     if (readbuf) {
!       ULONGEST addr;
!       regcache_raw_read_unsigned (regcache, E_RET0_REGNUM, &addr);
!       read_memory (addr, readbuf, TYPE_LENGTH(type));
!     }
!     return RETURN_VALUE_ABI_RETURNS_ADDRESS;
!   }
    if (writebuf)
      h8300_store_return_value (type, regcache, writebuf);
    else if (readbuf)
***************
*** 1141,1146 ****
--- 1150,1159 ----
  	    return builtin_type (gdbarch)->builtin_uint8;
  	  else if (is_h8300hmode (gdbarch))
  	    return builtin_type (gdbarch)->builtin_int32;
+ #if 1
+ 	  else if (regno == E_CYCLES_REGNUM || regno == E_TICK_REGNUM || regno == E_INST_REGNUM)
+ 	    return builtin_type (gdbarch)->builtin_int32;
+ #endif	  
  	  else
  	    return builtin_type (gdbarch)->builtin_int16;
  	}
