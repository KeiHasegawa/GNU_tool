FT32 の ABI

(*0) 命令用メモリとデータ用メモリ
(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数

(*0) 命令用メモリとデータ用メモリ

        FT32 では命令用メモリとデータ用メモリに分かれている. プログラムや変数の初期値は命
	令用メモリにロードされる.

	プログラムが通常のロード/ストアを発行するとデータ用メモリにアクセスする.
	スタートアップルーチンではロードされたデータをデータ用メモリに LPM 命令で
	コピーする必要がある.

(*1) 函数呼び出し

	call   func

	疑似コード

	sp -= 4
	memory[sp] = (call 命令の次のアドレス)
	pc = func

	戻りアドレスをスタックに積んでジャンプするということ.
	sp は r31 の別名.

(*2) 函数復帰

	return

	疑似コード

	pc = memory[sp]
	sp -= 4

	スタックからポップしたアドレスにジャンプするということ.

(*3) プロローグ

	link   $fp,128

	上は 128 バイトのローカルエリアを使用する函数のプロローグ.

	+----------------------+ <- sp_{new}
	|                      |
	|                      |
	|                      |
	|      local area      |
	|                      |
	|                      |
	|                      |
	+----------------------+ <- fp_{new}
	|       fp_{old}       |
	+----------------------+ <- sp_{old}
	|    return address    |
	+----------------------+

	疑似コード

	sp -= 4
	memory[sp] = fp
	fp = sp
	sp -= 128

	場合によって以下のようになる:

	pop.l  $cc      ; オプショナル
	push.l $r5      ; オプショナル
	push.l $cc      ; オプショナル
	link   $fp,128

(*4) エピローグ

	unlink $fp
	return

	上はエピローグで使用するローカルエリアのバイト数に依存しない.


	以下は (*3) で「場合によって」に対するエピローグである.
	
	unlink $fp
	pop.l  $cc
	add.l  $sp,$sp,4
	jmpi   $cc
	
(*5) 通常の函数の引数と戻り値

        第 1 引数 : r0
        第 2 引数 : r1
        第 3 引数 : r2
        第 4 引数 : r3
        第 5 引数 : r4
        第 6 引数 : r5
	第 7 引数以降 : スタックに積む

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10, 11, 12, 13, 14, 15, 16, 17);

	に対して f の先頭アドレスでは

	r0 = 10, r1 = 11, r2 = 12, r3 = 13, r4 = 14, r5 = 15

	+----------------------+ <- sp
	|    return address    |
	+----------------------+
	|          16          |
	+----------------------+	
	|          17          |
	+----------------------+	

	のようになっている.
	函数の戻り値は r0 にセットされる.

(*6) long long を引数にとる函数, 返す函数

        sizeof(long long) = 8

	引数を渡すときに 2 つのレジスタが使用され残りはスタックに積まれる.

	long long f(int a0, long long a1, long long a2, long long a3);


	f(10, 0x123456789abcdef0LL, 0x1122334455667788LL, 0x99aabbccddeeff00LL);

	に対して f の先頭アドレスでは

	r0 = 10,
	r1 = 0x9abcdef0, r2 = 0x12345678, r3 = 0x55667788, r4 = 0x11223344
	r5 = 0xddeeff00

	+----------------------+ <- sp
	|    return address    |
	+----------------------+
	|      0x99aabbcc      |
	+----------------------+

	のようになっている.
	函数の戻り値は r0 と r1 にセットされる.

(*7) 浮動少数点数を引数にとる函数, 返す函数

	sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	FT32 には FPU がないので浮動少数点数演算はソフトウェアで行なわれる.
	float に対しては (*5), double, long double に対しては (*6) と同じ.

(*8) 構造体を引数にとる函数, 構造体を返す函数

	構造体を引数にとる函数を呼び出すとき, レジスタは使用されず, スタックにコピーされる.
	構造体を返す函数を呼び出すとき, 戻り値を格納するアドレスが r0 レジスタにセットされる.
