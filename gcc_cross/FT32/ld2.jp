.debug_line セックションのアドレス 0x104 で PC をずらさず, ロケーションカウンタのみ 4 ずら
す修正

(gdb) run test000.o -x test000.x
.debug_line セクションを処理している箇所に直接埋めてあるブレークポイントにヒット
(gdb) fin
(gdb) p sz
$15 = 68
(gdb) p p
$16 = (bfd_byte *) 0x81b2fa0 ""
(gdb) x/68bx 0x81b2fa0  # .debug_line セックションのダンプ
0x81b2fa0:	0x00	0x00	0x00	0x00	0x03	0x00	0x00	0x00
0x81b2fa8:	0x00	0x00	0x01	0x01	0xfb	0x0e	0x0d	0x00
0x81b2fb0:	0x01	0x01	0x01	0x01	0x00	0x00	0x00	0x01
0x81b2fb8:	0x00	0x00	0x01	0x00	0x61	0x2e	0x53	0x00
0x81b2fc0:	0x00	0x00	0x00	0x00	0x00	0x05	0x02	0x00
0x81b2fc8:	0x00	0x00	0x00	0x14	0x03	0x01	0x09	0x00
0x81b2fd0:	0x00	0x01	0x03	0x01	0x09	0x00	0x00	0x01
0x81b2fd8:	0x03	0x02	0x09	0x00	0x00	0x01	0x09	0x00
0x81b2fe0:	0x00	0x00	0x01	0x01
(gdb) p/x *(char*)0x81b2fc8
$17 = 0x0
(gdb) p/x *(char*)(0x81b2fc8+6)
$18 = 0x9
(gdb) watch *(short*)(0x81b2fc8+7)
(gdb) c
Continuing.

Hardware watchpoint 5: *(short*)(0x81b2fc8+7)

Old value = 0
New value = 4
bfd_putl16 (data=260, p=0x81b2fcf) at libbfd.c:578
(gdb) n

この後 bfd_putl16 が data = 260 = 0x104
で呼び出されるので実際書き込む値が 4 になるように

(gdb) set addr[1]=0

のようにする. この後 3 回この函数が data = 0x104 で呼び出されるので
その値も修正する.

(gdb) b bfd_putl16
(gdb) c
(gdb) n
(gdb) 
(gdb) 
(gdb) set addr[1]=0
(gdb) c
Continuing.

Breakpoint 6, bfd_putl16 (data=260, p=0x81b2fdb) at libbfd.c:576
(gdb) n
(gdb) 
(gdb) 
(gdb) set addr[1]=0
(gdb) c
Continuing.

Breakpoint 6, bfd_putl16 (data=260, p=0x81b2fdf) at libbfd.c:576
(gdb) n
(gdb) 
(gdb) 
(gdb) set addr[1]=0
(gdb) c
Continuing.
