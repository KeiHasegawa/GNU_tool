(*1) Fix for advancing location counter by 4
(*2) Modification `Prologue Length' of .debug_line 36(0x24) -> 26(0x1a)
(*3) Calculation `Prologue Length' of .debug_line

(*1) Fix for advancing location counter by 4

`ft32-elf-as' was fixed like below:

binutils-2.36.1.ft32-elf/gas/config/tc-ft32.c

#if 0
  dwarf2_emit_insn (4);
#else
  int n = frag_now_fix_octets ();
  if (n > 4)
    n -= 4;
  dwarf2_emit_insn(n);
#endif

With above fix, It's enable to advance location counter by 4 according to 1
line:

% ./as-new -g a.S
% ft32-elf-objdump --dwarf=rawline --dwarf=decodedline a.out
...
  [0x0000003e]  Advance PC by 16 to 0x1c
  [0x00000041]  Extended opcode 1: End of Sequence
...
File name                            Line number    Starting address    View    Stmt
a.S                                            3                   0               x
a.S                                            4                 0x4       1       x
a.S                                            5                 0x8       2       x
a.S                                            7                 0xc       3       x
a.S                                            -                0x1c

But like above, the last advance PC size is 16 and it's not correct.

(gdb) b dwarf2dbg.c:1734
(gdb) run

      emit_expr_fix (pexp, 2, frag, p, TC_PARSE_CONS_RETURN_NONE);

(gdb) p debug(pexp)

  if (expr->X_add_number == 16)
    asm("int3");                   // Hit this break-point
  if (expr->X_add_number == 36)
    asm("int3");

...
(gdb) p &expr->X_add_number
$3 = (offsetT *) 0x815b6c0
(gdb) watch *(offsetT *) 0x815b6c0
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.ft32-elf/gas/as-new -g a.S

Hardware watchpoint 4: *(offsetT *) 0x815b6c0

Old value = <unreadable>
New value = 0
memset () at ../sysdeps/i386/i686/memset.S:85
85      ../sysdeps/i386/i686/memset.S: No such file or directory
(gdb) c
Continuing.

Hardware watchpoint 4: *(offsetT *) 0x815b6c0

Old value = 0
New value = 16
S_SET_VALUE (s=0x815b6a0, val=16) at symbols.c:2173
(gdb) set s->x->value.X_add_number=4
(gdb)

By above gdb `set' command, ft32-elf-as can generate `a.out' as I expect and
confirm with below command

% ft32-elf-objdump --dwarf=rawline --dwarf=decodedline a.out

(*2) Modification `Prologue Length' of .debug_line 36(0x24) -> 26(0x1a)

ft32-elf-objdump -r a.out

a.out:     file format elf32-ft32

RELOCATION RECORDS FOR [.debug_line]:
OFFSET   TYPE              VALUE
00000000 R_FT32_32         .debug_line+0x00000040
00000006 R_FT32_32         .debug_line+0x00000024  # This one
00000027 R_FT32_32         .text
0000002f R_FT32_16         .text+0x00000004
00000035 R_FT32_16         .text+0x00000004
0000003b R_FT32_16         .text+0x00000004
0000003f R_FT32_16         .text+0x00000010

  Similarly with (*1) , execute `p debgu(pexp)'

  if (expr->X_add_number == 16)
    asm("int3");
  if (expr->X_add_number == 36)
    asm("int3");                   // This hit

Then similarly,

(gdb) p &expr->X_add_number

I confirmed the address and set watch-point.

When above watch-point hit, the code set 36 to the address, so modified like below:

(gdb) set s->x->value.X_add_number=26

(*3) Calculation `Prologue Length' of .debug_line

`Prologue Length' of .debug_line becomes 36 because of referring below function:

(gdb) p frchain_now->frch_obstack->next_free - frag_now->fr_literal

 At the start of `out_debug_line' function,

(gdb) p frchain_now->frch_obstack->next_free - frag_now->fr_literal
$18 = 0
(gdb)

so confirm how the expression is changed.

  asm("int3");
#if 0
  dwarf2_emit_insn (4);
#else
  int n = frag_now_fix_octets ();
  if (n > 4)
    n -= 4;
  dwarf2_emit_insn(n);
#endif

  Above code is executed before `out_debug_line' is called.

  out_byte (0);                 /* DW_LNS_set_epilogue_begin */
  out_byte (1);                 /* DW_LNS_set_isa */   // Before executing this line

rchain_now->frch_obstack->next_free - frag_now->fr_literal = 26

And after executing above line:

rchain_now->frch_obstack->next_free - frag_now->fr_literal = 27

i.e. as described at (*2), To modify 26 worked well. The reason
was that `ft32-elf-gdb' recognized in such a way.
