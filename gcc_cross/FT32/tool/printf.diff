*** gdb-10.2.aarch64-elf/sim/ft32/interp.c	2021-04-25 13:06:26.000000000 +0900
--- gdb-10.2.ft32-elf/sim/ft32/interp.c	2021-11-18 14:46:59.000000000 +0900
***************
*** 313,318 ****
--- 313,488 ----
    return x;
  }
  
+ #include <assert.h>
+ 
+ static const char* first_string(SIM_DESC sd, sim_cpu* cpu)
+ {
+   uint32_t r0 = cpu->state.regs[0];
+   static char buf[1024];
+   for (int i = 0 ; i != sizeof buf/sizeof buf[0] ; ++i ) {
+     char c = ft32_read_item(sd, 0, r0+i);
+     buf[i] = c;
+     if (c == '\0')
+       return &buf[0]; // ok
+   }
+   assert(0 && "not enough buffer");
+   return &buf[0];
+ }
+ 
+ enum arg_class { NONE, WORD, DW, DF, LDF, STR };
+ 
+ static const char* get_part(const char* fmt, enum arg_class* how)
+ {
+   for ( ; *fmt ; ++fmt) {
+     char c = *fmt;
+     if (c == 'd' || c == 'i' || c == 'x' || c == 'u') {
+       if (*how == NONE)
+ 	*how = WORD;
+       return ++fmt;
+     }
+     if (c == 'c') {
+       *how = WORD;
+       return ++fmt;
+     }
+     if (c == 'f') {
+       char prev = *(fmt-1);
+       *how = prev == 'L' ? LDF : DF;
+       return ++fmt;
+     }
+     if (c == 's') {
+       *how = STR;
+       return ++fmt;
+     }
+     if (c == 'l') {
+       if (*how == NONE)
+ 	*how = WORD;
+       else
+ 	*how = DW;
+     }
+   }
+   assert(0 && "unexpected");
+   return fmt;
+ }
+ 
+ static uint32_t arg32(SIM_DESC sd, sim_cpu* cpu, int nth)
+ {
+   assert(nth);
+   if (nth < 6)
+     return cpu->state.regs[nth];
+   int sp = cpu->state.regs[31];
+   int addr = sp + 4*(nth-6);
+   return ft32_read_item(sd, 2, addr);
+ }
+ 
+ static uint64_t arg64(SIM_DESC sd, sim_cpu* cpu, int nth)
+ {
+   assert(nth);
+   if (nth < 5) {
+     uint32_t a = cpu->state.regs[nth];
+     uint64_t b = cpu->state.regs[nth+1];
+     return (b << 32) | a;
+   }
+   if (nth == 5) {
+     uint32_t a = cpu->state.regs[nth];
+     int sp = cpu->state.regs[31];
+     uint64_t b = ft32_read_item(sd, 2, sp);
+     return (b << 32) | a;
+   }
+   int sp = cpu->state.regs[31];
+   int addr = sp + 4*(nth-6);
+   uint32_t a = ft32_read_item(sd, 2, addr);
+   uint64_t b = ft32_read_item(sd, 2, addr+4);
+   return (b << 32) | a;
+ }
+ 
+ static const char*
+ handle(SIM_DESC sd, sim_cpu* cpu, const char* fmt, int* nth, int* ret)
+ {
+   char c = *fmt;
+   if (c != '%') {
+     putchar(c);
+     ++*ret;
+     return fmt+1;
+   }
+   const char* beg = fmt;
+   c = *++fmt;
+   if (c == '%') {
+     putchar(c);
+     ++*ret;
+     return fmt+1;
+   }
+   enum arg_class how = NONE;
+   const char* end = get_part(fmt, &how);
+   char part_fmt[256];
+   int n = end - beg;
+   assert(n + 1 < sizeof part_fmt/sizeof part_fmt[0]);
+   strncpy(&part_fmt[0], beg, n);
+   part_fmt[n] = '\0';
+   if (how == WORD) {
+     int arg = arg32(sd, cpu, (*nth)++);
+     *ret += printf(part_fmt, arg);
+     return end;
+   }
+   if (how == DW) {
+     uint64_t arg = arg64(sd, cpu, *nth);
+     *nth += 2;
+     *ret += printf(part_fmt, arg);
+     return end;
+   }
+   if (how == DF || how == LDF) {
+     union {
+       uint64_t i;
+       double d;
+     } u = { arg64(sd, cpu, *nth) };
+     *nth += 2;
+     if (how == DF)
+       *ret += printf(part_fmt, u.d);
+     else
+       *ret += printf(part_fmt, (long double)u.d);
+     return end;
+   }
+   if (how == STR) {
+     uint32_t addr = arg32(sd, cpu, (*nth)++);
+     char buf[256];
+     for (int i = 0 ; i != sizeof buf/sizeof buf[0] ; ++i) {
+       char c = ft32_read_item(sd, 0, addr+i);
+       buf[i] = c;
+       if (c == '\0') {
+ 	*ret += printf(part_fmt, &buf[0]);  // ok
+ 	return end;
+       }
+     }
+     assert(0 && "not enough buffer");
+     return end;
+   }
+   asm("int3");
+   return end;
+ }
+ 
+ static void do_printf(SIM_DESC sd, sim_cpu* cpu)
+ {
+   const char* fmt = first_string(sd, cpu);
+   int argc = 1;
+   int ret = 0;
+   while (*fmt)
+     fmt = handle(sd, cpu, fmt, &argc, &ret);
+   cpu->state.regs[0] = ret;
+ }
+ 
+ static void do_puts(SIM_DESC sd, sim_cpu* cpu)
+ {
+   const char* arg = first_string(sd, cpu);
+   int ret = puts(arg);
+   cpu->state.regs[0] = ret;  
+ }
+ 
+ static void do_putchar(SIM_DESC sd, sim_cpu* cpu)
+ {
+   int arg = cpu->state.regs[0];
+   int ret = putchar(arg);
+   cpu->state.regs[0] = ret;  
+ }
+ 
  static void
  step_once (SIM_DESC sd)
  {
***************
*** 344,349 ****
--- 514,525 ----
    int isize;
  
    inst = ft32_read_item (sd, 2, cpu->state.pc);
+   switch (inst) {
+   case 0x0badbeef: exit(0);
+   case 0x1badbeef: do_printf(sd, cpu); cpu->state.pc += 4; return;
+   case 0x2badbeef: do_puts(sd, cpu); cpu->state.pc += 4; return;
+   case 0x3badbeef: do_putchar(sd, cpu); cpu->state.pc += 4; return;
+   }
    cpu->state.cycles += 1;
  
    if ((STATE_ARCHITECTURE (sd)->mach == bfd_mach_ft32b)
***************
*** 896,902 ****
--- 1072,1082 ----
        freeargv (STATE_PROG_ARGV (sd));
        STATE_PROG_ARGV (sd) = dupargv (argv);
      }
+ #if 0  
    cpu->state.regs[FT32_HARD_SP] = addr;
+ #else
+   cpu->state.pc = addr;
+ #endif
    cpu->state.num_i = 0;
    cpu->state.cycles = 0;
    cpu->state.next_tick_cycle = 100000;
