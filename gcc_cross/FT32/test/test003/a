diff --git a/gcc_cross/FT32/test/test003/MEMO b/gcc_cross/FT32/test/test003/MEMO
index acb0a00..f9fee4a 100644
--- a/gcc_cross/FT32/test/test003/MEMO
+++ b/gcc_cross/FT32/test/test003/MEMO
@@ -2,3 +2,5 @@
 
 スタートアップルーチン, リンカスクリプト, シミュレータのメモリの割り当ての方法を変更したところ
 sbrk が呼び出されなくなっている. 以前は 2 回の呼び出しがあった.
+
+以前は sbrk(1048) の呼び出しが 1 回目.
diff --git a/gcc_cross/FT32/test/test003/gdbcom b/gcc_cross/FT32/test/test003/gdbcom
index a196e18..261f08d 100644
--- a/gcc_cross/FT32/test/test003/gdbcom
+++ b/gcc_cross/FT32/test/test003/gdbcom
@@ -5,7 +5,7 @@ sim memory-region 0x804efc,0x1104
 sim memory-region 0x806008,0x1000
 
 b start
-b _exit
+b exit
 command
 quit
 end
diff --git a/gcc_cross/FT32/test/test003/hello.x b/gcc_cross/FT32/test/test003/hello.x
index 64a3026..1bfed71 100644
--- a/gcc_cross/FT32/test/test003/hello.x
+++ b/gcc_cross/FT32/test/test003/hello.x
@@ -1,24 +1,31 @@
+MEMORY {
+       flash     (rx)   : ORIGIN = 0,        LENGTH = 0x40000
+       ram       (rw!x) : ORIGIN = 0x800000, LENGTH = 0x10000
+}
+
 SECTIONS {
-	 . = 0x100;
-	 .text : {}
+	 .text : {} > flash
+	 
+	 .text : {} > flash
 	 
 	 .data : {
-	 	 _data_start = .;
-	 }
- 	 _data_end = .;
+	       _data_start = .;  /* VMA */
+	       *(.data)
+	       *(.rodata)
+	       _data_end = .;    /* VMA */
+	 } > ram AT> flash
 	 
-	 .rodata : {
-	 	 _rodata_start = .;
-	 }
-	 _rodata_end = .;
-
-	 .bss : {
+	 .bss ADDR(.data) + SIZEOF(.data) : {
 	      _bss_start = .;
-	 }
-	 _bss_end = .;
+	      *(.bss)
+	      _bss_end = .;	      
+	 } > ram
 	 _end = .;
 
+	 __data_load_start = LOADADDR(.data);                    /* LMA */
+	 __data_load_end = __data_load_start + SIZEOF(.data);    /* LMA */
+
 	 . = 0x7008;
-	 _stack = .;
+	 stack = .;
 }
 
diff --git a/gcc_cross/FT32/test/test003/start.S b/gcc_cross/FT32/test/test003/start.S
index 483261d..169e392 100644
--- a/gcc_cross/FT32/test/test003/start.S
+++ b/gcc_cross/FT32/test/test003/start.S
@@ -1,30 +1,21 @@
 	.text
 start:
-	ldk.l	$r0, _data_start
-	ldk.l	$r1, _data_end
+	ldk.l	$r0, __data_load_start
+	ldk.l	$r1, __data_load_end
+	ldk.l	$r2, _data_start
 .L1:
 	/* if r0 == r1 goto .L2 */	
 	cmp.l	$r0, $r1
 	jmpc	z,.L2
-	lpmi.b	$r2, $r0, 0
-	sti.b	$r0,0,$r2
+	lpmi.b	$r3, $r0, 0
+	sti.b	$r2,0,$r3
 	add.l	$r0,$r0,1
+	add.l	$r2,$r2,1
 	jmp	.L1
 .L2:
-	ldk.l	$r0, _rodata_start
-	ldk.l	$r1, _rodata_end
-.L3:
-	/* if r0 == r1 goto .L4 */
-	cmp.l	$r0, $r1
-	jmpc	z,.L4
-	lpmi.b	$r2, $r0, 0
-	sti.b	$r0,0,$r2
-	add.l	$r0,$r0,1
-	jmp	.L3
-.L4:	
 	ldk.l	$r0, _bss_start
 	ldk.l	$r1, _bss_end
-	ldk.b	$r2,0
+	ldk.b	$r2, 0
 .L5:
 	/* if r0 == r1 goto .L6 */
 	cmp.l	$r0, $r1
@@ -33,7 +24,8 @@ start:
 	add.l	$r0,$r0,1
 	jmp	.L5
 .L6:	
-	ldk.l	$sp,_stack
+	ldk.l	$sp,stack
 	call	main
-_exit:
+	nop
+exit:
 	jmp	.
