2021/07/13 18:34

I executed `ld-new' (ft32-elf-ld) under control of `gdb' and
when it updated the relocation, changed 0x104 to 0x004 from `gdb' command line.
then, it generated:

a.out.fake-ld-new

% ft32-elf-addr2line -a 0x100 0x104 0x108 0x10c -e a.out.fake-ld-new
0x00000100
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.ft32-elf/gas/a.S:3
0x00000104
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.ft32-elf/gas/a.S:4
0x00000108
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.ft32-elf/gas/a.S:5
0x0000010c
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.ft32-elf/gas/a.S:7
%

Above was what I expected.

% ft32-elf-objdump -g a.out.fake-ld-new

 Line Number Statements:
  [0x00000024]  Extended opcode 2: set Address to 0x100
  [0x0000002b]  Special opcode 7: advance Address by 0 to 0x100 and Line by 2 to 3
  [0x0000002c]  Advance Line by 1 to 4
  [0x0000002e]  Advance PC by fixed size amount 4 to 0x104
  [0x00000031]  Copy (view 1)
  [0x00000032]  Advance Line by 1 to 5
  [0x00000034]  Advance PC by fixed size amount 4 to 0x108
  [0x00000037]  Copy (view 2)
  [0x00000038]  Advance Line by 2 to 7
  [0x0000003a]  Advance PC by fixed size amount 4 to 0x10c
  [0x0000003d]  Copy (view 3)
  [0x0000003e]  Advance PC by fixed size amount 4 to 0x110
  [0x00000041]  Extended opcode 1: End of Sequence

And above was also what I expected. But

When ft32-elf-gdb read a.out.fake-ld-new, ft32-elf-gdb did not work
at `find_pc_sect_line' which was already examined:

(gdb) p len
$20 = 4
(gdb) p first[0]
$21 = {line = 1, is_stmt = 1, pc = 4}
(gdb) p first[1]
$22 = {line = 2, is_stmt = 1, pc = 8}
(gdb) p first[2]
$23 = {line = 4, is_stmt = 1, pc = 12}
(gdb) p first[3]
$24 = {line = 0, is_stmt = 1, pc = 16}
(gdb)
