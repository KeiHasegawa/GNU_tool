*** gdb-10.2.org/gdb/ft32-tdep.c	2021-04-25 13:06:26.000000000 +0900
--- gdb-10.2.ft32-elf/gdb/ft32-tdep.c	2021-12-28 10:40:19.000000000 +0900
***************
*** 417,424 ****
  		   struct type *valtype, struct regcache *regcache,
  		   gdb_byte *readbuf, const gdb_byte *writebuf)
  {
!   if (TYPE_LENGTH (valtype) > 8)
!     return RETURN_VALUE_STRUCT_CONVENTION;
    else
      {
        if (readbuf != NULL)
--- 417,431 ----
  		   struct type *valtype, struct regcache *regcache,
  		   gdb_byte *readbuf, const gdb_byte *writebuf)
  {
!   if (TYPE_LENGTH (valtype) > 8) {
!     if (readbuf) {
!       ULONGEST addr;
!       regcache_raw_read_unsigned (regcache, FT32_R0_REGNUM, &addr);
!       addr |= 0x00800000;
!       read_memory (addr, readbuf, TYPE_LENGTH(valtype));
!     }
!     return RETURN_VALUE_ABI_RETURNS_ADDRESS;
!   }
    else
      {
        if (readbuf != NULL)
***************
*** 551,556 ****
--- 558,604 ----
    ft32_frame_base_address
  };
  
+ static void set_arg(int nth, value* arg, regcache* rc, CORE_ADDR sp)
+ {
+   auto val = value_contents(arg);
+   if (nth < 6) {
+     CORE_ADDR regval = extract_unsigned_integer(val, 4, BFD_ENDIAN_LITTLE);
+     regcache_cooked_write_unsigned(rc, FT32_R0_REGNUM+nth, regval);
+     return;
+   }
+   CORE_ADDR addr = sp + 4 + 4 * (nth - 6);
+   write_memory(addr | 0x800000, val, 2);
+ }
+ 
+ #include <utility>
+ 
+ static CORE_ADDR
+ ft32_push_dummy_call(gdbarch* arch, value* func, regcache* rc,
+ 		     CORE_ADDR bp_addr, int nargs, value** argv, CORE_ADDR sp,
+ 		     function_call_return_method rm,
+ 		     CORE_ADDR struct_addr)
+ {
+   using namespace std;
+   if (sp & 3)
+     sp &= 0xfffffffc;
+   sp -= 4;
+   union {
+     uint32_t i;
+     gdb_byte c[4];
+   } u = { bp_addr };
+   int x = 1;
+   if (!*(char*)&x) {
+     // gdb runs at a big endian processor
+     swap(u.c[0], u.c[3]);
+     swap(u.c[1], u.c[2]);
+   }
+   write_memory(sp | 0x800000, &u.c[0], 4);
+   for (int i = 0 ; i != nargs ; ++i)
+     set_arg(i, argv[i], rc, sp);
+   regcache_cooked_write_unsigned(rc, FT32_SP_REGNUM, sp);
+   return sp;
+ }
+ 
  /* Allocate and initialize the ft32 gdbarch object.  */
  
  static struct gdbarch *
***************
*** 611,616 ****
--- 659,666 ----
    set_gdbarch_address_class_type_flags_to_name
      (gdbarch, ft32_address_class_type_flags_to_name);
  
+   set_gdbarch_push_dummy_call(gdbarch, ft32_push_dummy_call);
+   
    return gdbarch;
  }
  
