AARCH64(ARM64) start-up routine

Before we develop AARCH64 start-up routine, it's necessary to fix
AARCH64 simulator described at "AARCH64 simulator break-point".

And more, it's also necessary to fix AARCH64 simulator like below:

gdb-10.2.aarch64-elf/sim/aarch64/interp.c:223

#if 0      
      val = aarch64_get_reg_u64 (cpu, regno, 0);
#else
      val = aarch64_get_reg_u64 (cpu, regno, 1);
#endif      
      break;

By above fix, we can display sp register correctly.


And more, I noticed that `strlen' did not work. Simply,
I compile-outed below:

newlib-4.1.0.aarch64-elf/newlib/libc/machine/aarch64/strlen.S

and re-build newlib.

On this condition, I aimed start-up routine which could call main function
of hello world program. The start-up routine becomes:

start.S

This is just setting sp register to the stack area.

At this simulation, _fstat, _sbrk, _isatty, _write and strlen are called.
They are defined at:

dummy.c

And also defined below for link:

_exit, _close, _lseek, _read

Now when `_write' break-point is hit, 

(aarch64-elf-gdb) p buf

then you can confirm that it's points  "hello world\n"

The results are:

% aarch64-elf-gdb -q -x gdbcom hello.elf

Reading symbols from hello.elf...
Connected to the simulator.
Loading section .text, size 0x4870 lma 0x400000
Loading section .rodata, size 0x20 lma 0x404870
Loading section .data, size 0xf70 lma 0x414890
Start address 0x400000
Transfer rate: 180224 bits in <1 sec.
Breakpoint 1 at 0x400018: file hello.c, line 5.
Breakpoint 2 at 0x400170: file dummy.c, line 46.
Breakpoint 3 at 0x40000c: file start.S, line 8.

Breakpoint 1, main () at hello.c:5
5	  printf("hello world\n");
Dump of assembler code for function main:
   0x0000000000400010 <+0>:	stp	x29, x30, [sp, #-16]!
   0x0000000000400014 <+4>:	mov	x29, sp
=> 0x0000000000400018 <+8>:	adrp	x0, 0x404000 <_free_r+1252>
   0x000000000040001c <+12>:	add	x0, x0, #0x870
   0x0000000000400020 <+16>:	bl	0x4002cc <puts>
   0x0000000000400024 <+20>:	mov	w0, #0x0                   	// #0
   0x0000000000400028 <+24>:	ldp	x29, x30, [sp], #16
   0x000000000040002c <+28>:	ret
End of assembler dump.

Breakpoint 2, _write (fd=1, buf=0x415870 "hello world\n", len=12)
    at dummy.c:46
46	  return len;
$1 = 0x415870 "hello world\n"

Breakpoint 3, end () at start.S:8
8		nop
A debugging session is active.

	Inferior 1 [process 42000] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
