About target simulator

M-x gdb
(gdb) cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/test_h8300/
(gdb) run -q -x gdbcom hello.elf
Starting program: /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gdb-10.2.h8300-elf/gdb/gdb -q -x gdbcom hello.elf
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/libthread_db.so.1".
warning: File "/usr/local/lib/libstdc++.so.6.0.28-gdb.py" auto-loading has been declined by your `auto-load safe-path' set to "$debugdir:$datadir/auto-load".
[Detaching after vfork from child process 4372]
[New Thread 0xb7733b70 (LWP 4373)]
[New Thread 0xb6f32b70 (LWP 4374)]
Reading symbols from hello.elf...
Connected to the simulator.
Loading section .init, size 0xa vma 0x100
Loading section .text, size 0x30e6 vma 0x10c
Loading section .fini, size 0x6 vma 0x31f2
Loading section .rodata, size 0x28 vma 0x31f8
Loading section .eh_frame, size 0x4 vma 0x3220
Loading section .ctors, size 0x4 vma 0x3224
Loading section .dtors, size 0x4 vma 0x3228
Loading section .data, size 0x46c vma 0x322c
Start address 0x10c
Transfer rate: 109744 bits in <1 sec.
hello world
[Inferior 1 (process 42000) exited normally]
[Thread 0xb6f32b70 (LWP 4374) exited]
[Thread 0xb7733b70 (LWP 4373) exited]
[Inferior 1 (process 4307) exited normally]
(gdb)

gdb works well, where gdbcom is likeb below: 

set prompt (h8300-elf-gdb) 
target sim
load
run
quit

1st command about prompt does not reflect on the log, but it enable us
to distinguish debugged gdb and debugging gdb.

When gdb is executed, before executing command, below function is called:

void
initialize_all_files (void)
{
  _initialize_h8300_tdep ();   // Initialization depending on the target

For example:

      o Target is big endian or little endian
      o How many and what registers exist.
      o How many bytes for `int' or `long'

and so on. Actually, this function just registers a function which really
initialize above stuff.

(*1) `target sim' command

main.c:1214
gdb command file specified with `-x' option is handled at below part:

	case CMDARG_FILE:
	  ret = catch_command_errors (source_script, cmdarg_p.string,
				      !batch_flag);
	  break;

By step execution, you may understand that commands written at command
file are handled at below part:

top.c:449
  while (ui->instream != NULL && !feof (ui->instream))
    {
      const char *command;

      /* Get a command-line.  This calls the readline package.  */
      command = command_line_input (NULL, NULL);
      if (command == NULL)
	break;
      command_handler (command);    // Here, handled
    }

`target sim' command is 2nd command at this time. Similary by step exectuion,
you may reach to below:

target.c:230
/* This is used to implement the various target commands.  */

static void
open_target (const char *args, int from_tty, struct cmd_list_element *command)
{
  auto *ti = static_cast<target_info *> (get_cmd_context (command));
  target_open_ftype *func = target_factories[ti];


And more, by step execution, you may reach to below:

static void
gdbsim_target_open (const char *args, int from_tty)
{
...

remote-sim.c:741
  gdbsim_desc = sim_open (SIM_OPEN_DEBUG, &gdb_callback, exec_bfd, sim_argv);

Above function is independent of target processor. On the other hand,
called function is:

gdb-10.2/sim/h8300/compile.c:4825

SIM_DESC
sim_open (SIM_OPEN_KIND kind, 
	  struct host_callback_struct *callback, 
	  struct bfd *abfd, 
	  char * const *argv)
{

And this function deals with H8 own stuff. When returning this function,
the message will be displayed by:

  printf_filtered ("Connected to the simulator.\n");

(*2) `load' command

Similary with `target sim' command, you may reach to:

gdb-10.2/sim/h8300/compile.c:4916

SIM_RC
sim_load (SIM_DESC sd, const char *prog, bfd *abfd, int from_tty)
{

This function loads memory contents into target memory.
Directly, a file name is passed as a argument `prog'. So
open the file, and inspect the section to load.

(*3) `run' command

Similary with `target sim' command or `load' command, you may reach to
below:

gdb-10.2/sim/h8300/compile.c:5002

SIM_RC
sim_create_inferior (SIM_DESC sd, struct bfd *abfd,
		     char * const *argv, char * const *env)
{

At this function, mainly set program counter.

The part of simulate instruction execution is:

gdb-10.2/sim/h8300/compile.c:4523

void
sim_engine_run (SIM_DESC sd,
		int next_cpu_nr,  /* ignore  */
		int nr_cpus,      /* ignore  */
		int siggnal)
{


Note:
While debugging gdb built with -g3 option, linux hang up. I had to
restart linux. I guessed that gdb leaks memory. But I think the problem
is that linux can not handle this process error. Is not possible?

`top' or `ps' command may help us.
