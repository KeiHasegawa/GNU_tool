gcc target specific part investigation

Roughly say, `insn-recog.c' is generated like below:

build/genrecog ../.././gcc/common.md ../.././gcc/config/cr16/cr16.md > insn-recog.c

wheree, `build/genrecog' is a tool which generates notable part:

            case E_DImode:
              if (pattern0 (x2) != 0)
                return -1;
              return 6; /* adddi3 */

I build `build/genrecog' with -O0 option and confirmed that
it also genereated the same part.

At `cr16.md', "adddi3" string appeared at:

;; Addition-Subtraction "adddi3/subdi3" insns.
(define_insn "<plusminus_insn>di3"
  [(set (match_operand:DI 0 "register_operand" "=r")
	(plusminus:DI (match_operand:DI 1 "register_operand" "<comm>0")
		      (match_operand:DI 2 "register_operand" "r")))]
  ""
  {
    return cr16_emit_add_sub_di (operands, <plusminus_flag>);
  })

(define_insn "addsi3"
  [(set (match_operand:SI 0 "register_operand" "=r,r,r,r,r")
	(plus:SI (match_operand:SI 1 "register_operand" "%0,0,0,0,0")
		 (match_operand:SI 2 "reg_si_int_operand" "r,M,N,O,i")))]
  ""
  "addd\t%2, %0"
  [(set_attr "length" "2,2,4,4,6")]
)

And I guessed that 2nd was notable.

I execute `genrecog' under control gdb.

(gdb) run a.txt

then

a.txt: No such file or directory

above error message was displayed and also outputed C++ program to standard
output. Again after I created a.txt as empty file, execute samely.
`genrecog' generated like below:

int
recog (rtx x1 ATTRIBUTE_UNUSED,
	rtx_insn *insn ATTRIBUTE_UNUSED,
	int *pnum_clobbers ATTRIBUTE_UNUSED)
{
  rtx * const operands ATTRIBUTE_UNUSED = &recog_data.operand[0];
  int res ATTRIBUTE_UNUSED;
  recog_data.insn = NULL;
  return -1;
}

rtx_insn *
split_insns (rtx x1 ATTRIBUTE_UNUSED, rtx_insn *insn ATTRIBUTE_UNUSED)
{
  rtx * const operands ATTRIBUTE_UNUSED = &recog_data.operand[0];
  rtx_insn *res ATTRIBUTE_UNUSED;
  recog_data.insn = NULL;
  return NULL;
}

rtx_insn *
peephole2_insns (rtx x1 ATTRIBUTE_UNUSED,
	rtx_insn *insn ATTRIBUTE_UNUSED,
	int *pmatch_len_ ATTRIBUTE_UNUSED)
{
  rtx * const operands ATTRIBUTE_UNUSED = &recog_data.operand[0];
  rtx_insn *res ATTRIBUTE_UNUSED;
  recog_data.insn = NULL;
  return NULL;
}

I guessed that this might be like a template.

Now, the input file grammer is like a Lisp. For example

gcc-10.2.0/gcc/common.md

At abvoe file, thre is the declaration or definition like below:

(define_register_constraint "r" "GENERAL_REGS"
  "Matches any general register.")

I tried to wirte just above into `a.txt' and execute `genrecog'
then confirmed that there was no change in output. Just above
is not enough to recognize the difference.

I guessed that above works at the context which constrains something
like below:

"r"

means just accespt

"GENERAL_REGS"

If this is true,

(define_insn "addsi3"
  [(set (match_operand:SI 0 "register_operand" "=r,r,r,r,r")
	(plus:SI (match_operand:SI 1 "register_operand" "%0,0,0,0,0")
		 (match_operand:SI 2 "reg_si_int_operand" "r,M,N,O,i")))]
  ""
  "addd\t%2, %0"
  [(set_attr "length" "2,2,4,4,6")]
)

For above,

"=r,r,r,r,r"

and

"r,M,N,O,i"

are related with the declaration. There are other constrains at

gcc-10.2.0/gcc/common.md

(define_constraint "i"
  "Matches a general integer constant."
  (and (match_test "CONSTANT_P (op)")
       (match_test "!flag_pic || LEGITIMATE_PIC_OPERAND_P (op)")))

Samely, there are "M", "N" and "O" constrains. I found at

gcc-10.2.0/gcc/config/cr16/cr16.md

at a head of above:

(include "predicates.md")
(include "constraints.md")

gcc-10.2.0/gcc/config/cr16/constraints.md:

(define_constraint "M"
  "A unsigned and customized  4-bit immediate."
  (and (match_code "const_int")
       (match_test "(IN_RANGE_P (ival, 0, 15) && ((ival != 9) && (ival != 11)))")))

(define_constraint "N"
  "A signed 16-bit immediate."
  (and (match_code "const_int")
       (match_test "IN_RANGE_P (ival, -32768, 32767)")))

(define_constraint "O"
  "A unsigned 20-bit immediate."
  (and (match_code "const_int")
       (match_test "IN_RANGE_P (ival, 0, 1048575)")))

Then I noticed that

"r,M,N,O,i"

were correspond to

"2,2,4,4,6"

Now,

   29: sp:SI=sp:SI+0xfffffffc

is not corrspond to anything. I guessed that abvoe should be

   29: sp:SI=sp:SI-0x4

Then it handled correctly with the same way with the previous `insn'

   28: sp:SI=sp:SI-0x6

Then I thought that some rule should not be added into:


(define_insn "addsi3"
  [(set (match_operand:SI 0 "register_operand" "=r,r,r,r,r")
	(plus:SI (match_operand:SI 1 "register_operand" "%0,0,0,0,0")
		 (match_operand:SI 2 "reg_si_int_operand" "r,M,N,O,i")))]
  ""
  "addd\t%2, %0"
  [(set_attr "length" "2,2,4,4,6")]
)

I noticed that

sp = sp + 0xfffffffc

was created at below:

gcc-10.2.0.cr16-elf/gcc/emit-rtl.c:

    default:
      last = make_insn_raw (x);
      add_insn (last);           // Here
      break;

This was called from:

      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
				    GEN_INT (-current_frame_info.total_size)));
      RTX_FRAME_RELATED_P (insn) = 1;

That is, ..., I decided to fix like below:

#if 0
      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
				    GEN_INT (-current_frame_info.total_size)));
#else
      insn = emit_insn (gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx,
				    GEN_INT (current_frame_info.total_size)));
#endif

And confirmed the instrcution except for

0x0000010e <+2>:	addd	$0xfffc:m,(sp)

I expected  subd(?) instruction was generated. But not. Above fix was NG.

Next,

(*A)
#if 0      
      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
				    GEN_INT (-current_frame_info.total_size)));
#else
      int n = -current_frame_info.total_size;
      n &= 0xffff;
      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
				    GEN_INT (n)));
#endif

I tried above. this generates

	addd	$65532, (sp)

except for

	addd	$0xfffc:m,(sp)

where, 65532 = 0xfffc. Then I thought it worked well, but not.
I noticed that the instruction diffenret:

(Correct)
0000010c <_main>:
     10c:	9d 01       	push	$0x2,r13,RA
     10e:	bf 60 fc ff 	addd	$0xfffc:m,(sp)


(Incorrect)
0000010c <_main>:
     10c:	9d 01       	push	$0x2,r13,RA
     10e:	f0 04 fc ff 	addd	$0xfffc:m,(sp)

The object code is different between above. That is

(Correct)
        addd	$0xfffc:m,(sp)

(Incorrect)
	addd	$65532, (sp)

(*A) fix was NG.

I confrimed acutal `cc1' outputs:

(Correct)
	addd	$-4, (sp)

(Incorrect)
	addd	$65532, (sp)


Then I finally got below:

(*B)

#if 0
      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
				    GEN_INT (-current_frame_info.total_size)));
#else      
      long long int n = current_frame_info.total_size;
      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,
				    GEN_INT (-n)));
#endif      

By (*B) fix, `cc1' generated 

	addd	$-4, (sp)

And below check was passed

            case E_DImode:
              if (pattern0 (x2) != 0)
                return -1;
              return 6; /* adddi3 */

I could confirmed that new `cc1' worked well.
