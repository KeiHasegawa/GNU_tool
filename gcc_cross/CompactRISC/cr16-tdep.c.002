#include "defs.h"
#include "value.h"
#include "arch-utils.h"
#include "regcache.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "dis-asm.h"
#include "dwarf2/frame.h"
#include "frame-base.h"
#include "frame-unwind.h"
#include "trad-frame.h"
#include <numeric>
#include <cassert>

static int cr16_register_sim_regno(gdbarch*, int regno)
{
  return regno;
}

static int cr16_dbg_reg_to_regnum(gdbarch*, int regno)
{
  return regno;
}

const int pc_regno = 16;
const int sp_regno = 15;

static const char* cr16_register_name(gdbarch*, int regno)
{
  if (regno == sp_regno)
    return "sp";

  if (regno < 16) {
    static const char* name[] = {
      "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
      "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"};
    return name[regno];
  }

  int n = regno - 16;
  if (n < 16) {
    static const char* name[] = {
      "pc", "bds", "bsr", "dcr", "x4", "car0", "r6", "car1",
      "x8", "cfg", "psr", "intbase", "x12", "isp", "x14", "usp"};
    return name[n];
  }
  
  return 0;
}

static void
cr16_extract_return_value(type* valtype, regcache* regs, gdb_byte *valbuf)
{
  int len = TYPE_LENGTH(valtype);
  assert(len == 2 || len == 4 || len == 8);
  for (int regno = 0 ; len ; len -= 2, ++regno, valbuf += 2) {
    ULONGEST tmp;
    regcache_cooked_read_unsigned(regs, regno, &tmp);
    store_unsigned_integer(valbuf, 2, BFD_ENDIAN_LITTLE, tmp);
  }
}

static return_value_convention
cr16_return_value(gdbarch*, value* function, type* valtype, regcache* regcache,
		  gdb_byte *readbuf, const gdb_byte *writebuf)
{
  auto code = valtype->code();
  switch (code) {
  case TYPE_CODE_STRUCT: case TYPE_CODE_UNION: case TYPE_CODE_ARRAY:
    if (readbuf) {
      ULONGEST r0;
      regcache_raw_read_unsigned(regcache, 0, &r0);
      ULONGEST r1;
      regcache_raw_read_unsigned(regcache, 1, &r1);
      ULONGEST addr = (r1 << 8) | r0;
      read_memory(addr, readbuf, TYPE_LENGTH(valtype));
    }
    return RETURN_VALUE_ABI_RETURNS_ADDRESS;
  }

  if (writebuf)
    asm("int3");

  if (readbuf)
    cr16_extract_return_value(valtype, regcache, readbuf);
  
  return RETURN_VALUE_REGISTER_CONVENTION;
}


static type* cr16_register_type(gdbarch* gdbarch, int regno)
{
  switch (regno) {
  case pc_regno: return builtin_type(gdbarch)->builtin_func_ptr;
  case 12: case 13:
  case 14: case 15: /* sp_regno = 15 */
    return builtin_type(gdbarch)->builtin_data_ptr;
  default:       return builtin_type(gdbarch)->builtin_int16;
  }
}

inline void
register_info(gdbarch* gdbarch, ui_file* file, frame_info* frame, int regno)
{
  const char* name = cr16_register_name(gdbarch, regno);
  uint32_t value = frame_unwind_register_unsigned(frame, regno);
  type* x = builtin_type(gdbarch)->builtin_int16;
  type* y = cr16_register_type(gdbarch, regno);
  if (x == y)
    fprintf_filtered (file, "%s\t0x%04x\t%d\n", name, value, value);
  else
    fprintf_filtered (file, "%s\t0x%08x\t%d\n", name, value, value);
}

static void
cr16_print_registers_info(gdbarch* gdbarch, ui_file* file,
			  frame_info* frame, int regno, int cpregs)
{
  if (regno >= 0)
    return register_info(gdbarch, file, frame, regno);

  int N = gdbarch_num_regs(gdbarch);
  for (int i = 0 ; i != N ; ++i)
    register_info(gdbarch, file, frame, i);
}

static CORE_ADDR cr16_skip_prologue(gdbarch*, CORE_ADDR pc)
{
  CORE_ADDR func_addr, func_end;
  if (!find_pc_partial_function (pc, nullptr, &func_addr, &func_end))
    return pc;
  
  symtab_and_line sal = find_pc_line (func_addr, 0);
  if (sal.end && sal.end < func_end)
    return sal.end;

  return pc;
}

struct cr16_frame {
  bool available;
  CORE_ADDR pc;
  CORE_ADDR prev_sp;
  struct prologue_t {
    CORE_ADDR start;
    CORE_ADDR end;
  } prologue;
  trad_frame_saved_reg saved_reg[32];
};

inline int init_saved_reg(int no, trad_frame_saved_reg& sr)
{
  sr.addr = -1;
  sr.realreg = no;
  return no + 1;
}

inline bool canbe_prologue_start(uint32_t insn)
{
  if (insn == 0x0aee) { // jump	(ra)
    return true;
  }

  if (insn == 0x019d) { // push	$0x2,r13,RA
    return true;
  }

  if (insn == 0x011d) { // push	$0x2,r13
    return true;
  }

  return false;
}

inline bool instruction(uint32_t inst)
{
  if (!inst)
    return false;  // WA
  return true;
}

static cr16_frame* cr16_frame_create(frame_info* frame)
{
  using namespace std;
  auto ret = new cr16_frame;
  int N = sizeof ret->saved_reg/sizeof ret->saved_reg[0];
  accumulate(&ret->saved_reg[0], &ret->saved_reg[N], 0, init_saved_reg);
  ret->pc = get_frame_pc(frame);
  ret->prev_sp = get_frame_sp(frame);
  auto block_addr = get_frame_address_in_block(frame);  
  bool found = find_pc_partial_function(block_addr, nullptr,
					&ret->prologue.start,
					&ret->prologue.end);
  if (!found) {
    ret->available = false;    
    ret->prologue.start = ret->prologue.end = ret->pc;
    return ret;
  }
  ret->available = true;
  for (auto addr = ret->prologue.start ; ; addr -= 2) {
    uint32_t insn = read_memory_unsigned_integer(addr, 2, BFD_ENDIAN_LITTLE);
    if (canbe_prologue_start(insn)) {
      ret->prologue.start = addr;
      return ret;
    }
    if (!instruction(insn)) {
      ret->prologue.start = addr + 2;
      return ret;
    }
  }
}

static void cr16_frame_this_id(frame_info* frame, void **ptr, frame_id* id)
{
  auto pf = reinterpret_cast<cr16_frame*>(*ptr);
  if (!pf)
    *ptr = pf = cr16_frame_create(frame);
  
  if (!pf->available)
    *id = frame_id_build_unavailable_stack(pf->prologue.start);
  else
    *id = frame_id_build(pf->prev_sp, pf->prologue.start);
}

static value*
cr16_frame_prev_register(frame_info* frame, void **ptr, int regno)
{
  if (regno == sp_regno) {
    auto sp = get_frame_sp(frame);
    return frame_unwind_got_constant(frame, regno, sp);
  }

  if (regno == pc_regno) {
    auto ra = frame_unwind_register_unsigned(frame, 14);
    return frame_unwind_got_constant(frame, regno, ra << 1);
  }

  auto pf = reinterpret_cast<cr16_frame*>(*ptr);
  if (!pf)
    *ptr = pf = cr16_frame_create(frame);
  return trad_frame_get_prev_register(frame, &pf->saved_reg[0], regno);
}

static struct frame_unwind cr16_frame_unwind = {
  NORMAL_FRAME,
  default_frame_unwind_stop_reason,
  cr16_frame_this_id,
  cr16_frame_prev_register,
  nullptr,
  default_frame_sniffer
};

static CORE_ADDR cr16_frame_base_address(frame_info* frame, void **ptr)
{
  asm("int3");
  return 0;
}

static struct frame_base cr16_frame_base = {
  &cr16_frame_unwind,
  cr16_frame_base_address,
  cr16_frame_base_address,
  cr16_frame_base_address
};

static int cr16_kind_from_pc(gdbarch*, CORE_ADDR*)
{
  return 0;
}

static const unsigned char* cr16_from_kind(gdbarch*, int, int* size)
{
  static unsigned char break_inst[] = { 0xc8, 0x00 };
  *size = sizeof break_inst;
  return &break_inst[0];
}

static CORE_ADDR
cr16_push_dummy_call(gdbarch*, value*,
		     regcache*, CORE_ADDR,
		     int , value **, CORE_ADDR,
		     function_call_return_method,
		     CORE_ADDR)
{
  asm("int3");
  return 0;
}

static value* cr16_dwarf2_prev_register(frame_info *frame, void **, int regno)
{
  assert(regno == pc_regno);
  auto ra = frame_unwind_register_unsigned(frame, 14);
  return frame_unwind_got_constant(frame, regno, ra << 1);
}

static void
cr16_dwarf2_frame_init_reg(gdbarch*, int regno, dwarf2_frame_state_reg* reg,
			   frame_info* frame)
{
#if 0  
  if (regno != pc_regno)
    return;
  reg->how = DWARF2_FRAME_REG_FN;
  reg->loc.fn = cr16_dwarf2_prev_register;
#else
  switch (regno) {
  case pc_regno:
    reg->how = DWARF2_FRAME_REG_FN;
    reg->loc.fn = cr16_dwarf2_prev_register;
    return;
  case sp_regno:
    reg->how = DWARF2_FRAME_REG_CFA;
    return;
  }
#endif  
}

static gdbarch* cr16_gdbarch_init(gdbarch_info info, gdbarch_list*)
{
  gdbarch *gdbarch = gdbarch_alloc (&info, 0);

  set_gdbarch_num_regs(gdbarch, 32);
  set_gdbarch_register_type(gdbarch, cr16_register_type);
  set_gdbarch_register_sim_regno(gdbarch, cr16_register_sim_regno);
  set_gdbarch_dwarf2_reg_to_regnum(gdbarch, cr16_dbg_reg_to_regnum);
  set_gdbarch_stab_reg_to_regnum(gdbarch, cr16_dbg_reg_to_regnum);
  set_gdbarch_register_name(gdbarch, cr16_register_name);

  set_gdbarch_pc_regnum(gdbarch, pc_regno);
  set_gdbarch_sp_regnum(gdbarch, sp_regno);
  set_gdbarch_print_registers_info(gdbarch, cr16_print_registers_info);

  set_gdbarch_ptr_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_addr_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_return_value(gdbarch, cr16_return_value);

  set_gdbarch_skip_prologue (gdbarch, cr16_skip_prologue);
  frame_base_set_default (gdbarch, &cr16_frame_base);
  dwarf2_append_unwinders(gdbarch);
  frame_unwind_append_unwinder(gdbarch, &cr16_frame_unwind);

  set_gdbarch_inner_than (gdbarch, core_addr_lessthan);
  set_gdbarch_breakpoint_kind_from_pc(gdbarch, cr16_kind_from_pc);
  set_gdbarch_sw_breakpoint_from_kind(gdbarch, cr16_from_kind);
  set_gdbarch_push_dummy_call(gdbarch, cr16_push_dummy_call);

  set_gdbarch_char_signed(gdbarch, 0);
  set_gdbarch_int_bit(gdbarch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_long_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_long_bit (gdbarch, 8 * TARGET_CHAR_BIT);

  set_gdbarch_wchar_signed(gdbarch, 0);
  set_gdbarch_wchar_bit(gdbarch, 2 * TARGET_CHAR_BIT);

  set_gdbarch_double_bit(gdbarch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_double_format(gdbarch, floatformats_ieee_double);
  set_gdbarch_long_double_bit(gdbarch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_long_double_format(gdbarch, floatformats_ieee_double);

  set_gdbarch_believe_pcc_promotion(gdbarch, 1);

  dwarf2_frame_set_init_reg(gdbarch, cr16_dwarf2_frame_init_reg);
 
  return gdbarch;
}

void _initialize_cr16_tdep();
void
_initialize_cr16_tdep()
{
  register_gdbarch_init(bfd_arch_cr16, cr16_gdbarch_init);
}

