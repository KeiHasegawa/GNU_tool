#include "defs.h"
#include "value.h"
#include "arch-utils.h"
#include "regcache.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "dis-asm.h"
#include "dwarf2/frame.h"
#include "frame-base.h"
#include "frame-unwind.h"

static int
cr16_register_sim_regno(struct gdbarch *gdbarch, int regnum)
{
  return regnum;
}

static int
cr16_dbg_reg_to_regnum(struct gdbarch *gdbarch, int regnum)
{
  return regnum;
}

const int pc_regno = 16;
const int sp_regno = 15;

static const char*
cr16_register_name (struct gdbarch *gdbarch, int regno)
{
  if (regno == sp_regno)
    return "sp";
  
  if (regno < 16) {
    static const char* name[] = {
      "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
      "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"};
    return name[regno];
  }

  int n = regno - 16;
  if (n < 16) {
    static const char* name[] = {
      "pc", "bds", "bsr", "dcr", "x4", "car0", "r6", "car1",
      "x8", "cfg", "psr", "intbase", "x12", "isp", "x14", "usp"};
    return name[n];
  }
  
  return 0;
}

static enum return_value_convention
cr16_return_value (struct gdbarch *gdbarch, struct value *function,
		    struct type *type, struct regcache *regcache,
		    gdb_byte *readbuf, const gdb_byte *writebuf)
{
  asm("int3");
  return return_value_convention(0);
}

static struct type*
cr16_register_type(struct gdbarch* gdbarch, int regno)
{
  switch (regno) {
  case pc_regno: return builtin_type(gdbarch)->builtin_func_ptr;
  case sp_regno: return builtin_type(gdbarch)->builtin_data_ptr;
  default:       return builtin_type(gdbarch)->builtin_int32;
  }
}

static void
cr16_print_registers_info(struct gdbarch* gdbarch, struct ui_file* file,
			   struct frame_info* frame, int regno, int cpregs)
{
  fprintf_filtered (file, "%s at %s:%d called\n", __func__, __FILE__, __LINE__);
}

static CORE_ADDR
cr16_skip_prologue(struct gdbarch *gdbarch, CORE_ADDR pc)
{
  CORE_ADDR func_addr, func_end;
  if (!find_pc_partial_function (pc, nullptr, &func_addr, &func_end))
    return pc;
  
  symtab_and_line sal = find_pc_line (func_addr, 0);
  if (sal.end && sal.end < func_end)
    return sal.end;

  return pc;
}

static void
cr16_frame_this_id (struct frame_info *this_frame, void **this_cache,
		     struct frame_id *this_id)
{
}

static struct value*
cr16_frame_prev_register(struct frame_info *this_frame, void **this_cache,
			  int regnum)
{
  asm("int3");
  return 0;
}

static struct frame_unwind cr16_frame_unwind = {
  NORMAL_FRAME,
  default_frame_unwind_stop_reason,
  cr16_frame_this_id,
  cr16_frame_prev_register,
  nullptr,
  default_frame_sniffer
};

static CORE_ADDR
cr16_frame_base_address (struct frame_info *this_frame, void **this_cache)
{
  asm("int3");
  return 0;
}

static struct frame_base cr16_frame_base = {
  &cr16_frame_unwind,
  cr16_frame_base_address,
  cr16_frame_base_address,
  cr16_frame_base_address
};

static
int cr16_kind_from_pc(struct gdbarch* gdbarch, CORE_ADDR* addr)
{
  return 0;
}

static
const unsigned char* cr16_from_kind(gdbarch* handle, int kind, int* size)
{
  static unsigned char break_inst[] = { 0xc8, 0x00 };
  *size = sizeof break_inst;
  return &break_inst[0];
}

static CORE_ADDR
cr16_push_dummy_call(struct gdbarch *gdbarch, struct value *function,
		      struct regcache *regcache, CORE_ADDR bp_addr,
		      int nargs, struct value **args, CORE_ADDR sp,
		      function_call_return_method return_method,
		      CORE_ADDR struct_addr)
{
  asm("int3");
  return 0;
}

static struct gdbarch*
cr16_gdbarch_init(struct gdbarch_info info, struct gdbarch_list *arches)
{
  struct gdbarch *gdbarch = gdbarch_alloc (&info, 0);

  set_gdbarch_num_regs(gdbarch, 32);
  set_gdbarch_register_type(gdbarch, cr16_register_type);
  set_gdbarch_register_sim_regno(gdbarch, cr16_register_sim_regno);
  set_gdbarch_dwarf2_reg_to_regnum(gdbarch, cr16_dbg_reg_to_regnum);
  set_gdbarch_stab_reg_to_regnum(gdbarch, cr16_dbg_reg_to_regnum);
  set_gdbarch_register_name(gdbarch, cr16_register_name);

  set_gdbarch_pc_regnum(gdbarch, pc_regno);
  set_gdbarch_sp_regnum(gdbarch, sp_regno);
  set_gdbarch_print_registers_info(gdbarch, cr16_print_registers_info);

  set_gdbarch_ptr_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_addr_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_return_value(gdbarch, cr16_return_value);

  set_gdbarch_skip_prologue (gdbarch, cr16_skip_prologue);
  frame_base_set_default (gdbarch, &cr16_frame_base);
  dwarf2_append_unwinders(gdbarch);
  frame_unwind_append_unwinder(gdbarch, &cr16_frame_unwind);

  set_gdbarch_inner_than (gdbarch, core_addr_lessthan);
  set_gdbarch_breakpoint_kind_from_pc(gdbarch, cr16_kind_from_pc);
  set_gdbarch_sw_breakpoint_from_kind(gdbarch, cr16_from_kind);
  set_gdbarch_push_dummy_call(gdbarch, cr16_push_dummy_call);

  set_gdbarch_char_signed(gdbarch, 0);
  set_gdbarch_int_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_long_bit (gdbarch, 8 * TARGET_CHAR_BIT);

  set_gdbarch_wchar_signed(gdbarch, 0);
  set_gdbarch_wchar_bit(gdbarch, 2 * TARGET_CHAR_BIT);

  set_gdbarch_double_bit(gdbarch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_double_format(gdbarch, floatformats_ieee_double);
  set_gdbarch_long_double_bit(gdbarch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_long_double_format(gdbarch, floatformats_ieee_double);

  set_gdbarch_believe_pcc_promotion(gdbarch, 1);
 
  return gdbarch;
}

void _initialize_cr16_tdep();
void
_initialize_cr16_tdep()
{
  register_gdbarch_init(bfd_arch_cr16, cr16_gdbarch_init);
}

