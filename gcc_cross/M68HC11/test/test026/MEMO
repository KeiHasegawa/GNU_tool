int + int

	addd	11,y
	xgdx
	adcb	10,y
	adca	9,y

int - int

	subd	11,y
	xgdx
	sbcb	10,y
	sbca	9,y

という違いは勿論あるのだが,

*_.d1, *_.d2 が使用されている.

そして

(m68hc11-elf-gdb) info register

でこれらが表示されている.

*_.d1, *_.d2 が使用される理由を調査してみた.

f の先頭アドレスでは

x = 0x0000, d = 0x0005

         +------------+ 0xff4
	 |            | <- sp  
	 +------------+ 0xff6
	 |   0x105f   |
	 +------------+ 0xff8
	 |   0x0000   |
	 +------------+ 0xffa
	 |   0x000a   |
	 +------------+ 0xffc

のようになっている. 0x105f は f の戻りアドレスで main 函数で f を呼び出した次の
命令のアドレスになっている.

	ldy	*_.frame
	pshy
	pshx
	pshx
	sts	*_.frame

の実行により

         +------------+ 0xfee
	 |            | <- sp
         +------------+ 0xff0
	 |   ******   |
         +------------+ 0xff2
	 |   ******   |
         +------------+ 0xff4
	 |   0x0ffb   |
	 +------------+ 0xff6
	 |   0x105f   |
	 +------------+ 0xff8
	 |   0x0000   |
	 +------------+ 0xffa
	 |   0x000a   |
	 +------------+ 0xffc

になり *_.frame = 0xfef になる. 0x0ffb は f が呼び出される前の *_.frame の値.

続く

	ldy	*_.d1
	pshy
	ldy	*_.d2
	pshy

で *_.d1, *_d2 がスタックにプッシュされ以下のようになる

         +------------+ 0xfea
	 |            | <- sp
         +------------+ 0xfec
	 | *_.d2_{old}|
         +------------+ 0xfee
	 | *_.d1_{old}| <- *_.frame
         +------------+ 0xff0
	 |   ******   |
         +------------+ 0xff2
	 |   ******   |
         +------------+ 0xff4
	 |   0x0ffb   |
	 +------------+ 0xff6
	 |   0x105f   |
	 +------------+ 0xff8
	 |   0x0000   |
	 +------------+ 0xffa
	 |   0x000a   |
	 +------------+ 0xffc

続く

	ldy	*_.frame
	std	3,y
	stx	1,y

で引数 a が 0xff0 に保存される:

         +------------+ 0xfea
	 |            | <- sp
         +------------+ 0xfec
	 | *_.d2_{old}|
         +------------+ 0xfee
	 | *_.d1_{old}| <- *_.frame
         +------------+ 0xff0
	 |   0x0000   |
         +------------+ 0xff2
	 |   0x0005   |
         +------------+ 0xff4
	 |   0x0ffb   |
	 +------------+ 0xff6
	 |   0x105f   |
	 +------------+ 0xff8
	 |   0x0000   |
	 +------------+ 0xffa
	 |   0x000a   |
	 +------------+ 0xffc

続く

	ldy	*_.frame
	ldd	3,y
	std	*_.d2
	ldd	1,y
	std	*_.d1

により引数 a の下位 16 ビットが *_.d2 に上位 16 ビットが *_.d1 に保存される.

続く

	ldd	*_.d2
	ldx	*_.d1

により x = 0x0000, d = 0x0005 になる.


続く

	ldy	*_.frame
	subd	11,y

により引数 a の下位 16 ビットと引数 b の下位 16 ビットで減算が行なわれる.

続く
	xgdx
	sbcb	10,y
	sbca	9,y
	xgdx

により加算の場合(../test006)と同様に int の減算が完了する. と, ここまで
書いて気付くのだが *_.d1 や *_.d2 は必要ない. おそらく m68hc11-elf-gcc
の都合でこのようなコードが出ているのだろう.

