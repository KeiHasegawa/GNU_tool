hello world

I tried to execute "hello world" program.

While loading the program, I noticed that m68hc11 simulator
treated address 0x1000 - 0x103f as I/O space.

On the other hand, "hello world" program layout became like below:

+---------------+
|               |
+---------------+  0x00010
|  .softregs    |
+---------------+
|               |
+---------------+  0x00080
|   .text       |
|               |
|   .rodata     |
|               |  0x01000
|   .data     I/O area 
|               |
|               |
|               |
+---------------+  0x12c1d

This situation wa not good. Then I fixed like below:

+---------------+
|               |
+---------------+  0x00010
|  .softregs    |
+---------------+
|               |
|   .heap       |
|               |
|               |
|               |
|               |
+---------------+  0x00500
|   .stack      |
|               |
|               |
|               |
|               |
+---------------+  0x01000
|     I/O       |
+---------------+  0x01040
|   .text       |
|   .rodata     |
|   .data       |
|   .bss        |  0x08000
|               |
|               |
|               |
|               |
+---------------+  0x13bf0

But this was not enough. m68hc11 address space is

0x0000 - 0x8000

The "hello world" program was too big to load or execute.

I changed like below:

#include <stdio.h>

int main()
{
  puts("hello world");  // not call `printf'
  return 0;
}

Then I confirmed that program size was 0x5f4b bytes. So the result is:

% m68hc11-elf-as -o start.o -g start.S
% m68hc11-elf-gcc -o hello.o -g -c hello.c
% m68hc11-elf-gcc -o dummy.o -g -c dummy.c
% m68hc11-elf-ld -o hello.elf start.o hello.o dummy.o \
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/m68hc11-elf/lib/libc.a /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/lib/gcc/m68hc11-elf/3.4.4/libgcc.a -T hello.x -Map hello.map
% cat gdbcom.001
set prompt (m68k-elf-gdb) 
target sim
load
b end
b main
b write
command
c
end
run
disassemble
c
quit
% m68hc11-elf-gdb -q -x gdbcom.001 hello.elf 
Reading symbols from hello.elf...
Connected to the simulator.
Loading section .text, size 0x49fe lma 0x1040
Loading section .rodata, size 0x12 lma 0x5a3e
Loading section .rodata.str1.1, size 0x4 lma 0x5a50
Loading section .data, size 0x4f1 lma 0x5a54
Start address 0x1040
Transfer rate: 161832 bits in <1 sec.
Breakpoint 1 at 0x1047: file start.S, line 8.
Breakpoint 2 at 0x104d: file hello.c, line 5.
Breakpoint 3 at 0x1109: file dummy.c, line 27.

Breakpoint 2, main () at hello.c:5
5	  puts("hello world");
Dump of assembler code for function main:
   0x00001048 <+0>:	ldx	*0x16
   0x0000104a <+2>:	pshx
   0x0000104b <+3>:	sts	*0x16
=> 0x0000104d <+5>:	ldd	#0x5a3e
   0x00001050 <+8>:	jsr	0x121c <puts>
   0x00001053 <+11>:	clra
   0x00001054 <+12>:	clrb
   0x00001055 <+13>:	ldx	#0x0
   0x00001058 <+16>:	puly
   0x0000105a <+18>:	sty	*0x16
   0x0000105d <+21>:	rts
End of assembler dump.

Breakpoint 3, write (fd=1, buf=0x508 "hello world\n", len=12) at dummy.c:27
27	  return len;

Breakpoint 1, end () at start.S:8
8		nop
A debugging session is active.

	Inferior 1 [process 42000] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
%

`write' was called as I expected.



