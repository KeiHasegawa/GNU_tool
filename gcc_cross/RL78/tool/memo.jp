(*) 簡易版 printf

オペコードと機能の対応は以下:

0x0631 : exit(0) の呼び出し
0x1631 : printf
0x2631 : putsh
0x3631 : putchar

(*) 結果

2021.12.16.13.42
ISO_IEC_9899 1232/2835            # メモリを断片で確保
RL78/test 3/11

2021.12.20.14.29
ISO_IEC_9899.log 1605/2835	  # メモリを断片で確保(シミュレータを一部修正)
RL78/test 3/11

これは, 何だかレベルダウンしている. hello world のために入れた修正が良
くないらしい.

すぐに元に戻して改めて実行

2021.12.23.17.43
ISO_IEC_9899 1012/2835
RL78/test 3/12

ISO_IEC_9899 のテストで fail が前々回より減っている.
また ~/lang/53_GNU_tool/gcc_cross/RL78/test/test001/ は実は前々回も
fail していた.

2021.12.26.11.11
ISO_IEC_9899 1012/2835
RL78/test 2/11

2021.12.26.18.45             プログラムのロードの方法を修正して hello world
ISO_IEC_9899 1215/2835       を動作するようにしたが ISO_IEC_9899 で fail
RL78/test 4/15               の数が増加している

2021.12.27.07.10
ISO_IEC_9899 1012/2835       上の状態から一旦元に戻した.
RL78/test 4/15

2021..12.27.07.21
ISO_IEC_9899 1012/2835       sample.x の .rodata と .data の順を入れ替えた
RL78/test 4/15

プログラムのロードの方法を変更したときに pass していたものが fail する
テストは例えば

~/lang/41_ISO_IEC_9899/6_Language/1_Lexical_elements/2_Identifiers/0_Identifiers/1_ok/test011.c

でこのプログラムのレイアウトが

 39 .rodata       00000018  00002b1b  00002b1b  00002b1b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

のようになっていて 0x2b1b の LMA を 0xf2b1b に変換していることが原因.
さてそもそもこの変換は hello world が動作するために必要だったが...

2021.12.27.12.25
ISO_IEC_9899 1012/2835     hello world のためにロードの特別な方法を導入し
RL78/test 4/16             hello world だけこの方法でロードすることに
                           しているが釈然とはしていない.
