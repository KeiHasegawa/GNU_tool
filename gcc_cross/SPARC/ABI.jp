(*1) レジスタウィンドウに関する資料

	http://icps.u-strasbg.fr/people/loechner/public_html/enseignement/SPARC/sparcstack.html

	に説明がある. このページの Figure-1 を見るだけでも理解がだいぶ深まる.
	

(*2) レジスタ & レジスタウィンドウ

	プログラムのどのポイントでも 32 個の GPR がソフトウェアからアクセスできる.
	
	このうち 8 個はグローバルレジスタと呼ばれ %g0, %g1, ..., %g7 で表記する.
	グローバルレジスタは save, restore 命令の前後であっても同じものを参照する.
	つまり一般的なプロセッサで言うところの普通のレジスタ.

	これに対して残りの 24 個は save, restore 命令の前後で切り換えられて
	違うものを参照するようになる. ザックりと言うとこれがレジスタウィンドウの仕組み.

	%i0, %i1, ..., %i7 : incoming register 	
	%l0, %l1, ..., %l7 : local register
	%o0, %o1, ..., %o7 : outgoing register

	とでも呼ばれている. 例えば save 命令の前後で

	mov	5, %o0
	save	%sp, -96, %sp     (%sp は %o6 のエイリアス)
	mov	%i0, %l0

	%o0 だったものは %i0 として参照される. この結果 %l0 は 5 になる.
	普通 save 命令は函数のプロローグで, restore 命令は函数のエピローグで実行される.

	これら 24 個のレジスタは「 1 つのレジスタウィンドウにある」というような表現を
	する. SPARC のプロセッサは実装に依存して 2 から 32 個のレジスタウィンドウを
	持ちうる.

	レジスタウィンドウが 2 つならば

	RW_0		RW_1
	
	i0, ..., i7
	l0, ..., l7
	o0, ..., o7	i0, ..., i7
			l0, ..., l7
			o0, ..., o7

	レジスタウィンドウ 0 の o0, ..., o7 とレジスタウィンドウ 1 の i0, ..., i7
	は同じものだから物理的に 24 * 2 - 8 = 40 個を物理的に実装する必要がある.

	=> この数え方は正しいかどうか怪しい. RW_1 の o0, ..., o7 と RW_0 の
	   i0, ..., i7 は同じものとしていない.

	同様にレジスタウィンドウが 32 個ならば

	24 * 32 - 8 * (32-1) = 520 個を物理的に実装する必要がある.

	PSR レジスタの下位 5 ビットが現在どのレジスタウィンドウを参照しているかを表している.

	+---------------+-+-+-+-+-+
	|		| | | | | |
	+---------------+-+-+-+-+-+

	このフィールドを CWP と表記する(Current Window Pointer). だからレジスタウィンドウ
	の実装の上限が 32 ということになる.

	save 命令    : CWP をデクリメント
	restore 命令 : CWP をインクリメント

	そして CWP が WIM レジスタと同じ値になったときに SPILL, FILL 例外が
	(window overflow trap, window underflow trap とも呼ばれるらしい)
	発生する.
