スタートアップルーチンで %wim レジスタに 0 をセットした状態で
この test.c のプログラムを動かしてみる. test.c は以下のように
main 函数から f7 を f7 から f6 を, ... f1 から f0 を呼び出
すようなプログラムである.

f0
f1
f2
f3
f4
f5
f6
f7
main

%wim が 0 なので window overflow 例外は発生しない.

main 函数でプロローグをスキップしたところでレジスタは以下のようになっている:

(sparc-elf-gdb) info register
g0             0x0                 0
g1             0x0                 0
g2             0x0                 0
g3             0x0                 0
g4             0x0                 0
g5             0x0                 0
g6             0x0                 0
g7             0x0                 0
o0             0x0                 0
o1             0x0                 0
o2             0x0                 0
o3             0x0                 0
o4             0x0                 0
o5             0x0                 0
sp             0x1fa0              0x1fa0
o7             0x0                 0
l0             0x0                 0
l1             0x0                 0
l2             0x0                 0
l3             0x0                 0
l4             0x0                 0
l5             0x0                 0
l6             0x0                 0
l7             0x0                 0
i0             0x1000              4096
i1             0x0                 0
i2             0x0                 0
i3             0x0                 0
i4             0x0                 0
i5             0x0                 0
fp             0x2000              0x2000
i7             0x118               280
y              0x0                 0
psr            0x110010e7          [ ET PS S EF ]
wim            0x0                 0
tbr            0x1000              4096
pc             0x310               0x310 <main+4>
npc            0x314               0x314 <main+8>
fsr            0x0                 [ ]
csr            0x0                 0
(sparc-elf-gdb)

save 命令の後なので %i7 に main 函数の戻りアドレス-8 が入っている.

f7 にステップインしてレジスタを確認すると

(sparc-elf-gdb) info register
g0             0x0                 0
g1             0x0                 0
g2             0x0                 0
g3             0x0                 0
g4             0x0                 0
g5             0x0                 0
g6             0x0                 0
g7             0x0                 0
o0             0x0                 0
o1             0x0                 0
o2             0x0                 0
o3             0x0                 0
o4             0x0                 0
o5             0x0                 0
sp             0x1f40              0x1f40
o7             0x0                 0
l0             0x0                 0
l1             0x0                 0
l2             0x0                 0
l3             0x0                 0
l4             0x0                 0
l5             0x0                 0
l6             0x0                 0
l7             0x0                 0
i0             0x5                 5
i1             0x6                 6
i2             0x0                 0
i3             0x0                 0
i4             0x0                 0
i5             0x0                 0
fp             0x1fa0              0x1fa0
i7             0x318               792
y              0x0                 0
psr            0x110010e6          [ ET PS S EF ]
wim            0x0                 0
tbr            0x1000              4096
pc             0x2d8               0x2d8 <f7+12>
npc            0x2dc               0x2dc <f7+16>
fsr            0x0                 [ ]
csr            0x0                 0
(sparc-elf-gdb)

やはり save 命令の後なので %i7 に f7 の戻りアドレス-8 すなわち main 函数の
call 命令のアドレスがセットされている. また引数の a と b はそれぞれ %i0 と %i1
にセットされている.

さらに f6 にステップインしてレジスタを確認した:

(sparc-elf-gdb) info register
g0             0x0                 0
g1             0x7                 7
g2             0x4                 4
g3             0x0                 0
g4             0x0                 0
g5             0x0                 0
g6             0x0                 0
g7             0x0                 0
o0             0x0                 0
o1             0x0                 0
o2             0x0                 0
o3             0x0                 0
o4             0x0                 0
o5             0x0                 0
sp             0x1ee0              0x1ee0
o7             0x0                 0
l0             0x0                 0
l1             0x0                 0
l2             0x0                 0
l3             0x0                 0
l4             0x0                 0
l5             0x0                 0
l6             0x0                 0
l7             0x0                 0
i0             0x4                 4
i1             0x7                 7
i2             0x0                 0
i3             0x0                 0
i4             0x0                 0
i5             0x0                 0
fp             0x1f40              0x1f40
i7             0x2f0               752
y              0x0                 0
psr            0x110010e5          [ ET PS S EF ]
wim            0x0                 0
tbr            0x1000              4096
pc             0x298               0x298 <f6+12>
npc            0x29c               0x29c <f6+16>
fsr            0x0                 [ ]
csr            0x0                 0
(sparc-elf-gdb)

f7 の場合と同様に %i7, %i0, %i1 にそれぞれ f6 の call 命令のアドレス, 引数 a と b
がそれぞれセットされている.

PSR レジスタの下位 5 ビットは CWP (Current Window Pointer)でそれぞれの
函数で save 命令の後は以下のようになっている

main : 7
f7   : 6
f6   : 5
f5   : 4
f4   : 3
f3   : 2
f2   : 1
f1   : 0
f0   : 7

f0 の CWP は 7 なので main のものと同じになっている. f0 を呼び出すときに
f1 で call 命令を実行しているからこの時点で本来の main の戻りアドレス-8 を
壊している.

  => このことから, 仮に window overflow trap のハンドラでレジスタウィンドウを退避する
     のならば少なくとも f1 の save 命令で window overflow trap を発生させる
     必要がある.

  => 実はスタートアップルーチンのレジスタウィンドウの保存までやろうとすれば f2 の
     save 命令で window overflow traqp を発生させる必要がある. しかしそれは必ずしも
     必要ではない.

このままステップコマンドにより実行していくと f7 に戻ってきたところで以下のようになる:

(sparc-elf-gdb) 
f5 (a=3, b=8) at test.c:29
(sparc-elf-gdb) 
f6 (a=4, b=7) at test.c:34
(sparc-elf-gdb) 
f7 (a=<error reading variable: Cannot access memory at address 0x1ce4>, b=<error reading variable: Cannot access memory at address 0x1ce8>) at test.c:39
(sparc-elf-gdb) 

これは gdb がフレームポインタが正しいところを指しているとして %i6 (fp) 相対を参照
しているためである. f7 のフレームポインタは場所はともかく破壊されていた.

そして main に戻ってきたところでレジスタは以下のようになっている:

(sparc-elf-gdb) 
main () at test.c:44
(sparc-elf-gdb) info register
g0             0x0                 0
g1             0xb                 11
g2             0xfffffffe          -2
g3             0x0                 0
g4             0x0                 0
g5             0x0                 0
g6             0x0                 0
g7             0x0                 0
o0             0xb                 11
o1             0x6                 6
o2             0x0                 0
o3             0x0                 0
o4             0x0                 0
o5             0x0                 0
sp             0x1ca0              0x1ca0
o7             0x318               792
l0             0x0                 0
l1             0x0                 0
l2             0x0                 0
l3             0x0                 0
l4             0x0                 0
l5             0x0                 0
l6             0x0                 0
l7             0x0                 0
i0             0xb                 11
i1             0xd                 13
i2             0x0                 0
i3             0x0                 0
i4             0x0                 0
i5             0x0                 0
fp             0x1d00              0x1d00
i7             0x170               368
y              0x0                 0
psr            0x110010e7          [ ET PS S EF ]
wim            0x0                 0
tbr            0x1000              4096
pc             0x324               0x324 <main+24>
npc            0x328               0x328 <main+28>
fsr            0x0                 [ ]
csr            0x0                 0
(sparc-elf-gdb) 

本来この時点では sp = 0x1fa0, fp = 0x2000 になっているべきだがレジスタウィンドウ
の退避や復元をしていないのでそうはなっていない. そしてこの時点での %i7 は 0x118
であるべきだがこれは f1 の call 命令のアドレスになっている.

だから main からステップ実行で戻ろうとすると, f1 の call 命令 + 8 に
プログラムの制御が移る.
