*** gdb-10.2.aarch64-elf/sim/moxie/interp.c	2021-04-25 13:06:26.000000000 +0900
--- gdb-10.2.moxie-elf/sim/moxie/interp.c	2021-11-20 08:41:47.000000000 +0900
***************
*** 230,235 ****
--- 230,406 ----
    return hflags;
  }
  
+ #include <assert.h>
+ #include <string.h>
+ 
+ static const char* first_string(sim_cpu* scpu, int pc)
+ {
+   uint32_t r0 = cpu.asregs.regs[2];
+   static char buf[1024];
+   for (int i = 0 ; i != sizeof buf/sizeof buf[0] ; ++i ) {
+     char c = rbat(scpu, pc, r0+i);
+     buf[i] = c;
+     if (c == '\0')
+       return &buf[0]; // ok
+   }
+   assert(0 && "not enough buffer");
+   return &buf[0];
+ }
+ 
+ enum arg_class { NONE, WORD, DW, DF, LDF, STR };
+ 
+ static const char* get_part(const char* fmt, enum arg_class* how)
+ {
+   for ( ; *fmt ; ++fmt) {
+     char c = *fmt;
+     if (c == 'd' || c == 'i' || c == 'x' || c == 'u') {
+       if (*how == NONE)
+ 	*how = WORD;
+       return ++fmt;
+     }
+     if (c == 'c') {
+       *how = WORD;
+       return ++fmt;
+     }
+     if (c == 'f') {
+       char prev = *(fmt-1);
+       *how = prev == 'L' ? LDF : DF;
+       return ++fmt;
+     }
+     if (c == 's') {
+       *how = STR;
+       return ++fmt;
+     }
+     if (c == 'l') {
+       if (*how == NONE)
+ 	*how = WORD;
+       else
+ 	*how = DW;
+     }
+   }
+   assert(0 && "unexpected");
+   return fmt;
+ }
+ 
+ static unsigned int arg32(sim_cpu* scpu, int pc, int nth)
+ {
+   assert(nth);
+   if (nth < 6)
+     return cpu.asregs.regs[nth+2];
+   int sp = cpu.asregs.regs[1];
+   int addr = sp + 4*nth + 12;
+   return rlat(scpu, pc, addr);
+ }
+ 
+ static uint64_t arg64(sim_cpu* scpu, int pc, int nth)
+ {
+   assert(nth);
+   if (nth < 5) {
+     uint64_t a = cpu.asregs.regs[nth+2];
+     uint32_t b = cpu.asregs.regs[nth+3];
+     return (a << 32) | b;
+   }
+   if (nth == 5) {
+     uint64_t a = cpu.asregs.regs[nth+2];
+     int sp = cpu.asregs.regs[1];
+     uint32_t b = rlat(scpu, pc, sp);
+     return (a << 32) | b;
+   }
+   int sp = cpu.asregs.regs[1];
+   int addr = sp + 4*nth + 12;
+   uint64_t a = rlat(scpu, pc, addr);
+   uint32_t b = rlat(scpu, pc, addr+4);
+   return (a << 32) | b; 
+ }
+ 
+ static const char*
+ handle(sim_cpu* scpu, int pc, const char* fmt, int* nth, int* ret)
+ {
+   char c = *fmt;
+   if (c != '%') {
+     putchar(c);
+     ++*ret;
+     return fmt+1;
+   }
+   const char* beg = fmt;
+   c = *++fmt;
+   if (c == '%') {
+     putchar(c);
+     ++*ret;
+     return fmt+1;
+   }
+   enum arg_class how = NONE;
+   const char* end = get_part(fmt, &how);
+   char part_fmt[256];
+   int n = end - beg;
+   assert(n + 1 < sizeof part_fmt/sizeof part_fmt[0]);
+   strncpy(&part_fmt[0], beg, n);
+   part_fmt[n] = '\0';
+   if (how == WORD) {
+     int arg = arg32(scpu, pc, (*nth)++);
+     *ret += printf(part_fmt, arg);
+     return end;
+   }
+   if (how == DW) {
+     uint64_t arg = arg64(scpu, pc, *nth);
+     *nth += 2;
+     *ret += printf(part_fmt, arg);
+     return end;
+   }
+   if (how == DF || how == LDF) {
+     union {
+       uint64_t i;
+       double d;
+     } u = { arg64(scpu, pc, *nth) };
+     *nth += 2;
+     if (how == DF)
+       *ret += printf(part_fmt, u.d);
+     else
+       *ret += printf(part_fmt, (long double)u.d);
+     return end;
+   }
+   if (how == STR) {
+     uint32_t addr = arg32(scpu, pc, (*nth)++);
+     char buf[256];
+     for (int i = 0 ; i != sizeof buf/sizeof buf[0] ; ++i) {
+       char c = rbat(scpu, pc, addr+i);
+       buf[i] = c;
+       if (c == '\0') {
+ 	*ret += printf(part_fmt, &buf[0]);  // ok
+ 	return end;
+       }
+     }
+     assert(0 && "not enough buffer");
+     return end;
+   }
+   asm("int3");
+   return end;
+ }
+ 
+ static void do_printf(sim_cpu* scpu, int pc)
+ {
+   const char* fmt = first_string(scpu, pc);
+   int argc = 1;
+   int ret = 0;
+   while (*fmt)
+     fmt = handle(scpu, pc, fmt, &argc, &ret);
+   cpu.asregs.regs[2] = ret;
+ }
+ 
+ static void do_puts(sim_cpu* scpu, int pc)
+ {
+   const char* arg = first_string(scpu, pc);
+   int ret = puts(arg);
+   cpu.asregs.regs[2] = ret;
+ }
+ 
+ static void do_putchar(sim_cpu* scpu, int pc)
+ {
+   int r0 = cpu.asregs.regs[2];
+   int ret = putchar(r0);
+   cpu.asregs.regs[2] = ret;
+ }
+ 
  /* TODO: Split this up into finger trace levels than just insn.  */
  #define MOXIE_TRACE_INSN(str) \
    TRACE_INSN (scpu, "0x%08x, %s, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x", \
***************
*** 343,350 ****
  		  break;
  		default:
  		  {
! 		    MOXIE_TRACE_INSN ("SIGILL3");
! 		    sim_engine_halt (sd, scpu, NULL, pc, sim_stopped, SIM_SIGILL);
  		    break;
  		  }
  		}
--- 514,529 ----
  		  break;
  		default:
  		  {
! 		    switch (inst) {
! 		    case 0xfff0: exit(0);
! 		    case 0xfff1: do_printf(scpu, pc); break;
! 		    case 0xfff2: do_puts(scpu, pc); break;
! 		    case 0xfff3: do_putchar(scpu, pc); break;
! 		    default:
! 		      MOXIE_TRACE_INSN ("SIGILL3");
! 		      sim_engine_halt (sd, scpu, NULL, pc, sim_stopped, SIM_SIGILL);
! 		      break;
! 		    }
  		    break;
  		  }
  		}
