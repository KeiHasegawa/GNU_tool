#include "defs.h"
#include "value.h"
#include "arch-utils.h"
#include "regcache.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "dis-asm.h"
#include "dwarf2/frame.h"
#include "frame-base.h"
#include "frame-unwind.h"
#include "trad-frame.h"
#include <iostream>
#include <numeric>
#include <algorithm>
#include <cassert>

static int pru_register_sim_regno(gdbarch*, int regno)
{
  return regno;
}

static int pru_dbg_reg_to_regnum(gdbarch*, int regno)
{
  /* Refer gcc-10.2.0.pru-elf/gcc/config/pru/pru.md */
  switch (regno) {
  case 8:  return 2;
  case 14: return 3;
  case 16: return 4;
  case 20: return 5;
  case 24: return 6;
  case 28: return 7;
  }
  return regno;
}

const int pc_regno = 32;
const int sp_regno = 2;

static const char* pru_register_name(gdbarch*, int regno)
{
  if (regno == pc_regno)
    return "pc";
  if (regno == sp_regno)
    return "sp";

  if (regno < 32) {
    static const char* name[] = {
      "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
      "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15",
      "r16", "r17", "r18", "r19", "r20", "r21", "r22", "r23",
      "r24", "r25", "r26", "r27", "r28", "r29", "r30", "r31",
    };
    return name[regno];
  }
  return 0;
}

static void
pru_extract_return_value(type* valtype, regcache* regs, gdb_byte *valbuf)
{
  ULONGEST tmp;
  regcache_cooked_read_unsigned(regs, 14, &tmp);
  store_unsigned_integer(valbuf, 4, BFD_ENDIAN_LITTLE, tmp);
  int len = TYPE_LENGTH(valtype);
  if (len < 4)
    return;
  regcache_cooked_read_unsigned(regs, 15, &tmp);
  store_unsigned_integer(valbuf+4, 4, BFD_ENDIAN_LITTLE, tmp);
}

static bool is_aggregate(type_code code)
{
  switch (code) {
  case TYPE_CODE_STRUCT: case TYPE_CODE_UNION: case TYPE_CODE_ARRAY:
    return true;
  default:
    return false;
  }
}

static return_value_convention
pru_return_value(gdbarch*, value* function, type* valtype, regcache* regcache,
		 gdb_byte *readbuf, const gdb_byte *writebuf)
{
  auto code = valtype->code();
  if (is_aggregate(code)) {
    int len = TYPE_LENGTH(valtype);
    if (len > 8) {
      if (readbuf) {
	ULONGEST addr;
	regcache_raw_read_unsigned(regcache, 14, &addr);
	read_memory(addr, readbuf, len);
      }
      return RETURN_VALUE_ABI_RETURNS_ADDRESS;
    }
  }

  assert(!writebuf);

  if (readbuf)
    pru_extract_return_value(valtype, regcache, readbuf);
  
  return RETURN_VALUE_REGISTER_CONVENTION;
}

static type* pru_register_type(gdbarch* gdbarch, int regno)
{
  switch (regno) {
  case pc_regno: return builtin_type(gdbarch)->builtin_func_ptr;
  case sp_regno: return builtin_type(gdbarch)->builtin_data_ptr;
  default:       return builtin_type(gdbarch)->builtin_int32;
  }
}

inline void
register_info(gdbarch* gdbarch,ui_file* file, frame_info* frame, int regno)
{
  const char* name = pru_register_name(gdbarch, regno);
  uint32_t value = frame_unwind_register_unsigned(frame, regno);
  fprintf_filtered (file, "%s\t0x%08x\t%d\n", name, value, value);
}

static void
pru_print_registers_info(gdbarch* gdbarch,ui_file* file,
			 frame_info* frame, int regno, int cpregs)
{
  if (regno >= 0)
    return register_info(gdbarch, file, frame, regno);

  int N = gdbarch_num_regs(gdbarch);
  for (int i = 0 ; i != N ; ++i)
    register_info(gdbarch, file, frame, i);
}

static CORE_ADDR pru_skip_prologue(gdbarch*, CORE_ADDR pc)
{
  CORE_ADDR func_addr, func_end;
  if (!find_pc_partial_function (pc, nullptr, &func_addr, &func_end))
    return pc;
  
  symtab_and_line sal = find_pc_line(func_addr, 0);
  if (sal.end && sal.end < func_end)
    return sal.end;

  return pc;
}

struct pru_frame {
  bool available;
  CORE_ADDR pc;
  CORE_ADDR prev_sp;
  struct prologue_t {
    CORE_ADDR start;
    CORE_ADDR end;
  } prologue;
  trad_frame_saved_reg saved_reg[32];
};

inline int init_saved_reg(int no, trad_frame_saved_reg& sr)
{
  sr.addr = -1;
  sr.realreg = no;
  return no + 1;
}

inline bool canbe_prologue_start(uint32_t insn)
{
  if (insn == 0x20c30000) { // ret
    // size : 0;
    return true;
  }
  uint32_t mask = 0x0500e2e2;
  if ((insn & mask) == mask) { // sub	sp, sp, ???
    // size : (insn >> 16) & 0xff;
    return true;
  }
  return false;
}

static void debug1(const trad_frame_saved_reg& sr)
{
  using namespace std;
  if (sr.addr == -1)
    return;
  cerr << dec << sr.realreg << " : 0x" << hex << sr.addr << '\n';
}

void debug(pru_frame* p);
void debug(pru_frame* p)
{
  using namespace std;
  cerr << "available : " << p->available << '\n';
  cerr << "pc : 0x" << hex << p->pc << '\n';
  cerr << "prev_sp : 0x" << hex << p->prev_sp << '\n';
  cerr << "prologue.start : 0x" << hex << p->prologue.start << '\n';
  cerr << "prologue.end : 0x" << hex << p->prologue.start << '\n';
  int N = sizeof p->saved_reg/sizeof p->saved_reg[0];
  for_each(&p->saved_reg[0], &p->saved_reg[N], debug1);
}

static pru_frame* pru_frame_create(frame_info* frame)
{
  using namespace std;
  pru_frame* ret = new pru_frame;
  int N = sizeof ret->saved_reg/sizeof ret->saved_reg[0];
  accumulate(&ret->saved_reg[0], &ret->saved_reg[N], 0, init_saved_reg);
  ret->pc = get_frame_pc(frame);
  ret->prev_sp = get_frame_sp(frame);
  auto block_addr = get_frame_address_in_block(frame);  
  bool found = find_pc_partial_function(block_addr, nullptr,
					&ret->prologue.start,
					&ret->prologue.end);
  if (!found) {
    ret->available = false;    
    ret->prologue.start = ret->prologue.end = ret->pc;
    return ret;
  }
  ret->available = true;
  for (auto addr = ret->prologue.start ; ; addr -= 4) {
    ULONGEST insn;
    if (!safe_read_memory_unsigned_integer(addr, 4, BFD_ENDIAN_LITTLE, &insn))
      return ret;
    if (canbe_prologue_start(insn)) {
      ret->prologue.start = addr;
      return ret;
    }
  }
}

static void pru_frame_this_id(frame_info* frame, void** ptr, frame_id* id)
{
  auto pf = reinterpret_cast<pru_frame*>(*ptr);
  if (!pf)
    *ptr = pf = pru_frame_create(frame);
  
  if (!pf->available)
    *id = frame_id_build_unavailable_stack(pf->prologue.start);
  else
    *id = frame_id_build(pf->prev_sp, pf->prologue.start);
}

static value*
pru_frame_prev_register(frame_info* frame, void** ptr, int regno)
{
  if (regno == sp_regno) {
    auto sp = get_frame_sp(frame);
    return frame_unwind_got_constant(frame, regno, sp);
  }
  
  if (regno == pc_regno) {
    auto r3 = frame_unwind_register_unsigned(frame, 3);
    return frame_unwind_got_constant(frame, regno, r3 >> 14);
  }

  auto pf = reinterpret_cast<pru_frame*>(*ptr);
  if (!pf)
    *ptr = pf = pru_frame_create(frame);
  return trad_frame_get_prev_register(frame, &pf->saved_reg[0], regno);
}

static struct frame_unwind pru_frame_unwind = {
  NORMAL_FRAME,
  default_frame_unwind_stop_reason,
  pru_frame_this_id,
  pru_frame_prev_register,
  nullptr,
  default_frame_sniffer
};

static frame_base pru_frame_base = {
  nullptr
};

static int pru_kind_from_pc(gdbarch*, CORE_ADDR* addr)
{
  return 0;
}

static const unsigned char* pru_from_kind(gdbarch*, int kind, int* size)
{
  static unsigned char break_inst[] = { 0xee, 0xdb, 0xba, 0x26 };
  *size = sizeof break_inst;
  return &break_inst[0];
}

static void calc_sp(int* nth, value* arg, CORE_ADDR* sp)
{
  auto arg_type = check_typedef(value_type(arg));
  auto code = arg_type->code();
  int len = TYPE_LENGTH(arg_type);
  if (is_aggregate(code)) {
    if (len > 8) {
      *sp -= len;
      return;
    }
    if (len > 4)
      len = 8;
  }
  
  if (len <= 4) {
    if (*nth < 16) {
      ++*nth;
      return;
    }
    *sp -= 4;
    ++*nth;
    return;
  }

  assert(len == 8);
  if (*nth + 1 < 16) {
    *nth += 2;
    return;
  }

  if (*nth == 15) {
    *sp -= 8;
    return;
  }

  *sp -= 8;
  *nth += 2;
}

static void set_arg(int* nth, value* arg, regcache* rc, CORE_ADDR sp, int* adj)
{
  auto arg_type = check_typedef(value_type(arg));
  auto code = arg_type->code();
  int len = TYPE_LENGTH(arg_type);
  auto val = value_contents(arg);
  
  if (is_aggregate(code)) {
    if (len > 8) {
      CORE_ADDR addr = sp + *adj;
      if (*nth > 16)
	addr += 4 * (*nth - 16);
      write_memory(addr, val, len);
      *adj += len;
      return;
    }

    if (len > 4)
      len = 8;
  }

  if (len <= 4) {
    if (*nth < 16) {
      auto regval = extract_unsigned_integer(val, 4, BFD_ENDIAN_LITTLE);
      regcache_cooked_write_unsigned(rc, 14+*nth, regval);
      ++*nth;
      return;
    }
    CORE_ADDR addr = sp + 4 * (*nth - 16) + *adj;
    write_memory(addr, val, 4);
    ++*nth;
    return;
  }

  assert(len == 8);
  if (*nth + 1 < 16) {
    auto regval = extract_unsigned_integer(val, 8, BFD_ENDIAN_LITTLE);
    uint32_t hi = regval >> 32;
    uint32_t lo = regval;
    regcache_cooked_write_unsigned(rc, 14+*nth+0, lo);
    regcache_cooked_write_unsigned(rc, 14+*nth+1, hi);
    *nth += 2;
    return;
  }

  if (*nth == 15) {
    *adj = 8;
    write_memory(sp, val, 8);
    return;
  }

  CORE_ADDR addr = sp + 4 * (*nth - 16) + *adj;
  write_memory(addr, val, 8);
  *nth += 2;
}

static CORE_ADDR
pru_push_dummy_call(gdbarch* arch, value* func, regcache* rc,
		    CORE_ADDR bp_addr, int nargs, value** argv, CORE_ADDR sp,
		    function_call_return_method rm,
		    CORE_ADDR struct_addr)
{
  using namespace std;
  regcache_cooked_write_unsigned(rc, 3, bp_addr << 14);
  int nth = 0;
  if (rm == return_method_struct)
    ++nth;
  for (int i = 0 ; i != nargs ; ++i)
    calc_sp(&nth, argv[i], &sp);
  regcache_cooked_write_unsigned(rc, sp_regno, sp);
  nth = 0;
  if (rm == return_method_struct) {
    regcache_cooked_write_unsigned(rc, 14, struct_addr);
    ++nth;
  }
  int adj = 0;
  for (int i = 0 ; i != nargs ; ++i)
    set_arg(&nth, argv[i], rc, sp, &adj);
  return sp;
}

static value*
pru_dwarf2_prev_register(frame_info* frame, void**, int regno)
{
#if 1  
  assert(regno == pc_regno);
  auto r3 = frame_unwind_register_unsigned(frame, 3);
  return frame_unwind_got_constant(frame, regno, r3 >> 14);
#else
  switch (regno) {
  case pc_regno:
    {
      auto r3 = frame_unwind_register_unsigned(frame, 3);
      return frame_unwind_got_constant(frame, regno, r3 >> 14);
    }
  default:
    {
      assert(regno == sp_regno);
      asm("int3");
      return frame_unwind_register_value(frame, 4);
    }
  }
#endif
}

static void
pru_dwarf2_frame_init_reg(gdbarch*, int regno,
			  dwarf2_frame_state_reg *reg, frame_info*)
{
#if 1
  if (regno != pc_regno)
    return;
  reg->how = DWARF2_FRAME_REG_FN;
  reg->loc.fn = pru_dwarf2_prev_register;
#else
  switch (regno) {
  case pc_regno:
    reg->how = DWARF2_FRAME_REG_FN;
    reg->loc.fn = pru_dwarf2_prev_register;
    return;
  case sp_regno:
    reg->how = DWARF2_FRAME_REG_CFA;
    return;
  }
#endif
}

static struct gdbarch*
pru_gdbarch_init(gdbarch_info info, gdbarch_list* arches)
{
  gdbarch* gdbarch = gdbarch_alloc(&info, 0);
#if 0
  set_gdbarch_num_regs(gdbarch, pc_regno+1);
#else
  set_gdbarch_num_regs(gdbarch, 133);
#endif
  set_gdbarch_register_type(gdbarch, pru_register_type);
  set_gdbarch_register_sim_regno(gdbarch, pru_register_sim_regno);
  set_gdbarch_dwarf2_reg_to_regnum(gdbarch, pru_dbg_reg_to_regnum);
  set_gdbarch_stab_reg_to_regnum(gdbarch, pru_dbg_reg_to_regnum);
  set_gdbarch_register_name(gdbarch, pru_register_name);

  set_gdbarch_pc_regnum(gdbarch, pc_regno);
  set_gdbarch_sp_regnum(gdbarch, sp_regno);
  set_gdbarch_print_registers_info(gdbarch, pru_print_registers_info);

  set_gdbarch_ptr_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_addr_bit(gdbarch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_return_value(gdbarch, pru_return_value);

  set_gdbarch_skip_prologue (gdbarch, pru_skip_prologue);

  dwarf2_append_unwinders(gdbarch);
  frame_unwind_append_unwinder(gdbarch, &pru_frame_unwind);
  frame_base_set_default (gdbarch, &pru_frame_base);

  set_gdbarch_inner_than (gdbarch, core_addr_lessthan);
  set_gdbarch_breakpoint_kind_from_pc(gdbarch, pru_kind_from_pc);
  set_gdbarch_sw_breakpoint_from_kind(gdbarch, pru_from_kind);
  set_gdbarch_push_dummy_call(gdbarch, pru_push_dummy_call);

  set_gdbarch_char_signed(gdbarch, 0);
  set_gdbarch_int_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_bit(gdbarch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_long_bit (gdbarch, 8 * TARGET_CHAR_BIT);

  set_gdbarch_wchar_signed(gdbarch, 0);
  set_gdbarch_wchar_bit(gdbarch, 2 * TARGET_CHAR_BIT);

  set_gdbarch_double_bit(gdbarch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_double_format(gdbarch, floatformats_ieee_double);
  set_gdbarch_long_double_bit(gdbarch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_long_double_format(gdbarch, floatformats_ieee_double);

  set_gdbarch_believe_pcc_promotion(gdbarch, 1);

  dwarf2_frame_set_init_reg(gdbarch, pru_dwarf2_frame_init_reg);

  return gdbarch;
}

void _initialize_pru_tdep();
void
_initialize_pru_tdep()
{
  register_gdbarch_init(bfd_arch_pru, pru_gdbarch_init);
}


void debug2(frame_info* frame);
void debug2(frame_info* frame)
{
  using namespace std;
  cerr << "pc : 0x" << hex << get_frame_pc(frame) << '\n';
  cerr << "block : 0x" << hex << get_frame_address_in_block(frame) << '\n';
  cerr << "sp : 0x" << hex << get_frame_sp(frame) << '\n';
  cerr << "func : 0x" << hex << get_frame_func(frame) << '\n';
#if 0  
  cerr << "base : " << get_frame_base(frame) << '\n';
#endif  
#if 0
  cerr << "base addr : 0x" << hex << get_frame_base_address(frame) << '\n';
  cerr << "local : 0x" << hex << get_frame_locals_address(frame) << '\n';
  cerr << "args : 0x" << hex << get_frame_args_address(frame) << '\n';
  cerr << "type : " << get_frame_type(frame) << '\n';
#endif  
  cerr << "program space : (program_space*)"
       << get_frame_program_space(frame) << '\n';
  cerr << "address space : (address_space*)"
       << get_frame_address_space(frame) << '\n';
  cerr << "next : (frame_info*)" << get_next_frame(frame) << '\n';
#if 0  
  cerr << "prev : (frame_info*)" << get_prev_frame(frame) << '\n';
#endif  
}
