PRU の ABI

(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*1) 函数呼び出し

	call	%label(func)

	疑似コード

	r3 = (call 命令の次のアドレス) << 14
	pc = func

(*2) 函数復帰

	ret

	疑似コード

	pc = r3 >> 14

(*3) プロローグ

	sub	r2, r2, 134
	sbbo	r3.b2, r2, 128, 6
	add	r4, r2, 134

	上は 128 バイトのローカルエリアを使用する函数のプロローグである.
	r2 レジスタはスタックポインタ, r4 レジスタをフレムポインタとして使用している.
	普通のフレームポインタとは少し違うところを指しているが, これはコンパイラの勝手である.

	+--------------------+ <- r2_{new}
	|                    |
	|                    |
	|                    |
	|                    |
	|     local area     |
	|                    |
	|                    |
	|                    |
	|                    |
	+--------------------+ +128
	|      hi(r3_{old})  |
	+--------------------+ +130
	|                    |
	|      r4_{old}      |
	+--------------------+ <- r2_{old}, r4_{new}


(*4) エピローグ

	sub	r2, r4, 6
	lbbo	r3.b2, r2, 0, 6
	add	r2, r2, 6
	ret

	上は使用するローカルエリアに依存しない函数のエピローグである.
	r2, r3, r4 の値が復元されて呼び出し元に復帰する.

(*5) 通常の函数の引数と戻り値

        第 1 引数 : r14
	...
	第 16 引数 : r29
	第 17 引数以降 : スタックに積む

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7,
	      int b0, int b1, int b2, int b3, int b4, int b5, int b6, int b7,
	      int c0, int c1);

	f(10, 11, 12, 13, 14, 15, 16, 17,
	  18, 19, 20, 21, 22, 23, 24, 25,
	  26, 27);

        f の先頭アドレスでは

        r14 = 10, ..., r29 = 25

	+--------------------+ <- r2
	|        26          |
	+--------------------+ +4
	|        27          |
	+--------------------+ +8

        のようになっている.
	函数の戻り値は r14 にセットされる.

(*6) long long を引数にとる函数, 返す函数

        sizeof(long long) = 8

	long long の引数に対してレジスタを 2 つ使って引数をわたす. レジスタでわたし
	きれない場合はスタックが使用される.

	long long f(int a0,
	     	    long long a1, long long a2, long long a3, long long a4,
		    long long a5, long long a6, long long a7, long long a8,
		    int a9, int a10);

        f(10, 11LL, 12LL, 13LL, 14LL, 15LL, 16LL, 17LL, 0x123456789abcdef0LL,
	  9, 8);

	に対して f の先頭アドレスでは

	r14 = 10,
	r15 = 11, r16 = 0, r17 = 12, r18 = 0, r19 = 13, r20 = 0,
	r21 = 14, r22 = 0, r23 = 15, r24 = 0, r25 = 16, r26 = 0
	r27 = 17, r28 = 0, r29 = 9

	+--------------------+ <- r2
	|     0x9abcdef0     |
	+--------------------+ +4
	|     0x12345678     |
	+--------------------+ +8
	|          9         |
	+--------------------+ +12
	|          8         |
	+--------------------+ +16

	のようになっている.
	函数の戻り値は r14, r15 にセットされる.

(*7) 浮動少数点数を引数にとる函数, 返す函数

        sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	PRU には FPU がないので浮動少数点数演算はソフトウェアが行なう.
	float に対しては (*5) の規則が, double, long double に対しては (*6) の
	規則が適用される.

(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数にとる函数を呼び出すとき, 4 バイト以下で r14, ..., r29
	がまだ残っているのならばレジスタが使用される. 8 バイト以下で  r14, ..., r29
	がまだ残っているのならば  2 つのレジスタが使用される.
	構造体のサイズが 8 バイトより大きいのならば引数の値をスタックにコピーする.
	
	構造体を返す函数を呼び出すとき, 構造体のサイズが 8 バイト以下ならば r14, r15
	が使用される. 構造体のサイズが 8 バイトより大きければ戻り値を格納するアドレスが
	r14 にセットされる.
