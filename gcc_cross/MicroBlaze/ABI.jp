Microblaze の ABI

(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*1) 函数呼び出し

      	brlid	r15, func

	疑似コード

	r15 = (brlid 命令の次のアドレス)
	pc = func

	この命令は遅延分岐である.

(*2) 函数復帰

	rtsd	r15,8 

	疑似コード

	pc = r15 + 8

	この命令は遅延分岐である.

(*3) プロローグ

	addik	r1,r1,-136
	swi	r15,r1,0
	swi	r19,r1,132
	addk	r19,r1,r0

	+------------------+ <- r1_{new}, r19_{new}
	|     r15_{old}    |
	+------------------+
	|                  |
	|                  |
	|    local area    |
	|                  |
	|                  |
	+------------------+
	|     r19_{old}    |
	+------------------+ <- r1_{old}

	上は 128 バイトのローカルエリアを使用する函数のプロローグである.

(*4) エピローグ

	lwi	r15,r1,0
	addk	r1,r19,r0
	lwi	r19,r1,132
	addik	r1,r1,136
	rtsd	r15,8 
	nop

	上は 128 バイトのローカルエリアを使用する函数のエピローグである.
	r15, r19, r1 が復元され呼び出し元に復帰する.

(*5) 通常の函数の引数と戻り値

        第 1 引数 : r5
        第 2 引数 : r6
        第 3 引数 : r7
        第 4 引数 : r8
	第 5 引数 : r9
	第 6 引数 : r10
	第 7 引数 : オフセット 28 を開けてスタックを使用

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10, 11, 12, 13, 14, 15, 16, 17);

	に対して f の先頭アドレスでは

	r5 = 10, r6 = 11, r7 = 12, r8 = 13, r9 = 14, r10 = 15


	+------------------+ <- r1
	|     r15_{old}    |
	+------------------+ +4
	|      ******      |
	+------------------+ +8
	|      ******      |
	+------------------+ +12
	|      ******      |
	+------------------+ +16
	|      ******      |
	+------------------+ +20
	|      ******      |
	+------------------+ +24
	|      ******      |
	+------------------+ +28
	|        16        |
	+------------------+ +32
	|        17        |
	+------------------+ +36

	のようになっている. ここで r15_{old} は f を呼び出した函数の戻りアドレスである.
	函数の戻り値は r3 レジスタにセットされる.

(*6) long long を引数にとる函数, 返す函数

        long long 型の引数に対して 2 つのレジスタが使用される.
	long long 型の戻り値は r3, r4 にセットされる.

	long long f(int a0, long long a1, long long a2, long long a3)

	f(10, 11LL, 12LL, 0x123456789abcdef0LL);

	に対して f の先頭アドレスでは

	r5 = 10, r6 = 0, r7 = 11, r8 = 0, r9 = 12, r10 = 0x12345678 

	+------------------+ <- r1
	|     r15_{old}    |
	+------------------+ +4
	|      ******      |
	+------------------+ +8
	|      ******      |
	+------------------+ +12
	|      ******      |
	+------------------+ +16
	|      ******      |
	+------------------+ +20
	|      ******      |
	+------------------+ +24
	|      ******      |
	+------------------+ +28
	|    0x9abcdef0    |
	+------------------+ +32

	のようになっている. ここで r15_{old} は f を呼び出した函数の戻りアドレスである.

(*7) 浮動少数点数を引数にとる函数, 返す函数

	sizeof(float) = 4
	sizoef(double) = sizeof(long double) = 8

	Microblaze には FPU がないのでソフトウェアで浮動少数点演算を行なう.
	float に対しては (*5) の規則が, double, long double に対しては (*6) の
	規則が適用される.

(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数に取る函数を呼び出すとき, 先頭の 24 バイトが r5, ..., r10 に
	セットされ残りはスタックにセットされる.
	構造体を返す函数を呼び出すとき, 戻り値を格納するアドレスを r3 レジスタにセット
	する.
	