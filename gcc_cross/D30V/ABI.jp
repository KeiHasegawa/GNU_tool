D30V の ABI

(*0) レジスタの別名

        link : r62
        sp   : r63

	またフレームポインタを r61 として使用している.

(*1) 函数呼び出し

        bsr	(func)

	疑似コード

	link := (bsr 命令の次のアドレス)
	pc := func

(*2) 函数復帰

	jmp	link

	疑似コード
	
	pc := link

(*3) プロローグ

        以下は 8 バイトのローカル領域を使用する函数のプロローグ

	add sp,sp,-16
	add r22,sp,8
	stw r61,@(r22+,r0)
	stw link,@(r22+,r0)
	or r61,r0,sp

      0	+---------------+ <- sp_{new},  r61_{new}
	|		|
	+---------------+
	|		|
     +8	+---------------+
	|    r61_{old}	|
    +12	+---------------+
	|  link_{old}	|
    +16	+---------------+ <- sp_{old}

(*4) エピローグ

	以下は 8 バイトの領域を使用する函数のエピローグ

	or sp,r0,r61
	add sp,sp,8
	ldw r61,@(sp+,r0)
	ldw link,@(sp+,r0)
	jmp link

	r61, sp が復元され呼び出し元へ復帰する.

(*5) 通常の函数の引数と戻り値

        第 1 引数 : r2
        第 2 引数 : r3
	...
        第 16 引数 : r17
	第 17 引数以降 : スタックに積む

(*6) long long を引数にとる函数, 返す函数

        sizeof(long long) = 8

	引数に使用するときはレジスタをペアで使用する. すなわち第 1 引数が long long
	ならば r2, r3 レジスタが使用される.
	ペアで使用されるレジスタの 1 つ目のレジスタは偶数番目のレジスタになる.
        例えば

	void f(int a, long long b);

	を呼び出すときに r2 は a の値が, r4 に b の上位 32 ビットが,
	r5 に b の下位 32 ビットがセットされる.

(*7) 浮動少数点数を引数にとる函数, 返す函数

        sizeof(float) = 4
	sizeof(double) = 8
	sizeof(long double) = 8

	浮動小数点ユニットは D30V にはない. float に対しては (*5) の規
	則が, double, long double に対しては (*6) の規則がそれぞれ適用
	される.

(*8) 構造体を引数にとる函数, 構造体を返す函数

	構造体を引数とする函数を呼び出すとき, 第 1 引数ならば先頭の 64 バイトはレジスタ
	にセットされ, 残りはスタックを使用する. 第 2 引数以降ならば偶
	数番目のレジスタから使用される.

	構造体を返す函数を呼び出すとき, 戻りアドレスを格納するアドレス
	を r2 レジスタにセットして呼び出す.
	
