(*) Build gdb-12.1

% xz -d -c ../gdb-12.1.tar.xz | tar xf -
% mv gdb-12.1 gdb-12.1.loongarch64-elf
% cd gdb-12.1.loongarch64-elf/gdb

Do the same thing with d30v, fr30, z8k, i960, mmix, z80, i386, pdp11, vax,
alpha, m68k, ns32k, spu, arc, 1750a, csky, tic6x, epiphany and ia64.

configure.tgt:

h8300*-*-*)		gdb_sim=h8300 ;;
+loongarch64-*-*)	gdb_sim=loongarch64 ;;
iq2000-*-*)		gdb_sim=iq2000 ;;

% cd ..
% ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/ --target=loongarch64-elf
% make all
...
make[2]: *** No rule to make target '../sim/loongarch64/libsim.a', needed by 'gdb'.  Stop.
...
%

% cd sim
% tar xf ~/lang/53_GNU_tool/gcc_cross/IA64/gdb/ia64.1.tar
% mv ia64 loongarch64
% cd loongarch64

I replaced `ia64' to `loongarch64'.

% make
...
g++ -o run nrun.o libsim.a ../../bfd/libbfd.a ../../opcodes/libopcodes.a  ../../libiberty/libiberty.a ../common/libcommon.a -lnsl -ldl -lz -lpthread
/usr/local/lib/gcc/i686-pc-linux-gnu/10.2.0/../../../../i686-pc-linux-gnu/bin/ld: libsim.a(loongarch64.o): in function `LSEXTRACTED(unsigned int, int, int)':
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gdb-12.1.loongarch64-elf/sim/loongarch64/../common/sim-bits.c:64: undefined reference to `sim_io_error(sim_state*, char const*, ...)'
...
%

gdb-12.1.loongarch64-elf/sim/common/sim-io.h:

+#ifndef __cplusplus
void sim_io_error (SIM_DESC sd,
		   const char *fmt,
		   ...)
  ATTRIBUTE_PRINTF (2, 3)
  ATTRIBUTE_NORETURN;
+#else
+extern "C" void sim_io_error (SIM_DESC sd, const char *fmt, ...);
+#endif

% make clean ; make
% cd ../../gdb ; make all
  CXXLD  gdb
/usr/local/lib/gcc/i686-pc-linux-gnu/10.2.0/../../../../i686-pc-linux-gnu/bin/ld: remote-sim.o: in function `gdbsim_target_open(char const*, int)':
/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gdb-12.1.loongarch64-elf/gdb/remote-sim.c:326: undefined reference to `default_callback'
collect2: error: ld returned 1 exit status
make: *** [Makefile:1904: gdb] Error 1
% 

gdb-12.1.loongarch64-elf/gdb/Makefile:

-SIM = ../sim/loongarch64/libsim.a
+SIM = ../sim/loongarch64/libsim.a ../sim/common/libcommon.a

% make all

I created the program which had a few nop like below:

	.text
start:
	nop
	nop
	nop
end:
	nop

at address 0x100 and executed it under control of loongarch64-elf-gdb.

As usual, I applied memory access patch like below:

	      bfd_get_section_contents (result_bfd, s, buffer, 0, size);
+	      sim_do_commandf(sd, "memory-region 0x%llx,0x%llx", lma, size);
	      do_write (sd, lma, buffer, size);
	      found_loadable_section = 1;
	      free (buffer);
	    }
	}
+       else if (s->flags & SEC_ALLOC) {
+         bfd_vma vma = bfd_section_vma(s);
+         bfd_size_type size = bfd_section_size(s);
+         sim_do_command(sd, "memory-fill 0xcc");
+         sim_do_commandf(sd, "memory-region 0x%llx,0x%llx", vma, size);
+       }

By fixing a few stuff, this simple nop program could be executed under control
of loongarch64-elf-gdb.

I uploaded

/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gdb-12.1.loongarch64-elf/sim/loongarch64/

at this point as `loongarch64.1.tar'.
