#include "defs.h"
#include "value.h"
#include "arch-utils.h"
#include "regcache.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "dis-asm.h"
#include "dwarf2/frame.h"
#include "frame-base.h"
#include "frame-unwind.h"

#include <cassert>
#include <utility>

static int
pdp11_register_sim_regno(struct gdbarch *gdbarch, int regnum)
{
  return regnum;
}

static int
pdp11_dbg_reg_to_regnum(struct gdbarch *gdbarch, int regnum)
{
  return regnum;
}

constexpr int sp_regno = 6;
constexpr int pc_regno = 7;

static const char* pdp11_register_names[] = {
    "r0",   "r1",   "r2",  "r3",
    "r4",   "r5",   "sp",  "pc",
};

static const char* pdp11_register_name(gdbarch* arch, int regno)
{
  int N = sizeof pdp11_register_names/sizeof pdp11_register_names[0];
  if (regno < N)
    return pdp11_register_names[regno];
  return nullptr;
}

static bool is_aggregate(type_code code)
{
  switch (code) {
  case TYPE_CODE_STRUCT: case TYPE_CODE_UNION: case TYPE_CODE_ARRAY:
    return true;
  default:
    return false;
  }
}

static void
pdp11_extract_return_value(gdbarch* arch, type *valtype, regcache* rc,
			    gdb_byte* readbuf)
{
  asm("int3");
}

static enum return_value_convention
pdp11_return_value(gdbarch* arch, value* function,
		    type* valtype, regcache* rc,
		    gdb_byte* readbuf, const gdb_byte* writebuf)
{
  auto code = valtype->code();
  if (is_aggregate(code)) {
    if (readbuf) {
      asm("int3");
    }
    return RETURN_VALUE_ABI_RETURNS_ADDRESS;
  }

  assert(!writebuf);

  if (readbuf)
    pdp11_extract_return_value(arch, valtype, rc, readbuf);

  return RETURN_VALUE_REGISTER_CONVENTION;
}

static type*
pdp11_register_type(gdbarch* arch, int regno)
{
  switch (regno) {
  case pc_regno:
    return builtin_type(arch)->builtin_func_ptr;
  case sp_regno:
    return builtin_type(arch)->builtin_data_ptr;
  default:
    return builtin_type(arch)->builtin_int16;
  }
}

static void
pdp11_print_registers_info(gdbarch* arch, ui_file* file,
			    frame_info* frame, int regno, int cpregs)
{
  fprintf_filtered (file, "%s at %s:%d called\n", __func__, __FILE__, __LINE__);
}

static CORE_ADDR pdp11_skip_prologue(gdbarch* arch, CORE_ADDR pc)
{
  CORE_ADDR func_addr, func_end;
  if (!find_pc_partial_function (pc, nullptr, &func_addr, &func_end))
    return pc;
  
  symtab_and_line sal = find_pc_line (func_addr, 0);
  if (sal.end && sal.end < func_end)
    return sal.end;

  return pc;
}

struct pdp11_frame {
  bool available;
  CORE_ADDR prologue_start;
  CORE_ADDR prev_sp;
  int size;
  pdp11_frame(frame_info* frame)
  {
    available = false;
    prologue_start = -1;
    prev_sp = get_frame_sp(frame);
    size = 0;
  }
};

inline void update(uint8_t insn, pdp11_frame* frame)
{
}

static pdp11_frame* pdp11_create_frame(frame_info* frame)
{
  using namespace std;
  auto ret = new pdp11_frame(frame);
  CORE_ADDR pc = get_frame_pc(frame);
  auto block_addr = get_frame_address_in_block(frame);
  CORE_ADDR func_end;
  bool found = find_pc_partial_function(block_addr, nullptr,
					&ret->prologue_start, &func_end);
  if (!found) {
    ret->available = false;
    ret->prologue_start = pc;
    return ret;
  }

  symtab_and_line sal = find_pc_line(ret->prologue_start, 0);
  auto end = sal.end ? min(pc, sal.end) : pc;
  ret->available = true;
  for (auto addr = ret->prologue_start; addr != end ; addr += 1) {
    ULONGEST insn;
    if (!safe_read_memory_unsigned_integer(addr, 1, BFD_ENDIAN_LITTLE, &insn))
      return ret;
    update(insn, ret);
  }
  return ret;
}

static void
pdp11_frame_this_id(frame_info* frame, void** ptr, frame_id* id)
{
  auto pf  = reinterpret_cast<pdp11_frame*>(*ptr);
  if (!pf)
    *ptr = pf = pdp11_create_frame(frame);

  if (!pf->available)
    *id = frame_id_build_unavailable_stack(pf->prologue_start);
  else
    *id = frame_id_build(pf->prev_sp, pf->prologue_start);
}

static value*
pdp11_frame_prev_register(frame_info* frame, void** ptr, int regno)
{
  if (regno == pc_regno) {
#if 1
    auto pc = get_frame_pc(frame);
    return frame_unwind_got_constant(frame, regno, pc);
#else
    return frame_unwind_got_constant(frame, regno, -1);
#endif    
  }

  if (regno == sp_regno) {
    auto sp = get_frame_sp(frame);
    return frame_unwind_got_constant(frame, regno, sp);
  }

  asm("int3");
  return nullptr;
}

static struct frame_unwind pdp11_frame_unwind = {
  NORMAL_FRAME,
  default_frame_unwind_stop_reason,
  pdp11_frame_this_id,
  pdp11_frame_prev_register,
  nullptr,
  default_frame_sniffer
};

static CORE_ADDR
pdp11_frame_base_address(frame_info* frame, void** ptr)
{
  asm("int3");
  return 0;
}

static frame_base pdp11_frame_base = {
  &pdp11_frame_unwind,
  pdp11_frame_base_address,
  pdp11_frame_base_address,
  pdp11_frame_base_address
};

static
int pdp11_kind_from_pc(gdbarch*, CORE_ADDR*)
{
  return 0;
}

static
const unsigned char* pdp11_from_kind(gdbarch*, int kind, int* size)
{
  static unsigned char break_inst[] = { 0x0f, 0x0e };
  *size = sizeof break_inst;
  return &break_inst[0];
}

static CORE_ADDR
pdp11_push_dummy_call(gdbarch* arch, value* function,
		       regcache* rc, CORE_ADDR bp_addr,
		       int nargs, value** args, CORE_ADDR sp,
		       function_call_return_method rm,
		       CORE_ADDR struct_addr)
{
  asm("int3");
  return 0;
}

static struct gdbarch*
pdp11_gdbarch_init(struct gdbarch_info info, struct gdbarch_list *arches)
{
  auto arch = gdbarch_alloc (&info, 0);

  int N = sizeof pdp11_register_names/sizeof pdp11_register_names[0];
  set_gdbarch_num_regs(arch, N);
  set_gdbarch_register_type(arch, pdp11_register_type);
  set_gdbarch_register_sim_regno(arch, pdp11_register_sim_regno);
  set_gdbarch_dwarf2_reg_to_regnum(arch, pdp11_dbg_reg_to_regnum);
  set_gdbarch_stab_reg_to_regnum(arch, pdp11_dbg_reg_to_regnum);
  set_gdbarch_register_name(arch, pdp11_register_name);

  set_gdbarch_sp_regnum(arch, sp_regno);
  set_gdbarch_pc_regnum(arch, pc_regno);
  set_gdbarch_print_registers_info(arch, pdp11_print_registers_info);

  set_gdbarch_ptr_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_addr_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_return_value(arch, pdp11_return_value);

  set_gdbarch_skip_prologue(arch, pdp11_skip_prologue);
  frame_base_set_default(arch, &pdp11_frame_base);
  dwarf2_append_unwinders(arch);
  frame_unwind_append_unwinder(arch, &pdp11_frame_unwind);

  set_gdbarch_inner_than(arch, core_addr_lessthan);
  set_gdbarch_breakpoint_kind_from_pc(arch, pdp11_kind_from_pc);
  set_gdbarch_sw_breakpoint_from_kind(arch, pdp11_from_kind);
  set_gdbarch_push_dummy_call(arch, pdp11_push_dummy_call);

  set_gdbarch_char_signed(arch, 0);
  set_gdbarch_int_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_long_bit(arch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_long_bit(arch, 8 * TARGET_CHAR_BIT);

  set_gdbarch_wchar_signed(arch, 0);
  set_gdbarch_wchar_bit(arch, 2 * TARGET_CHAR_BIT);

  set_gdbarch_double_bit(arch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_double_format(arch, floatformats_ieee_double);
  set_gdbarch_long_double_bit(arch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_long_double_format(arch, floatformats_ieee_double);

  set_gdbarch_believe_pcc_promotion(arch, 1);
 
  return arch;
}

void _initialize_pdp11_tdep();
void
_initialize_pdp11_tdep()
{
  register_gdbarch_init(bfd_arch_pdp11, pdp11_gdbarch_init);
}

