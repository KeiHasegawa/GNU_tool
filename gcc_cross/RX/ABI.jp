RX の ABI

(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*1) 函数呼び出し

	bsr	func

	疑似コード

	r0 -= 4
	memory[r0] = (bsr 命令の次のアドレス)
	pc = func

	r0 レジスタがスタックポインタの役割りをしている.

(*2) 函数復帰

	rts

	疑似コード

	pc = memory[r0]
	r0 += 4

	しかしコンパイラは大抵 rtsd 命令を生成する. (*4) を参照.

(*3) プロローグ

	pushm	r7-r10
	add	#-128, r0

	上は 128 バイトのローカル領域を使用する函数のプロローグである. pushm 命令
	はオプショナルであり, どのレジスタを保存するかはコンパイラ次第だが, r7 以降の
	レジスタの値は函数の呼び出し前後で保存復元がされる.

	+--------------------+ <- r0_{new}
	|                    |
	|                    |
	|                    |
	|     local area     |
	|                    |
	|                    |
	|                    |
	+--------------------+ +128
	|      r7_{old}      |
	+--------------------+
	|      r8_{old}      |
	+--------------------+
	|      r9_{old}      |
	+--------------------+
	|      r10_{old}     |
	+--------------------+ <- r0_{old}
	|   return address   |
	+--------------------+ 


(*4) エピローグ

	rtsd	#148, r7-r10

	上は 128 バイトのローカル領域を使用する函数のプロローグで, 但しエピローグで
	r7, ..., r10 をスタックに保存した場合のものである.

	128 + 4 * 4 + 4 = 148

	この命令の実行により r7, ..., r10 が復元され, プログラムの制御は呼び出しもと
	に返る.

(*5) 通常の函数の引数と戻り値

        第 1 引数 : r1
	第 2 引数 : r2
	第 3 引数 : r3
	第 4 引数 : r4
	第 5 引数以降 : スタックに積む
	
	例えば

	int f(int a0, int a1, int a2, int a3, int a4);

	f(10, 11, 12, 13, 14);

	に対して f の先頭アドレスでは

	r1 = 10, r2 = 11, r3 = 12, r4 = 13


	+--------------------+ <- r0
	|   return address   |
	+--------------------+ 
	|         14         |
	+--------------------+

	のようになっている.
	
	可変個引数を取る函数の引数はスタックで渡される.
	
	函数の戻り値は r1 レジスタにセットされる.

(*6) long long を引数にとる函数, 返す函数

	sizeof(long long) = 8

	引数に対して 2 つのレジスタが使用されて函数に渡されるが, r4 とスタックを
	使用して渡すことはなくその場合はスタックに積まれる. 例えば

	long long f(int a0, long long a1, long long a2);

	f(10, 0x123456789abcdef0LL, 0x1122334455667788LL);

	に対して f の先頭アドレスでは

	r1 = 10, r2 = 0x9abcdef0, r3 = 0x12345678

	+--------------------+ <- r0
	|   return address   |
	+--------------------+ 
	|     0x55667788     |
	+--------------------+
	|     0x11223344     |
	+--------------------+

	のようになっている. 函数の戻り値は r1, r2 レジスタにセットされる.
	

(*7) 浮動少数点数を引数にとる函数, 返す函数

        sizeof(float) = sizeof(double) = sizeof(long double) = 4

	RX には FPU があるがレジスタは r1, ..., r4 が (*5) の規則と同じように
	使用される.

(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数に取る函数を呼び出すとき, アドレスを (*5) の規則に従って渡す.
	構造体を返す函数を呼び出すとき戻り値を格納するアドレスを r15 レジスタに
	セットする.
	

