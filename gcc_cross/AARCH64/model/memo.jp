cc1 の雛形

以下は aarch64-elf-gcc の cc1 の雛形をビルドする手順.

% xz -d -c ../gcc-10.2.0.tar.xz | tar xf -
% mv gcc-10.2.0 gcc-10.2.0.aarch64-elf.mine
% cd gcc-10.2.0.aarch64-elf.mine
% patch -p1 < ../gcc-10.2.0.aarch64-elf.mine.diff
% rm -r -f gcc/config/aarch64
% rm -r -f gcc/common/config/aarch64
% tar xvf ../aarch64-elf.mine.tar
% ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=aarch64-elf --with-newlib
% make all-gcc

32 ビット linux の環境では host-i686-pc-linux-gnu/gcc/cc1 がビルドされた.
この cc1 は

#include <stdio.h>

int f(int a, int b)
{
  return a + b;
}

int main()
{
  printf("hello world %d\n", f(5, 6));
  return 0;
}

に対して簡易版 printf の実行環境を利用して期待通り動作する. また以下のように

main のブレークポイントで停止して
step
where
finish
を実行することができている:

% aarch64-elf-gdb -x gdbcom sample.elf
...
Breakpoint 1, main () at a.c:10
10	  printf("hello world %d\n", f(5, 6));
f (a=5, b=6) at a.c:5
5	  return a + b;
#0  f (a=5, b=6) at a.c:5
#1  0x00000000000001e8 in main () at a.c:10
0x00000000000001e8 in main () at a.c:10
10	  printf("hello world %d\n", f(5, 6));
Value returned is $1 = 11
...
%

この cc1 はあくまでも雛形なので int の加算でしかも函数の引数で限定されて実装されている.
