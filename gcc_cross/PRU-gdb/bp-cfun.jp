C の函数のブレークポイント

hello world を試してみた.

(pru-elf-gdb) b main
(pru-elf-gdb) run

main のブレークポイントにヒットしたときに gdb_assert で失敗する.

Breakpoint 3, main (
findvar.c:289: internal-error: value* value_of_register_lazy(frame_info*, int): Assertion `regnum < gdbarch_num_cooked_regs (gdbarch)' failed.
A problem internal to GDB has been detected,
further debugging may prove unreliable.
Quit this debugging session? (y or n) [answered Y; input not from terminal]

このようになる. このとき regnum = 132 なので明らかにおかしい.

gdb-10.2.pru-elf/gdb/dwarf2/frame.c

      realnum = dwarf_reg_to_regnum_or_error
	(gdbarch, cache->reg[regnum].loc.reg);
      return frame_unwind_got_register (this_frame, regnum, realnum);

ここで realnum = 132 になっている.
regnum = 32 から realnum = 132 が計算されること自体が間違い.

realnum を gdb から 32 に書き替えれば期待通り動作していそうなので以下のように修正した:

    case DWARF2_FRAME_REG_SAVED_REG:
#if 0      
      realnum = dwarf_reg_to_regnum_or_error
	(gdbarch, cache->reg[regnum].loc.reg);
#else
      realnum = regnum;
#endif      
      return frame_unwind_got_register (this_frame, regnum, realnum);

さて次は

b puts
run

で似たような状況になる.

gdb-10.2.pru-elf/gdb/dwarf2/loc.c

	    int gdb_regnum = dwarf_reg_to_regnum_or_error (arch, p->v.regno);
	    ULONGEST reg_bits = 8 * register_size (arch, gdb_regnum);

ここで

gdb_regnum = 56

になっている.

p->v.regno = 56

でこれは全く身に覚えのない数である. デバッグ情報のことを良く理解していないのでこれ以上は
修正できそうにない. おそらく puts の引数 s を表示しようとしてエラーしているのだろう.

