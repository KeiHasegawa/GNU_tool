レジスタ番号 132 を調べてみたところ以下を発見した.


.debug_frame セクションの内容(hello.o より読み込んだもの):


00000000 0000000c ffffffff CIE
  Version:               1
  Augmentation:          ""
  Code alignment factor: 1
  Data alignment factor: -1
  Return address column: 132

同じことを h8300-elf-gcc で試してみた.

00000000 0010 ffffffff CIE
  Version:               3
  Augmentation:          ""
  Code alignment factor: 1
  Data alignment factor: 2
  Return address column: 12

こっちは 12 らしい. コンパイルしたソースは以下:

int f()
{
  return 0;
}


  return 0;
123456789012

column はこの 12 か?

sh-elf-gcc でも試してみた.

00000000 0000000c ffffffff CIE
  Version:               1
  Augmentation:          ""
  Code alignment factor: 2
  Data alignment factor: -4
  Return address column: 17

どうもカラム数とは無関係らしい.
SH は lr レジスタに戻りアドレスを入れるが lr のレジスタ番号が 17 なのでこのようになっている.
一方 H8 はスタックに戻りアドレスをプッシュして函数にジャンプするからこの限りではない.

PRU の場合 r3 レジスタに戻りアドレスを 14 ビットシフトしたものが入る.

sh-elf-gcc  により生成されたアセンブラソース
pru-elf-gcc により生成されたアセンブラソース

いずれも 17 や 132 に該当する部分を発見できない.

h8300-elf-gcc により生成されたアセンブラソースは

	.section	.debug_frame,"",@progbits
.Lframe0:
	.4byte	.LECIE0-.LSCIE0
.LSCIE0:
	.4byte	0xffffffff
	.byte	0x3
	.string	""
	.uleb128 0x1
	.sleb128 2
	.uleb128 0xc
	.byte	0xc

のようになっている. これは 32 ビット intel のアセンブラ出力に近い. おそらく最初の 0xc
が 12 に該当するということだろう.

そして色々試してみたところ以下のことが判明した:

	.text
	.cfi_sections	.debug_frame
f:
	.cfi_startproc
	ret
	.cfi_endproc	

このソースを pru-elf-as でアセンブルした結果を a.o とすると,


a.o:     ファイル形式 elf32-pru

.debug_frame セクションの内容:


00000000 0000000c ffffffff CIE
  Version:               1
  Augmentation:          ""
  Code alignment factor: 1
  Data alignment factor: -1
  Return address column: 132

  DW_CFA_def_cfa: r16 ofs 0

00000010 0000000c 00000000 FDE cie=00000000 pc=00000000..00000004

のようになる. なのでアセンブラがこの問題の 132 を出している.
さて一体これはどういうことだろう.


問題のソースをアセンブルさせた結果 132 = 0x84 なので 

a.o:     ファイル形式 elf32-pru

セクション .text の内容:
 0000 0000c320                             ...             
セクション .debug_frame の内容:
 0000 0c000000 ffffffff 0100017f 840c1000  ................
 0010 0c000000 00000000 00000000 04000000  ................

確かに出ている.

pru-elf-as を調べてみる. .debug_frame セクションのオフセット 0xc を 0x84
にしている理由を調べるには...

_bfd_set_section_contents

だろうか? しかしこれは根拠がない. 単純にまずは write で調べるべき.

binutils-2.36.1.pru-elf/bfd/section.c:1526

  if (BFD_SEND (abfd, _bfd_set_section_contents,
		(abfd, section, location, offset, count)))
    {

ここにきていた. 1 回目は ".text" 2 回目は ".debug_frame"

(gdb) p section->name
$3 = 0x80efb62 ".debug_frame"
(gdb) p count
$4 = 16
(gdb) x/16bx location
0x817c458:	0x0c	0x00	0x00	0x00	0xff	0xff	0xff	0xff
0x817c460:	0x01	0x00	0x01	0x7f	0x84	0x0c	0x10	0x00
(gdb)

確かに 0x84 がきている.

(gdb) p/x *(char*)(0x817c460 + 4)
$5 = 0x84
(gdb) watch *(char*)(0x817c460 + 4)
Hardware watchpoint 3: *(char*)(0x817c460 + 4)
(gdb) run


  obstack_1grow (&frchain_now->frch_obstack, datum);

ここだった.

(gdb) p datum
$7 = 132
(gdb)

ということは何故ここに daum = 132 でくるか調べることになる.
スタックをさかのぼってみると

      out_one (cie->return_column);

なるほどそれっぽい.

(gdb) up
#2  output_cie (align=2, eh_frame=0, cie=0x817b260) at dw2gencfi.c:1885
(gdb) p cie->return_column
$9 = 132
(gdb)

  cie->return_column = fde->return_column;

セットしていたのはここ. そして

  fde->return_column = DWARF2_DEFAULT_RETURN_COLUMN;

セットしていたのはここ. なるほどそれっぽい.

binutils-2.36.1.pru-elf/gas/config/tc-pru.h

/* Program Counter register number is not defined by TI documents.
   Pick the virtual number used by GCC.  */
#define DWARF2_DEFAULT_RETURN_COLUMN 132

なるほど, これは意図してこうしているように思える.

132 番のレジスタを gdb がアクセスした場合に r3 レジスタを 14 ビット右にシフトしたものを
返すことにすると帳尻は合うように思えるがどうだろうか?
