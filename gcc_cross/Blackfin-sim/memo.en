Blackfin simulator

As described at "Blackfin"

    o break comand doesn't work
    o run command doens't work

I confirmed that very simple program worked well like below:

% bfin-elf-as -g -o test000.o test000.S -mcpu=bf522
% bfin-elf-ld -o test000.elf test000.o -T test000.x -Map test000.map
% bfin-elf-gdb -x gdbcom.000 test000.elf

`break' command and `run' command worked well.
Now, I built "hell world" program and execute like below:

% bfin-elf-gcc -g -o hello.elf hello.c dummy.c -mcpu=bf522
% bfin-elf-gdb -q hello.elf
(gdb) target sim
Connected to the simulator.
(gdb) load
Loading section .text, size 0x2564 lma 0xffa00000
Loading section .init, size 0x12 lma 0xffa02564
Loading section .fini, size 0xe lma 0xffa02576
Loading section .rodata, size 0x14 lma 0xff800000
Loading section .eh_frame, size 0x4 lma 0xff800014
Loading section .ctors, size 0x8 lma 0xff800018
Loading section .dtors, size 0x8 lma 0xff800020
Loading section .data, size 0x83c lma 0xff800028
Start address 0xffa00000
Transfer rate: 94016 bits in <1 sec.
(gdb) b main
Cannot access memory at address 0xffa00298
(gdb)

This was similar with the phenomenon as descrbed at "Blackfin".
The unexpected message is:

Cannot access memory at address 0xffa00000

I confirmed that `sim_write' was not called at this moment.
So, I investigated `sim_write' calling timing at the `test000.elf' situation.
As a result, I noticed that `sim_write' was called at `run' command, not
at `break' command.
And the value

0x2500

was written into address 0x100. Maybe this is special instruction
for break-point implmentation.
Now, at `hello.elf' case, I noticed that `sim_read' failed so that 
the unexpeced message was displayed for `break' command.

I investigated the reson why `sim_read' failed.

    sim_core_mapping *mapping =
      sim_core_find_mapping (core, map,
			    raddr, /*nr-bytes*/1,
			    read_transfer,
			    0 /*dont-abort*/, NULL, NULL_CIA);
    if (mapping == NULL)
      break;      No mapping is found. return NULL;


But the message for `load' command was:

Loading section .text, size 0x2528 lma 0xffa00000
Loading section .init, size 0x12 lma 0xffa02528
Loading section .fini, size 0xe lma 0xffa0253a
Loading section .rodata, size 0x14 lma 0xff800000
Loading section .eh_frame, size 0x4 lma 0xff800014
Loading section .ctors, size 0x8 lma 0xff800018
Loading section .dtors, size 0x8 lma 0xff800020
Loading section .data, size 0x83c lma 0xff800028

So there were at least 8 area at memory map.
Actually, 2 maps existd:

base = 0x0,        bound = 0x7ffffff    : 1st
base = 0xffb00000, bound = 0xffb00fff   : 2nd

I see. Small pieces of memory are gathered into 1 map.
But the address

0xffa00000

was chaged into

0xffb00000

It is not good.

Here, I wondered why 1st map was created. I investigated the reason and
noticed that 

sim_write(mem=0x0, length=2)

was called from below prat:

  /* Allocate external memory if none specified by user.
     Use address 4 here in case the user wanted address 0 unmapped.  */
  if (sim_core_read_buffer (sd, NULL, read_map, &c, 4, 1) == 0)
    {
      bu16 emuexcpt = 0x25;
      sim_do_commandf (sd, "memory-size 0x%lx", BFIN_DEFAULT_MEM_SIZE);
      sim_write (sd, 0, (void *)&emuexcpt, 2);
    }

And the next map was created:

p/x *mapping
$46 = {level = 0x0, space = 0x0, base = 0x0, bound = 0x7ffffff, 
  nr_bytes = 0x8000000, mask = 0xffffffff, free_buffer = 0x0, 
  buffer = 0xae3dc008, device = 0x0, trace = 0x0, next = 0x0}

I tried to comment-outed above code. Then brea-point did not work for
`test000.elf',

I guessed that for the address ragne

0x00000000
0x07ffffff

might be assumed. I quit to compile-out above code.

This bug came from the load address changing. This simulator should be
fixed. And more, it sholud not allocate 128 Mega bytes memory.

But at this time, I fixed target program located address for the
expected result:

% bfin-elf-as -o start.o -g start.S
% bfin-elf-gcc -o hello.o -g -c hello.c -mcpu=bf522
% bfin-elf-gcc -o dummy.o -g -c dummy.c -mcpu=bf522
% bfin-elf-ld -o hello.elf start.o hello.o dummy.o \
-L/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/bfin-elf/lib -lc \
-L/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/lib/gcc/bfin-elf/10.2.0 -lgcc \
-T hello.x -Map hello.map

Now, simulation works well:

% bfin-elf-gdb -q -x gdbcom.001 hello.elf
Reading symbols from hello.elf...
Connected to the simulator.
Loading section .text, size 0x2130 lma 0x100
Loading section .rodata, size 0x10 lma 0x2230
Loading section .rodata.str1.4, size 0x4 lma 0x2240
Loading section .data, size 0x838 lma 0x2244
Start address 0x100
Transfer rate: 84960 bits in <1 sec.
Breakpoint 1 at 0x108: file start.S, line 7.
Breakpoint 2 at 0x118: file hello.c, line 5.
Breakpoint 3 at 0x1aa: file dummy.c, line 28.

Breakpoint 2, main () at hello.c:5
5	  printf("hello world\n");
Dump of assembler code for function main:
   0x00000114 <+0>:	LINK 0xc;		/* (12) */
=> 0x00000118 <+4>:	R0.H = 0x0;		/* (  0)	R0=0x0x0(  0) */
   0x0000011c <+8>:	R0.L = 0x2230;		/* (8752)	R0=0x0x2230(8752) */
   0x00000120 <+12>:	CALL 0x0x2f4 <puts>;
   0x00000124 <+16>:	R0 = 0x0 (X);		/*		R0=0x0(  0) */
   0x00000126 <+18>:	UNLINK;
   0x0000012a <+22>:	RTS;
End of assembler dump.

Breakpoint 3, _write (fd=1, buf=0x3008 "hello world\n", len=12) at dummy.c:28
28	  return len;
$1 = 0x3008 "hello world\n"

Breakpoint 1, end () at start.S:7
7		nop
A debugging session is active.

	Inferior 1 [process 42000] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
%

`_write' is called as I expected.
