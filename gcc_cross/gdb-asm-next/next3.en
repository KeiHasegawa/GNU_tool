PRU gdb next command implementation

I tried to execute `next' command like below program:

	.text
start:
	ldi32	sp, stack
	call	%label(func1)
	call	%label(func2)
end:
	nop
	
func1:
	sub	r2, r2, 134
	sbbo	r3.b2, r2, 128, 6
	add	r4, r2, 134
	sub	r2, r4, 6
	lbbo	r3.b2, r2, 0, 6
	add	r2, r2, 6
	ret


func2:
	sub	r2, r2, 4
	sbbo	r4.b0, r2, 0, 4
	add	r4, r2, 4
	ldi	r1, 256
	sub	r2, r2, r1
	nop
	sub	r2, r4, 4
	lbbo	r4.b0, r2, 0, 4
	add	r2, r2, 4
	ret

At 2nd and 3rd `call' instruction, execute `next' command and expected
result is that the program goes to next line.

At first, I thought that this `next' worked if

  o the stack address if `r3' is saved at stack.
  o whether `r3' is saved or not at stack

were judged correctly. But not. The sequence was below:

0. Get frame ID.
1. `next' command
2. Single step
3. Get frame ID after "2. single step"
4. gdb judges frame ID of 0 is different from frame ID of 3, so get
   the return address for `call' instruction and set the internal break-point
   to the address.
5. Execute without instruction number restriction
6. The break-point of 4 is hit

Just first instruction of `func1' or `func2' was executed and then
frame IDs were queried, which meaned that `r3' was not saved at stack.
When gdb queried return address, just answered the value of `r3', so that
next command worked well as far as this program.

Of cause, this is not complete. `pru-tdep.c' is up-loaded on this web page
as `pru-tdep.c.003'.
