*** gdb-10.2.aarch64-elf/sim/bfin/bfin-sim.c	2021-04-25 13:04:35.000000000 +0900
--- gdb-10.2.bfin-elf/sim/bfin/bfin-sim.c	2021-11-18 10:12:31.000000000 +0900
***************
*** 6289,6294 ****
--- 6289,6470 ----
      }
  }
  
+ #include <assert.h>
+ 
+ static int first_arg(SIM_CPU* cpu)
+ {
+   return cpu->state.dpregs[0];
+ }
+ 
+ static const char* first_string(SIM_CPU* cpu)
+ {
+   int addr = first_arg(cpu);
+   static char buf[1024];
+   for (int i = 0 ; i != sizeof buf/sizeof buf[0] ; ++i ) {
+     char c = GET_BYTE(addr+i);
+     buf[i] = c;
+     if (c == '\0')
+       return &buf[0]; // ok
+   }
+   assert(0 && "not enough buffer");
+   return &buf[0];
+ }
+ 
+ enum arg_class { NONE, WORD, DW, DF, LDF, STR };
+ 
+ static const char* get_part(const char* fmt, enum arg_class* how)
+ {
+   for ( ; *fmt ; ++fmt) {
+     char c = *fmt;
+     if (c == 'd' || c == 'i' || c == 'x' || c == 'u') {
+       if (*how == NONE)
+ 	*how = WORD;
+       return ++fmt;
+     }
+     if (c == 'c') {
+       *how = WORD;
+       return ++fmt;
+     }
+     if (c == 'f') {
+       char prev = *(fmt-1);
+       *how = prev == 'L' ? LDF : DF;
+       return ++fmt;
+     }
+     if (c == 's') {
+       *how = STR;
+       return ++fmt;
+     }
+     if (c == 'l') {
+       if (*how == NONE)
+ 	*how = WORD;
+       else
+ 	*how = DW;
+     }
+   }
+   assert(0 && "unexpected");
+   return fmt;
+ }
+ 
+ static int arg32(SIM_CPU* cpu, int nth)
+ {
+   assert(nth);
+   if (nth < 3)
+     return cpu->state.dpregs[nth];
+   int sp = cpu->state.dpregs[14];
+   int addr = sp + 4 * nth;
+   return GET_LONG(addr);
+ }
+ 
+ static uint64_t arg64(SIM_CPU* cpu, int nth)
+ {
+   assert(nth);
+   if (nth == 1) {
+     uint32_t lo = cpu->state.dpregs[nth];
+     uint64_t hi = cpu->state.dpregs[nth+1];
+     return (hi << 32) | lo;
+   }
+   if (nth == 2) {
+     uint32_t lo = cpu->state.dpregs[nth];
+     int sp = cpu->state.dpregs[14];
+     int addr = sp + 4 * nth;
+     uint64_t hi = GET_LONG(addr);
+     return (hi << 32) | lo;
+   }
+   int sp = cpu->state.dpregs[14];
+   int addr = sp + 4 * nth;
+   uint32_t lo = GET_LONG(addr);
+   uint64_t hi = GET_LONG(addr+4);
+   return (hi << 32) | lo;
+ }
+ 
+ static const char*
+ handle(SIM_CPU* cpu, const char* fmt, int* nth, int* ret)
+ {
+   char c = *fmt;
+   if (c != '%') {
+     putchar(c);
+     ++*ret;
+     return fmt+1;
+   }
+   const char* beg = fmt;
+   c = *++fmt;
+   if (c == '%') {
+     putchar(c);
+     ++*ret;
+     return fmt+1;
+   }
+   enum arg_class how = NONE;  
+   const char* end = get_part(fmt, &how);
+   char part_fmt[256];
+   int n = end - beg;
+   assert(n + 1 < sizeof part_fmt/sizeof part_fmt[0]);
+   strncpy(&part_fmt[0], beg, n);
+   part_fmt[n] = '\0';
+   if (how == WORD) {
+     int arg = arg32(cpu, (*nth)++);
+     *ret += printf(part_fmt, arg);
+     return end;
+   }
+   if (how == DW) {
+     uint64_t arg = arg64(cpu, *nth);
+     *nth += 2;
+     *ret += printf(part_fmt, arg);
+     return end;
+   }
+   if (how == DF || how == LDF) {
+     union {
+       uint64_t i;
+       double d;
+     } u = { arg64(cpu, *nth) };
+     *nth += 2;
+     if (how == DF)
+       *ret += printf(part_fmt, u.d);
+     else
+       *ret += printf(part_fmt, (long double)u.d);
+     return end;
+   }
+   if (how == STR) {
+     uint32_t addr = arg32(cpu, (*nth)++);
+     char buf[256];
+     for (int i = 0 ; i != sizeof buf/sizeof buf[0] ; ++i) {
+       char c = GET_BYTE(addr+i);
+       buf[i] = c;
+       if (c == '\0') {
+ 	*ret += printf(part_fmt, &buf[0]);  // ok
+ 	return end;
+       }
+     }
+     assert(0 && "not enough buffer");
+     return end;
+   }
+   asm("int3");
+   return end;
+ }
+ 
+ static void do_printf(SIM_CPU *cpu)
+ {
+   const char* fmt = first_string(cpu);
+   int argc = 1;
+   int ret = 0;
+   while (*fmt)
+     fmt = handle(cpu, fmt, &argc, &ret);
+   cpu->state.dpregs[0] = ret;
+ }
+ 
+ static void do_puts(SIM_CPU *cpu)
+ {
+   const char* arg = first_string(cpu);
+   int ret = puts(arg);
+   cpu->state.dpregs[0] = ret;
+ }
+ 
+ static void do_putchar(SIM_CPU *cpu)
+ {
+   int arg = first_arg(cpu);
+   int ret = putchar(arg);
+   cpu->state.dpregs[0] = ret;
+ }
+ 
  static bu32
  _interp_insn_bfin (SIM_CPU *cpu, bu32 pc)
  {
***************
*** 6415,6420 ****
--- 6591,6610 ----
      decode_psedoOChar_0 (cpu, iw0), insn_len = 2;
    else if (((iw0 & 0xFF00) == 0xF000) && ((iw1 & 0x0000) == 0x0000))
      decode_psedodbg_assert_0 (cpu, iw0, iw1, pc);
+   else if (iw0 == 0xeef0)
+     exit(0);
+   else if (iw0 == 0xeef1) {
+     do_printf(cpu);
+     insn_len = 2;
+   }
+   else if (iw0 == 0xeef2) {
+     do_puts(cpu);
+     insn_len = 2;
+   }
+   else if (iw0 == 0xeef3) {
+     do_putchar(cpu);
+     insn_len = 2;
+   }
    else
      {
        TRACE_EXTRACT (cpu, "%s: no matching 32-bit pattern", __func__);
