AARCH64 (ARM64) cross compile environment

(*1) AARCH64
(*2) Install with script
(*3) Verification => target sim command is rejected
(*4) Fix for target sim command 
(*5) Verification => start-up routine is not suitable

(*1) AARCH64

https://en.wikipedia.org/wiki/Aarch64

(*2) Install with script

Use the same script with "IQ2000":

set TARGET = aarch64-elf   # Change

(*3) Verification => target sim command is rejected

% aarch64-elf-gcc -g -o hello.elf hello.c
/media/8492805f-d30e-493d-8911-503c83a1d4ab/work/GNU_LANG/lib/gcc/aarch64-elf/10.2.0/../../../../aarch64-elf/bin/ld: /media/8492805f-d30e-493d-8911-503c83a1d4ab/work/GNU_LANG/lib/gcc/aarch64-elf/10.2.0/../../../../aarch64-elf/lib/libg.a(lib_a-exit.o): in function `exit':
/media/8492805f-d30e-493d-8911-503c83a1d4ab/work/GNU_LANG/newlib-4.1.0.aarch64-elf/aarch64-elf/newlib/libc/stdlib/../../../.././newlib/libc/stdlib/exit.c:64: undefined reference to `_exit'
...
%

This error means that `exit' refers to `_exit' but it's not defined.
The same error is reported about:

_exit
_sbrk
_write
_close
_lseek
_read
_fstat
_isatty

% h8300-elf-gcc -g -o hello.elf hello.c
# Above command successed
% h8300-elf-objdump -d hello.elf > aaa

Looking at `aaa' then:

00000214 <_exit>:   # `exit' of `C' level name
     214:	0d 04       	mov.w	r0,r4

00000216 <.LM2>:
     216:	19 11       	sub.w	r1,r1
     218:	5e 00 04 48 	jsr	@0x448:24

0000021c <.LM3>:
     21c:	6b 00 32 04 	mov.w	@0x3204:16,r0
     220:	6f 02 00 2a 	mov.w	@(0x2a:16,r0),r2

00000224 <.LM5>:
     224:	47 02       	beq	.+2 (0x228)

00000226 <.LM6>:
     226:	5d 20       	jsr	@r2

00000228 <.L2>:
     228:	0d 40       	mov.w	r4,r0
     22a:	5e 00 05 74 	jsr	@0x574:24   // call `_exit'


00000574 <__exit>: # `_exit' of `C' level
     574:	79 01 de ad 	mov.w	#0xdead,r1
     578:	79 02 be ef 	mov.w	#0xbeef,r2
     57c:	0c 80       	mov.b	r0l,r0h
     57e:	18 88       	sub.b	r0l,r0l
     580:	01 80       	sleep


`_exit' (i.e. __exit at assembler level) is defined at:
/media/8492805f-d30e-493d-8911-503c83a1d4ab/work/GNU_LANG/newlib-4.1.0.h8300-elf/newlib/libc/sys/h8300hms/_exit.S

At none-64-bit ARM environment, this test program could be built:

% arm-elf-gcc -g -o hello.elf hello.c
% arm-elf-objdump -d hello.elf > aaa

Looking at `aaa' then,

00008250 <exit>:
    8250:	e1a0c00d 	mov	ip, sp
    8254:	e92dd810 	push	{r4, fp, ip, lr, pc}
    8258:	e3a01000 	mov	r1, #0
    825c:	e24cb004 	sub	fp, ip, #4
    8260:	e1a04000 	mov	r4, r0
    8264:	eb000b66 	bl	b004 <__call_exitprocs>
    8268:	e59f3020 	ldr	r3, [pc, #32]	; 8290 <exit+0x40>
    826c:	e5930000 	ldr	r0, [r3]
    8270:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    8274:	e3530000 	cmp	r3, #0
    8278:	1a000001 	bne	8284 <exit+0x34>
    827c:	e1a00004 	mov	r0, r4
    8280:	eb0001b3 	bl	8954 <_exit>
    8284:	e1a0e00f 	mov	lr, pc
    8288:	e1a0f003 	mov	pc, r3
    828c:	eafffffa 	b	827c <exit+0x2c>
    8290:	00010090 	.word	0x00010090

Well, there are some options to get rid of this error. I chosed
a very simple way like below:

% cat dummy.c
int _exit;
int _sbrk;
int _write;
int _close;
int _lseek;
int _read;
int _fstat;
int _isatty;
% aarch64-elf-gcc -g -o hello.elf hello.c dummy.c

Then I tried to run `aarch64-elf-gdb', but

target sim

command failed. 

gdb-10.2.aarch64-elf/sim/aarch64/

I confirmed that libsim.a existed at above directory.

`target sim' command failed at below part:

      if (c->prefixlist && **line && !c->allow_unknown)
	undef_cmd_error (c->prefixname, *line);  // This made it error.

I confirmed that `target' command existed by debugging function
for `cmdlist' structure:

c = lookup_cmd_1 (text, *found->prefixlist, result_list,
			default_args, ignore_help_classes);

At above point, the expeced `*found->prefixlist' are:

core
exec
extended-remote
record
record-btrace
record-core
record-full
remote
sim
tfile

including `sim'. But at this time,

core
exec
extended-remote
record
record-btrace
record-core
record-full
remote
tfile

(*4) Fix for target sim command

gdb-10.2/gdb/init.c

Add below into above file. Acutally `init.c' is a genereated file.
So, for example, executing `configure' may over-write `init.c'

 extern initialize_file_ftype _initialize_ser_socket;
+extern initialize_file_ftype _initialize_remote_sim;
 extern initialize_file_ftype _initialize_mi_cmd_env;

  _initialize_ser_socket ();
+ _initialize_remote_sim ();
  _initialize_mi_cmd_env ();

gdb-10.2/gdb/Makefile

Modify above file like below:

SIM = ../sim/aarch64/libsim.a

SIM_OBS = remote-sim.o

Then, build gdb. This gdb displayed the below message for target sim command:

Target byte order unspecified
unable to create simulator instance

Unfortunately, this was not complete.

But anyway, by this modification, `sim_open' was executed as I expected.
A errror at `sim_open' when calling `sim_config':

sim/common/sim-config.c

I fixed above like below:

  /* verify the target byte order */
#if 0 
  if (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_UNKNOWN)
    {
      sim_io_eprintf (sd, "Target byte order unspecified\n");
      return SIM_RC_FAIL;
    }
#endif  

OK. This worked well.

(*5) Verification => start-up routine is not suitable

Unfortunately, the problem still remained.

% aarch64-elf-gdb hello.elf
(gdb) target sim
(gdb) load
(gdb) run
Starting program: /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/hello.elf 
core: 8 byte write to unmapped address 0xfffffff0 at 0x0

Program received signal SIGSEGV, Segmentation fault.
0x0000000000000000 in ?? ()
(gdb)

The target program "hello world" made a error which acesssed to `0xfffffff0'
and gdb displayed the message as if the target program received `SIGSEGV'.

But the first problem existed at start-up routine:

/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/newlib-4.1.0.aarch64-elf/libgloss/aarch64/crt0.S

This code expects that `sp' is stack pointer register before calling

_mainCRTStartup
(alias _start)

i.e. this start-up routine is the verion for Windows. The address

0xfffffff0

is accessed by below code:

0000000000400138 <_mainCRTStartup>:
  400138:	58000281 	ldr	x1, 400188 <_cpu_init_hook+0x4>
  40013c:	927cec20 	and	x0, x1, #0xfffffffffffffff0
  400140:	9100001f 	mov	sp, x0
  400144:	d280001d 	mov	x29, #0x0                   	// #0
  400148:	a9bf77fd 	stp	x29, x29, [sp, #-16]!

The last `stp' instruction accesses 0xfffffff0 if sp is 0.


gdb + aarch64 simulator problem was resolved, but this is
another problem.

So we have to create start-up routine for aarch64 simulator.
