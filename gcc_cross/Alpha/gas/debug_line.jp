cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.alpha-elf/gas

M-x gdb
gdb --annotate=3 ./as-new
(gdb) run -o test.o -g test.S
...
[Inferior 1 (process 16722) exited normally]
(gdb) 

% alpha-elf-objdump -x -g test.o
...
.text セクションは生成されているが
.debug_line セクションがない.
%

gdb から実行して再現している.

(gdb) b bfd_set_section_contents
(gdb) run
...
bfd_set_section_contents のブレークポイントにヒット
(gdb) p section->name
$2 = 0x81293c4 ".text"
(gdb) c
...
[Inferior 1 (process 17161) exited normally]
(gdb)
.debug_line セクションに対して bfd_set_section_contents は呼び出されていない. 当然と
言えば当然.

(gdb) run
...
bfd_set_section_contents のブレークポイントにヒット
(gdb) p section->next->name
$3 = 0x8126442 ".data"
(gdb) p section->next->next->name
$4 = 0x8151352 ".bss"
(gdb) p section->next->next->next->name
Cannot access memory at address 0x0
(gdb) 

そもそも .debug_line がセクションリストに入っていない.
期待通り動作している vax-elf-as と動作の比較を行なってみる.

cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/binutils-2.36.1.vax-elf/gas

M-x gdb
gdb --annotate=3 ./as-new
(gdb) b bfd_set_section_contents
(gdb) run -o test.o -g test.S
...
bfd_set_section_contents のブレークポイントにヒット
(gdb) p section->name
$1 = 0x80eb438 ".text"
(gdb) p section->next->name
$2 = 0x80eb43e ".data"
(gdb) p section->next->next->name
$3 = 0x8109cd7 ".bss"
(gdb) p section->next->next->next->name
$4 = 0x80ed56e ".debug_line"                          ★
(gdb) p section->next->next->next->next->name
$5 = 0x80ed562 ".debug_info"
(gdb) p section->next->next->next->next->next->name
$6 = 0x80ed59a ".debug_abbrev"
(gdb) p section->next->next->next->next->next->next->name
$7 = 0x80ed5a8 ".debug_aranges"
(gdb) p section->next->next->next->next->next->next->next->name
$8 = 0x80ed5b7 ".debug_str"
(gdb) p section->next->next->next->next->next->next->next->next->name
Cannot access memory at address 0x0
(gdb) 

当然であるがセクションリストに .debug_line 等がある. .bss セクションの次が .debug_line
セクションになるタイミングを調査する.

(gdb) b main
(gdb) run
...
main のブレークポイントにヒット
(gdb) p (char*)0x80eb438
$9 = 0x80eb438 ".text"
(gdb) p (char*)0x80ed56e
$10 = 0x80ed56e ".debug_line"    ★
(gdb)

つまり静的な変数で既にリストに入っているということ. 


binutils-2.36.1.vax-elf/bfd/coff-alpha.c

というファイルがあることに気付く. そこで一旦これまでインストールしたものを削除した:

% rm -f /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/bin/alpha-elf-*

% rm -f -r /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/alpha-elf

もう一度 --target=alpha-coff でインストールをトライ.

やってみた結果は 「Alpha」 => 「--target=alpha-coff でインストール」を参照. いずれに
してもできていなさそう.

そこで「PDP11」 => 「PDP11 の as」 => 「ELF 形式の対応」を参考にしようと考えた.

static void
emit_insn (struct alpha_insn *insn)
{
...
  dwarf2_emit_insn (4);  ★

ここにきている. pdp11-elf-as のときはこの呼び出しを入れることで .bss の次に .debug_line
がくるようになっているが, その限りではないらしい.

(gdb) b dwarf2_finish
(gdb) run
...
dwarf2_finish のブレークポイントにヒット
(gdb)

  if ((!all_segs && emit_other_sections)
      || (!emit_other_sections && !empty_debug_line))
    /* If there is no line information and no non-empty .debug_info
       section, or if there is both a non-empty .debug_info and a non-empty
       .debug_line, then we do nothing.  */
    return;   ★

やはりここで返っている.

(gdb) p all_segs
$2 = (struct line_seg *) 0x0
(gdb) p emit_other_sections
$3 = 1
(gdb) p emit_other_sections
$4 = 1
(gdb) p empty_debug_line
$5 = 1
(gdb)

all_segs が 0 でないのが期待値だが 0 になっている. この値がセットされるのは get_line_subseg
という函数で, その函数は dwarf2_emit_insn から呼び出されることが既に分かっている. そこで

(gdb) b dwarf2_emit_insn
(gdb) b get_line_subseg
(gdb) run
...
dwarf2_emit_insn のブレークポイントにヒット
(gdb)

void
dwarf2_emit_insn (int size)
{
  struct dwarf2_line_info loc;

  if (debug_type != DEBUG_DWARF2
      ? !dwarf2_loc_directive_seen
      : !seen_at_least_1_file ())
    return;   ★  ここで返っている.
    

(gdb) p debug_type
$6 = DEBUG_UNSPECIFIED
(gdb)

これが原因らしい. debug_type は vax-elf-as であれば parse_args でセットされていた:

(gdb) b parse_args
(gdb) run
...
parse_args のブレークポイントにヒット.
(gdb)

以下で処理していた. そこで以下のように追加:

    case 'g':
      alpha_debug = 1;
+     debug_type = DEBUG_DWARF2;
      break;

この修正で期待通り .debug_line 等のセクションが出力されていることを確認した.
