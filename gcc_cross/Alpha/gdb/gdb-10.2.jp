Alpha の gdb

VAX と同じようなやり方をしてみた:

% xz -d -c ../gdb-10.2-1.src/gdb-10.2.tar.xz | tar xf -
% mv gdb-10.2 gdb-10.2.alpha-elf
% cd gdb-10.2.alpha-elf/gdb

d30v, fr30, z8k, i960, mmix, z80, i386, pdp11, vax と同じ対処をした.

gdb-10.2.vax-elf/gdb/configure.tgt:

alpha*-*-linux*)
	# Target: Little-endian Alpha running Linux
	gdb_target_obs="alpha-mdebug-tdep.o alpha-linux-tdep.o \
			linux-tdep.o solib-svr4.o"
	;;
+alpha*-*-elf)
+	gdb_target_obs="alpha-mdebug-tdep.o"
+	gdb_sim=../sim/alpha/libsim.a
+	;;
alpha*-*-netbsd* | alpha*-*-knetbsd*-gnu)


% cd ..
% ./configure --prefix=/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG --target=alpha-elf
% make
...
  GEN    stamp-version
  GEN    xml-builtin.c
make[2]: *** 'gdb' に必要なターゲット '../sim/alpha/libsim.a' を make するルールがありません.  中止.
make[2]: ディレクトリ '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gdb-10.2.alpha-elf/gdb' から出ます
make[1]: *** [Makefile:10068: all-gdb] エラー 2
make[1]: ディレクトリ '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gdb-10.2.alpha-elf' から出ます
make: *** [Makefile:856: all] エラー 2

% cd sim
% tar xf ~/lang/53_GNU_tool/gcc_cross/PDP11/gdb/pdp11.3.tar
% mv pdp11 alpha
% cd alpha

pdp11 を alpha に置換

% make
...
make: *** 'run' に必要なターゲット '/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/simhv312-2.mine/sim/libalpha.a' を make するルールがありません.  中止.
%

普通であれば nop の動作を実現することをまずは目指すが, PDP11, VAX のシミュレータで SIMH なる
ものがあることを既に知っているので, いきなり完成形を目指す.

% cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/simhv312-2.mine/sim/

Makefile.alpha を作成

% make -f Makefile.alpha clean
% make -f Makefile.alpha

libalpha.a を作成. libalpha.a は libpdp11.a や libvax.a と同一の名前のオブジェクト
ファイルを参照しているがコンパイルオプションが異なるようなので一旦 clean のターゲットを make
しておく.

% cd /media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gdb-10.2.alpha-elf/sim/alpha
% make
libsim.a と run を作成できている.

% cd ../../gdb
% make
一応ビルドできている.

例によって nop を数個配置したプログラムを動作させてみる.

と思ったが alpha-elf-as の生成したファイルにデバッグ情報がないことに気付く.

★★★★★★★★★★★★ 2022.05.23 17:58 ここまで. ★★★★★★★★★★★★★

プログラムのロード時にメモリを割り当てるように以下のように修正する.

  	      data_count += size;
  	      bfd_get_section_contents (result_bfd, s, buffer, 0, size);
+ 	      sim_do_commandf(sd, "memory-region 0x%lx,0x%lx", lma, size);
  	      do_write (sd, lma, buffer, size);
  	      found_loadable_section = 1;
  	      free (buffer);
  	    }
  	}
+       else if (s->flags & SEC_ALLOC) {
+         bfd_vma vma = bfd_section_vma(s);
+         bfd_size_type size = bfd_section_size(s);
+         sim_do_command(sd, "memory-fill 0xcc");
+         sim_do_commandf(sd, "memory-region 0x%lx,0x%lx", vma, size);
+       }
      }


2022.05.19 14:52 の時点で以下のようなステータス

1. 0x100 番地に数個の nop を配置したプログラムをステップ実行できている
2. main で停止して step, where, finsh コマンドを実行できている
3. 簡易版 printf, puts, putchar が動作しているが一部まだ不完全

まだ完全ではないがこの時点での

/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/GNU_LANG/gdb-10.2.vax-elf/sim/vax/

を vax.1.tar として

/media/ca850f52-0605-42a7-9fd4-899de9edf461/work/simhv312-2.mine/sim/

を sim.4.tar としてアップロードしておく.
