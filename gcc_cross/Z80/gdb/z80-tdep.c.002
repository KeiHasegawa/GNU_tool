#include "defs.h"
#include "value.h"
#include "arch-utils.h"
#include "regcache.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "dis-asm.h"
#include "dwarf2/frame.h"
#include "frame-base.h"
#include "frame-unwind.h"

static int z80_register_sim_regno(gdbarch* arch, int regnum)
{
  return regnum;
}

static int z80_dbg_reg_to_regnum(gdbarch* arch, int regnum)
{
  return regnum;
}

const char* register_names[] = {
  nullptr, "pc", "sp", "af", "bc", "de", "hl", "ix", "iy"
};

const int pc_regno = 1;
const int sp_regno = 2;

static const char* z80_register_name(gdbarch* arch, int regno)
{
  if (regno < sizeof register_names/sizeof register_names[0])
    return register_names[regno];

  return nullptr;
}

static return_value_convention
z80_return_value(gdbarch* arch, value* function, type* T, regcache* rc,
		 gdb_byte* readbuf, const gdb_byte* writebuf)
{
  asm("int3");
  return return_value_convention(0);
}

static type* z80_register_type(struct gdbarch* gdbarch, int regno)
{
  switch (regno) {
  case pc_regno: return builtin_type(gdbarch)->builtin_func_ptr;
  case sp_regno: return builtin_type(gdbarch)->builtin_data_ptr;
  default:       return builtin_type(gdbarch)->builtin_int16;
  }
}

static void
z80_print_registers_info(gdbarch* arch, ui_file* file,
			 frame_info* frame, int regno, int cpregs)
{
  fprintf_filtered (file, "%s at %s:%d called\n", __func__, __FILE__, __LINE__);
}

static CORE_ADDR z80_skip_prologue(gdbarch* arch, CORE_ADDR pc)
{
  CORE_ADDR func_addr, func_end;
  if (!find_pc_partial_function (pc, nullptr, &func_addr, &func_end))
    return pc;
  
  symtab_and_line sal = find_pc_line (func_addr, 0);
  if (sal.end && sal.end < func_end)
    return sal.end;

  return pc;
}

struct z80_frame {
  bool available;
  CORE_ADDR prologue_start;
  CORE_ADDR prev_sp;
  int size;
  z80_frame(frame_info* frame)
  {
    available = false;
    prologue_start = -1;
    prev_sp = get_frame_sp(frame);
    size = 0;
  }
};

inline void update(uint8_t insn, z80_frame* frame)
{
}

static z80_frame* z80_create_frame(frame_info* frame)
{
  using namespace std;
  z80_frame* ret = new z80_frame(frame);
  CORE_ADDR pc = get_frame_pc(frame);
  auto block_addr = get_frame_address_in_block(frame);
  CORE_ADDR func_end;
  bool found = find_pc_partial_function(block_addr, nullptr,
					&ret->prologue_start, &func_end);
  if (!found) {
    ret->available = false;
    ret->prologue_start = pc;
    return ret;
  }

  symtab_and_line sal = find_pc_line(ret->prologue_start, 0);
  auto end = sal.end ? min(pc, sal.end) : pc;
  ret->available = true;
  for (auto addr = ret->prologue_start; addr != end ; addr += 1) {
    ULONGEST insn;
    if (!safe_read_memory_unsigned_integer(addr, 1, BFD_ENDIAN_LITTLE, &insn))
      return ret;
    update(insn, ret);
  }
  return ret;
}

static void
z80_frame_this_id(struct frame_info* frame, void** ptr, frame_id *id)
{
  auto pf  = reinterpret_cast<z80_frame*>(*ptr);
  if (!pf)
    *ptr = pf = z80_create_frame(frame);

  if (!pf->available)
    *id = frame_id_build_unavailable_stack(pf->prologue_start);
  else
    *id = frame_id_build(pf->prev_sp, pf->prologue_start);
}

static value*
z80_frame_prev_register(frame_info* frame, void** ptr, int regno)
{
  if (regno == pc_regno) {
    auto pc = get_frame_pc(frame);
    return frame_unwind_got_constant(frame, regno, pc);
  }

  if (regno == sp_regno) {
    auto sp = get_frame_sp(frame);
    return frame_unwind_got_constant(frame, regno, sp);
  }

  asm("int3");
  return nullptr;
}

static struct frame_unwind z80_frame_unwind = {
  NORMAL_FRAME,
  default_frame_unwind_stop_reason,
  z80_frame_this_id,
  z80_frame_prev_register,
  nullptr,
  default_frame_sniffer
};

static struct frame_base z80_frame_base = {
  nullptr
};

static int z80_kind_from_pc(gdbarch* arch, CORE_ADDR* addr)
{
  return 0;
}

static const unsigned char* z80_from_kind(gdbarch*, int kind, int* size)
{
  static unsigned char break_inst[] = { 0x76 };  // halt
  *size = sizeof break_inst;
  return &break_inst[0];
}

static CORE_ADDR
z80_push_dummy_call(gdbarch* arch, value* function,
		    regcache* rc, CORE_ADDR bp_addr,
		    int nargs, value** args, CORE_ADDR sp,
		    function_call_return_method rm,
		    CORE_ADDR struct_addr)
{
  asm("int3");
  return 0;
}

static gdbarch* z80_gdbarch_init(gdbarch_info info, gdbarch_list* arches)
{
  gdbarch* arch = gdbarch_alloc(&info, 0);

  set_gdbarch_num_regs(arch, sizeof register_names/sizeof register_names[0]);
  set_gdbarch_register_type(arch, z80_register_type);
  set_gdbarch_register_sim_regno(arch, z80_register_sim_regno);
  set_gdbarch_dwarf2_reg_to_regnum(arch, z80_dbg_reg_to_regnum);
  set_gdbarch_stab_reg_to_regnum(arch, z80_dbg_reg_to_regnum);
  set_gdbarch_register_name(arch, z80_register_name);

  set_gdbarch_pc_regnum(arch, pc_regno);
  set_gdbarch_sp_regnum(arch, sp_regno);
  set_gdbarch_print_registers_info(arch, z80_print_registers_info);

  set_gdbarch_ptr_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_addr_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_return_value(arch, z80_return_value);

  set_gdbarch_skip_prologue (arch, z80_skip_prologue);
  frame_base_set_default (arch, &z80_frame_base);
  dwarf2_append_unwinders(arch);
  frame_unwind_append_unwinder(arch, &z80_frame_unwind);

  set_gdbarch_inner_than (arch, core_addr_lessthan);
  set_gdbarch_breakpoint_kind_from_pc(arch, z80_kind_from_pc);
  set_gdbarch_sw_breakpoint_from_kind(arch, z80_from_kind);
  set_gdbarch_push_dummy_call(arch, z80_push_dummy_call);

  set_gdbarch_char_signed(arch, 0);
  set_gdbarch_int_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_long_bit(arch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_long_bit (arch, 8 * TARGET_CHAR_BIT);

  set_gdbarch_wchar_signed(arch, 0);
  set_gdbarch_wchar_bit(arch, 2 * TARGET_CHAR_BIT);

  set_gdbarch_double_bit(arch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_double_format(arch, floatformats_ieee_double);
  set_gdbarch_long_double_bit(arch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_long_double_format(arch, floatformats_ieee_double);

  set_gdbarch_believe_pcc_promotion(arch, 1);
 
  return arch;
}

void _initialize_z80_tdep();
void
_initialize_z80_tdep()
{
  register_gdbarch_init(bfd_arch_z80, z80_gdbarch_init);
}
