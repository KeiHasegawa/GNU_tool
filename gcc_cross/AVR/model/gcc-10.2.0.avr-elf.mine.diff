*** gcc-10.2.0.org/gcc/config.gcc	2021-10-16 10:31:18.000000000 +0900
--- gcc-10.2.0.avr-elf.mine/gcc/config.gcc	2022-01-07 09:02:53.000000000 +0900
***************
*** 356,363 ****
  	;;
  avr-*-*)
  	cpu_type=avr
- 	c_target_objs="avr-c.o"
- 	cxx_target_objs="avr-c.o"
  	;;
  bfin*-*)
  	cpu_type=bfin
--- 356,361 ----
***************
*** 1333,1469 ****
  	tm_file="${tm_file} arm/aout.h arm/arm.h"
  	;;
  avr-*-*)
! 	tm_file="elfos.h avr/elf.h avr/avr-arch.h avr/avr.h avr/specs.h dbxelf.h avr/avr-stdint.h"
! 	if test x${with_avrlibc} != xno; then
! 	    tm_file="${tm_file} ${cpu_type}/avrlibc.h"
! 	    tm_defines="${tm_defines} WITH_AVRLIBC"
! 	fi
! 	# Work out avr_double_comparison which is 2 or 3 and is used in
! 	# target hook FLOAT_LIB_COMPARE_RETURNS_BOOL to determine whether
! 	# DFmode comparisons return 3-state or 2-state results.
! 	case y${with_double_comparison} in
! 	    y | ytristate)
! 		avr_double_comparison=3
! 		;;
! 	    ybool | ylibf7)
! 		avr_double_comparison=2
! 		;;
! 	    *)
! 		echo "Error: --with-double-comparison= can only be used with: 'tristate', 'bool', 'libf7'" 1>&2
! 		exit 1
! 		;;
! 	esac
! 	case "y${with_libf7}" in
! 	    yno)
! 		# avr_double_comparison as set above.
! 		;;
! 	    ylibgcc)
! 		avr_double_comparison=2
! 		tm_defines="${tm_defines} WITH_LIBF7_LIBGCC"
! 		;;
! 	    y | yyes | ymath-symbols)
! 		avr_double_comparison=2
! 		tm_defines="${tm_defines} WITH_LIBF7_LIBGCC"
! 		tm_defines="${tm_defines} WITH_LIBF7_MATH"
! 		tm_defines="${tm_defines} WITH_LIBF7_MATH_SYMBOLS"
! 		;;
! 	    ymath)
! 		avr_double_comparison=2
! 		tm_defines="${tm_defines} WITH_LIBF7_LIBGCC"
! 		tm_defines="${tm_defines} WITH_LIBF7_MATH"
! 		;;
! 	    *)
! 		echo "Error: --with-libf7=${with_libf7} but can only be used with: 'libgcc', 'math', 'math-symbols', 'yes', 'no'" 1>&2
! 		exit 1
! 		;;
! 	esac
! 	tm_defines="${tm_defines} WITH_DOUBLE_COMPARISON=${avr_double_comparison}"
! 	case y${with_double} in
! 	    y32)
! 		avr_double=32
! 		tm_defines="${tm_defines} HAVE_DOUBLE32"
! 		;;
! 	    y64)
! 		avr_double=64
! 		tm_defines="${tm_defines} HAVE_DOUBLE64"
! 		;;
! 	    y64,32)
! 		avr_double=64
! 		avr_double_multilib=1
! 		tm_defines="${tm_defines} HAVE_DOUBLE32"
! 		tm_defines="${tm_defines} HAVE_DOUBLE64"
! 		tm_defines="${tm_defines} HAVE_DOUBLE_MULTILIB"
! 		;;
! 	    y | y32,64)
! 		avr_double=32
! 		avr_double_multilib=1
! 		tm_defines="${tm_defines} HAVE_DOUBLE32"
! 		tm_defines="${tm_defines} HAVE_DOUBLE64"
! 		tm_defines="${tm_defines} HAVE_DOUBLE_MULTILIB"
! 		;;
! 	    *)
! 		echo "Error: --with-double= can only be used with: '32', '32,64', '64,32', '64'" 1>&2
! 		exit 1
! 		;;
! 	esac
! 	case y${with_long_double} in
! 	    y32)
! 		avr_long_double=32
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE32"
! 		;;
! 	    y64)
! 		avr_long_double=64
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE64"
! 		;;
! 	    y | y64,32)
! 		avr_long_double=64
! 		avr_long_double_multilib=1
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE32"
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE64"
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE_MULTILIB"
! 		;;
! 	    y32,64)
! 		avr_long_double=32
! 		avr_long_double_multilib=1
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE32"
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE64"
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE_MULTILIB"
! 		;;
! 	    ydouble)
! 		avr_long_double=${avr_double}
! 		tm_defines="${tm_defines} HAVE_LONG_DOUBLE_IS_DOUBLE"
! 		if test y${avr_double_multilib} = y1; then
! 		    tm_defines="${tm_defines} HAVE_LONG_DOUBLE32"
! 		    tm_defines="${tm_defines} HAVE_LONG_DOUBLE64"
! 		else
! 		    tm_defines="${tm_defines} HAVE_LONG_DOUBLE${avr_long_double}"
! 		fi
! 		;;
! 	    *)
! 		echo "Error: --with-long_double= can only be used with: '32', '32,64', '64,32', '64', 'double'" 1>&2
! 		exit 1
! 		;;
! 	esac
! 	if test ${avr_long_double}x${avr_long_double_multilib}y${avr_double_multilib}z = 32xy1z; then
! 	    if test y${with_long_double} != ydouble; then
! 		echo "Error: --with-double=${with_double} requests a multilib for double, but long double is always 32 bits wide due to --with-long-double=${with_long_double}" 1>&2
! 		exit 1
! 	    fi
! 	fi
! 	if test ${avr_double}x${avr_long_double_multilib}y${avr_double_multilib}z = 64x1yz; then
! 	    echo "Error: --with-long-double=${with_long_double} requests a multilib for long double, but double is always 64 bits wide due to --with-double=64" 1>&2
! 	    exit 1
! 	fi
! 	if test y${avr_double}${avr_long_double} = y6432; then
! 	    echo "Error: double default of 64 bits from --with-double=${with_double} conflicts with default of 32 bits for long double from --with-long-double=${with_long_double}" 1>&2
! 	    exit 1
! 	fi
! 	tm_defines="${tm_defines} WITH_DOUBLE${avr_double}"
! 	tm_defines="${tm_defines} WITH_LONG_DOUBLE${avr_long_double}"
! 	tmake_file="${tmake_file} avr/t-avr avr/t-multilib"
! 	use_gcc_stdint=wrap
! 	extra_gcc_objs="driver-avr.o avr-devices.o"
! 	extra_objs="avr-devices.o avr-log.o"
  	;;
  bfin*-elf*)
  	tm_file="${tm_file} dbxelf.h elfos.h newlib-stdint.h bfin/elf.h"
--- 1331,1342 ----
  	tm_file="${tm_file} arm/aout.h arm/arm.h"
  	;;
  avr-*-*)
! 	tm_file="dbxelf.h elfos.h usegas.h newlib-stdint.h avr/avr.h"
!  	tm_p_file="avr/avr-protos.h"
!  	md_file="avr/avr.md"
!  	out_file="avr/avr.c"
!  	tmake_file="avr/t-avr"
!  	use_gcc_stdint=wrap
  	;;
  bfin*-elf*)
  	tm_file="${tm_file} dbxelf.h elfos.h newlib-stdint.h bfin/elf.h"
