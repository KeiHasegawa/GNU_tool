i386 のシミュレータ作成メモ

まずは h8300-elf で gdb をビルドする.

これで h8300-elf 用の gdb ができるが, 最後の gdb を生成するマンド

g++  -g -O2     -pthread  \
	-o gdb ... \
	../sim/h8300/libsim.a \

のようになっているのでこれを

g++  -g -O2     -pthread  \
	-o gdb ... \
	-L../sim/i386 -lsim \

のように変更する. そして ../sim/i386 ディレクトリを新規に作成して, そこに DLL

libsim.so

あるいは

libsim.dll

を作成しておく. これは最初意図的に空の DLL にしておく. そうすれば
最後のリンクコマンドで undefined reference to `...' というエラーが出る.
それが以下のシンボル:

sim_open
sim_close
sim_fetch_register
sim_store_register
sim_load
sim_create_inferior
sim_resume
sim_stop
sim_stop_reason
sim_write
sim_read
sim_info
sim_do_command
sim_complete_command
default_callback

最後の default_callback 以外は函数で, default_callback は
ある構造体の型の変数である. しかし差し当たってこれはそれほど重要ではない.

まずはリンクを通すためにこれらのシンボルを

libsim.so

あるいは

libsim.dll

に定義しておけばリンクだけは成功する.
この新しい i386 用の gdb を起動するためには libsim.so あるいは libsim.dll を実行時
ロードできるようにしておくようにする. これには環境変数をシステムに合わせて適切にセットする
必要がある.

linux % setenv LD_LIBRARY_PATH $LD_LIBRARY_PATH:/home/khasegawa/gdb-10.2/sim/i386

cygwin % setenv PATH $PATH:/home/khasegawa/gdb-10.2/sim/i386

実行時にロードできなければ, 「libsim.{so,dll} をロードできない」というメッセー
ジが出る. DLL にすればシミュレータを修正した後に gdb とリンクし直す必要がなくて
便利である. libsim.a のように static リンクライブラリにしてもよい. この場合は
libsim.a 更新した後は gdb とリンクし直す必要がある.

さてとりあえず gdb を起動できるようになったら, おそらく default_callback
の定義の仕方にもよるが, 実行時エラーを引き起こすと思う.

あなたが十分調査した上で default_callback を定義していればそうではないが,
私は調査しなかったのでそうなった.

void sim_open(){ abort(); }  // とりあえず呼ばれたらそれと分かるようにしておく.

...

void default_callback(){ abort(); }    // 函数だと思い込んでいた. 実は変数だった.

予定では abort が呼ばれるはずだったが, そうはならないわけだ.
