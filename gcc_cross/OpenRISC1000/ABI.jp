OpenRISC 1000 の ABI

(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*1) 函数呼び出し

	l.jal	func

	疑似コード

	r9 = (l.japl 命令の次の次のアドレス)
	pc = func

	この命令は遅延分岐である.

(*2) 函数復帰

	l.jr	r9

	この命令は遅延分岐である.
	
(*3) プロローグ

	l.addi	r1, r1, -136
	l.sw	128(r1), r2
	l.addi	r2, r1, 136
	l.sw	132(r1), r9
	
	上は 128 バイトのローカルエリアを使用する函数のプロローグである.	
	
	+----------------------+ <- r1_{new}
        |                      |
        |                      |
        |      local area      |
        |                      |
        |                      |
	+----------------------+ +128
	|        r2_{old}      |
	+----------------------+ +132
	|        r9_{old}      |
	+----------------------+ <- r1_{old}, r2_{new}

(*4) エピローグ

	l.lwz	r2, 128(r1)
	l.lwz	r9, 132(r1)
	l.addi	r1, r1, 136
	l.jr	r9
	l.nop

	上は 128 バイトのローカルエリアを使用する函数のエピローグである.
	r2, r9, r1 が復元されて呼び出し元に復帰する.

(*5) 通常の函数の引数と戻り値

	第 1 引数 : r3
	...
	第 5 引数 : r8
	第 6 引数以降 : スタックを使用する

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10, 11, 12, 13, 14, 15, 16, 17);

	に対して f の先頭アドレスでは

	r3 = 10, r4 = 11, r5 = 12, r6 = 13, r7 = 14, r8 = 15

	+----------------------+ <- r1
	|           16         |
	+----------------------+ +4
	|           17         |
	+----------------------+ +8

	のようになっている.
	可変個引数を取る函数に引数を渡す場合, 可変個の引数はスタックが使用される.
	
	函数の戻り値は r11 にセットされる.

(*6) long long を引数にとる函数, 返す函数

        sizeof(long long) = 8

	long long 型の引数に対して 2 つのレジスタが使用される. 但し, r8 とスタックに
	跨って使用されることはなく, この場合はスタックが使用される.
	long long 型の戻り値は r11, r12 にセットされる.

	long long f(int a0, long long a1, long long a2, long long a3);

	f(10, 11LL, 12LL, 0x123456789abcdef0LL);

	に対して, f の先頭アドレスでは

	r3 = 10, r4 = 0, r5 = 11, r6 = 0, r7 = 12

	+----------------------+ <- r1
	|      0x12345678      |
	+----------------------+ +4
	|      0x9abcdef0      |
	+----------------------+ +8

	のようになっている.

(*7) 浮動少数点数を引数にとる函数, 返す函数

	sizeof(float) = 4
	sizeof(double) = 8

	OpenRISC 1000 には FPU がないのでソフトウェアで浮動少数点数演算を行なう.
	float に対しては (*5) の規則が, double, long double に対しては (*6)
	の規則が適用される.

(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数に取る函数を呼び出すとき, レジスタは使用されずに, スタックが使用される.
	構造体を返す函数を呼び出すとき, 戻り値を格納するためのアドレスを r3 レジスタに
	セットする.
