~/lang/53_GNU_tool/gcc_cross/D10V/tool/sample.c

をコンパイルすると gg の呼び出しが期待しないものになっている


	ldi.l	r8, 26721
	ldi.l	r9, 29541
	st2w	r8, @r14
	ldi.l	r8, 26465
	ldi.l	r9, 30561
	st2w	r8, @(4, r14)
	ldi.l	r8, 8299
	ldi.l	r9, 25961
	st2w	r8, @(8, r14)
	ldi.l	r8, 0
	stb	r8, @(12, r14)           char a[] = "hasegawa kei"; のコード
	ldi.l	r8, 16408
	ldi.l	r9, 0
	ldi.l	r10, 0
	ldi.l	r11, 0
	st2w	r8, @sp                 ここで a[] を壊している
	st2w	r10, @(4, sp)           ここで a[] を壊している
	ldi.l	r1, 5
	mv	r0, r14
	bl	gg

フレームポインタ r14 と sp は現状同じアドレスを指している. r14 が sp よりも 8 高い
アドレスになっていれば動きそうだが...

以下のように修正してみる.
	+---------------+ <- sp_{new}	-
	|		|    		^
	~		~		|  crtl->outgoing_args_size
	|		|		V
	+---------------+ <- fp_{new}   -
	|		|    		^
	~		~		| get_frame_size()
	|		|		V
	+---------------+		-
	|     r14_{old} |
	+---------------+
	|     r13_{old} |
	+---------------+ <- sp_{old}


gg を呼び出す直前の状態は期待したものになっている.
gg から printf を呼び出す直前はできているか確認する.

gg の先頭アドレスで r0 = 0x0fec,  r1 = 5 でありスタックは以下のようになっている.

0x0fe4	+---------------+ <-sp
	|    0x4018	|
0x0fe6	+---------------+
	|    0x0000	|
0x0fe8	+---------------+
	|    0x0000	|
0x0fea	+---------------+
	|    0x0000	|
0x0fec	+---------------+
	|   'h', 'a'	|
0x0fed	+---------------+
	|   's', 'e'	|
0x0fee	+---------------+

0x4018_0000_0000_0000 は 6.0 のビット表現である.

gg のプロローグの後は以下のようになっている.

0x0fd0	+---------------+ <- sp
	|		|
0x0fd2	+---------------+
	|		|
0x0fd4	+---------------+
	|		|
0x0fd6	+---------------+
	|		|
0x0fd8	+---------------+ <- r14
	|    0x0fec	|
0x0fda	+---------------+
	|       5	|
0x0fdc	+---------------+
	|		|
0x0fde	+---------------+
	|		|
0x0fe0	+---------------+
	|    r14_{old}	|
0x0fe2	+---------------+
	|    r13_{old}	|
0x0fe4	+---------------+
	|    0x4018	|
0x0fe6	+---------------+
	|    0x0000	|
0x0fe8	+---------------+
	|    0x0000	|
0x0fea	+---------------+
	|    0x0000	|
0x0fec	+---------------+
	|   'h', 'a'	|
0x0fed	+---------------+
	|   's', 'e'	|
0x0fee	+---------------+

プロローグ後の

	ld2w	r8, @(20, r14)
	ld2w	r10, @(24, r14)

はおそらく 6.0 をロードしていると思われるが r14 相対 20 にしている.
r14 相対 12 が正しい.

以下が間違い

int FIRST_PARM_OFFSET(tree func)
{
  (void)func;
  auto size = crtl->outgoing_args_size;
  return size + 4;
}

4 に修正して正常動作を確認できた.
