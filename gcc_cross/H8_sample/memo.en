H8 sample

Now I want to run a program which is located at adress 0x100
and there are some `nop's instruction  by simulator. And also after
executing some `nop's, quit the execution.

At first, we have to build the target program. The source code is

start.S

at this web page. This is not so interesting, but because it's the first
sample, I think it's but suitable. And the problem is to locate this
program at address 0x100, so that we have to notify linker what we want to do.

start.x

is the way of that. There are some annotated points, but you can
understand what it is.

Finaly, you can buiild the target program:

% h8300-elf-as -g start.S -c -o start.o
% h8300-elf-ld -o start.elf start.o -T start.x -Map start.map

then `start.elf' can be generated. And also execute like below:

% h8300-elf-gdb -q -x gdbcom start.elf

here, all commands which we want to do exists at `gdbcom'.
So h8300-elf-gdb will not do interactively, but just terminate.
The resut is:

% h8300-elf-gdb -q -x gdbcom start.elf
Reading symbols from start.elf...
Connected to the simulator.
Loading section .text, size 0xc vma 0x100
Start address 0x100
Transfer rate: 96 bits in <1 sec.
Breakpoint 1 at 0x100: file start.S, line 3.
Breakpoint 2 at 0x10a: file start.S, line 9.

Breakpoint 1, start () at start.S:3
3		nop
Dump of assembler code for function start:
=> 0x00000100 <+0>:	nop	
   0x00000102 <+2>:	nop	
   0x00000104 <+4>:	nop	
   0x00000106 <+6>:	nop	
   0x00000108 <+8>:	nop	
End of assembler dump.

Breakpoint 2, end () at start.S:9
9		nop
A debugging session is active.

	Inferior 1 [process 42000] will be killed.

Quit anyway? (y or n) [answered Y; input not from terminal]
%

Now we can do test for simulator like above. For example,
after one instruction execution, display the register value or
dump memory which is accessed.

On the other hand, if you just want to test simulator, you don't
have to run gdb. You can run a part of simulator by

h8300-elf-run

H8 simulator doesn't support some facility. But AARCH64(ARM64)
simulator does. For example aarch64-elf-gdb outputs the
information if

sim trace-insn
sim trace-disasm
sim trace-decode
sim trace-branch
sim trace-memory

commands are present before simulation. Anyway, these facilities
are supported by some simulator. And

aarch64-elf-run

also gives us these facilities.



