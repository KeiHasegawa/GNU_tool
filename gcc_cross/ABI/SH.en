SH ABI

(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value

(*1) Function call

        jsr @r1

	Pseudo code

	pr = (`jsr' instruction next address)
	pc = r1

	pr register works as, the so-called, link register.

(*2) Return from function

	rts

	Pseudo code

	pc = pr

(*3) Prologue

	mov.l	r14,@-r15
	sts.l	pr,@-r15
	add	#-128,r15
	mov	r15,r14

	Above is prologue of the function which uses 128 bytes local area.

        +-----------------+ <- r15_{new}, r14_{new}
	|                 |
	|                 |
	|  local area     |
	|                 |
	|                 |
	+-----------------+ <- r14 does not point here.
	|     pr_{old}    |
	+-----------------+
	|     r14_{old}   |
	+-----------------+ <- r15_{old}

	This prologue code makes `r14' point to the same address with `r15'.
	But it just depends on this compiler impelemntation. 

(*4) Epilogue

	add	#64,r14
	add	#64,r14
	mov	r14,r15
	lds.l	@r15+,pr
	mov.l	@r15+,r14
	rts

	Above is epilogue of the function which uses 128 bytes local area.
	There, `r14' is added 128 and move to `r15' for preparing to restore
	`r15'. I think `r14' shoud points to the adress. But as I said (*3)
	it just depends on this compiler impeementation.

	Anyway, r14, r15, pr are restored and `rts' execution makes
	return to the caller.
	
(*5) Normal argument and return value

        1st : r4
        2nd : r5
        3rd : r6
        4th : r7
	5th : use stack

	For example,

	int f(int a0, int a1, int a2, int a3, int a4, int a5);

	f(10, 11, 12, 13, 14, 15);

	At the start of `f', registers and stack layout becomes like below:

	r4 = 10, r5 = 11, r6 = 12, r7 = 13

	+-----------------+ <- r15
	|        14       |
	+-----------------+ +4
	|        15       |
	+-----------------+ +8

	Function return value is set to `r0'

(*6) `long long' argument and return value

        sizeof(long long) = 8

	The `long long' type argument is paassed by using 2 registers.
	
	For example,

	f(int a, long long b, long long c);

	f(10, 11L, 12L);

	At the start of `f', registers and stack layout becomes like below:

	r4 = 10, r5 = 0, r6 = 11, r7 = 0

	+-----------------+ <- r15
	|        12       |
	+-----------------+ +4

	Function retun value is set to `r0' and `r1'.


(*7) Floating point number argument and return value

        sizeof(float) = 4
        sizeof(double) = 8
	sizeof(long double) = 8

	Because SH doesn't have FPU, software calculates floating point
	number operation. For `float' same with (*5), For `double' and
	`long double' same with (*6).

	SH2/SH3/SH4 have FPU according to its type.

	For `float', fr4, fr5, ... fr11 are used and stack is used
	for the rest. Return value is set to fr0.
	
	For `double', dr4, dr6, dr8, dr10 are used and stack is used
	for the rest. Retun value is set to dr0

(*8) Structure argument and return value

        When calling function which takes structure argument,
	the first 16 bytes of the argument is passed by using
	r4, ..., r7 and stack is used for the rest.
	For example,

	struct S {
	  int i[6];
	};

	void f(struct S s);

	struct S s = { 10, 11, 12, 13, 14, 15 };
	f(s);

	At the start of `f', registers and stack layout becomes like below:

	r4 = 10, r5 = 11, r6 = 12, r7 = 13

	+-----------------+ <- r15
	|        14       |
	+-----------------+ +4
	|        15       |
	+-----------------+ +8


Appendix:

	usage % sh-elf-gcc -o a.s -S a.c -m2a
	usage % sh-elf-as -o a.o a.s --isa=sh2a

