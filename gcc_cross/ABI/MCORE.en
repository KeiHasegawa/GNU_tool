MCORE ABI

(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value


(*1) Function call

	jbsr	func

	Pseudo code

	r15 = (`jbsr' instruction next address)
	pc = func

(*2) Return from function

	jmp	r15


(*3) Prologue

	subi	sp,8
	stw	r15,(sp)
	stw	r8,(sp,4)
	bgeni	r1,7	// 128 0x80
	subu	sp,r1
	mov	r8,sp

	Above is prologue for the function which uses 128 byte local area.

	+------------+ <- sp_{new}
	|            |
	|    local   |
	|    area    |	
	|            |
	+------------+ <- r8_{new}
	|  r15_{old} |
	+------------+
	|  r8_{old}  |
	+------------+ <- sp_{old}


(*4) Epilogue

	mov	sp,r8
	bgeni	r1,7	// 128 0x80
	addu	sp,r1
	ldw	r15,(sp)
	ldw	r8,(sp,4)
	addi	sp,8
	jmp	r15

	Above is epilogue for the function which uses 128 bytes local area.
	r8, r15 and sp are restored and return to callee.

(*5) Normal argument and return value

	1st : r2
	2nd : r3
	3rd : r4
	4th : r5
	5th : r6
	6th : r7
	7th : use stack

	For example,
	
	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10, 11, 12, 13, 14, 15, 16, 17);

	At the start address of `f', registers and stack layout become
	like below:

	r2 = 10, r3 = 11, r4 = 12, r5 = 13, r6 = 14, r7 = 15

	+------------+ <- sp
	|     16     |
	+------------+
	|     17     |
	+------------+

	Function return value is set to `r2'.

(*6) `long long' argument and return value

        sizeof(long long) = 8

        I noticed that compiler did not work.

	For example,

	long long f(long long a0, long long a1, long long a2);

	f(0x123456789abcdef0LL, 0x1122334455667788LL, 0x99aabbccddeeff00);

	At the start address of `f', below was expected.

	r2 = 0x9abcdef0, r3 = 0x12345678, r4 = 0x55667788, r5 = 0x11223344
	r6 = 0xddeeff00, r7 = 0x99aabbcc

	But different values are set to r6 and r7.

	long long g(int b, long long a0, long long a1, long long a2);

	g(10, 0x123456789abcdef0LL, 0x1122334455667788LL, 0x99aabbccddeeff00);

	At the start address of `g'

	r2 = 10, r3 = 0x9abcdef0, r4 = 0x12345678, ...

	or

	r2 = 10, r4 = 0x9abcdef0, r5 = 0x12345678, ...

	was expected, but not.


(*7) Floating point number argument and return value

        sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	MCORE doesn't have FPU so software calculates floating point number
	operation. For `float' same with (*5). For `double' and `long double'
	same with (*6).


(*8) Structure argument and return value

	When calling function which takes structure type arguemnt, first
	24 bytes are set to r2, ..., r7 and the rest is set to stack.
	When calling function which returns structur type, the address
	for the return value is set to `r2'.
	