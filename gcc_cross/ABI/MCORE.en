MCORE の ABI

(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*1) 函数呼び出し

	jbsr	func

	疑似コード

	r15 = (jbsr 命令の次のアドレス)
	pc = func

(*2) 函数復帰

	jmp	r15


(*3) プロローグ

	subi	sp,8
	stw	r15,(sp)
	stw	r8,(sp,4)
	bgeni	r1,7	// 128 0x80
	subu	sp,r1
	mov	r8,sp

	上は 128 バイトのローカルエリアを使用する函数のプロローグである.

	+------------+ <- sp_{new}
	|            |
	|    local   |
	|    area    |	
	|            |
	+------------+ <- r8_{new}
	|  r15_{old} |
	+------------+
	|  r8_{old}  |
	+------------+ <- sp_{old}


(*4) エピローグ

	mov	sp,r8
	bgeni	r1,7	// 128 0x80
	addu	sp,r1
	ldw	r15,(sp)
	ldw	r8,(sp,4)
	addi	sp,8
	jmp	r15

	上は 128 バイトのローカルエリアを使用する函数のエピローグである.
	r8, r15, sp が復元され呼び出し元に復帰する.

(*5) 通常の函数の引数と戻り値

	第 1 引数 : r2
	第 2 引数 : r3
	第 3 引数 : r4
	第 4 引数 : r5
	第 5 引数 : r6
	第 6 引数 : r7
	第 7 引数以降 : スタックに積む.

	例えば,
	
	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10, 11, 12, 13, 14, 15, 16, 17);

	に対して f の先頭アドレスでは

	r2 = 10, r3 = 11, r4 = 12, r5 = 13, r6 = 14, r7 = 15

	+------------+ <- sp
	|     16     |
	+------------+
	|     17     |
	+------------+

	のようになっている.
	函数の戻り値は r2 レジスタにセットされる.

(*6) long long を引数にとる函数, 返す函数

        sizeof(long long) = 8

        なんかコンパイラができていないっぽい.

	long long f(long long a0, long long a1, long long a2);

	f(0x123456789abcdef0LL, 0x1122334455667788LL, 0x99aabbccddeeff00);

	に対して f の先頭アドレスで

	r2 = 0x9abcdef0, r3 = 0x12345678, r4 = 0x55667788, r5 = 0x11223344
	r6 = 0xddeeff00, r7 = 0x99aabbcc

	となるのが期待値だが, r6 と r7 に違う値がセットされている.

	long long g(int b, long long a0, long long a1, long long a2);

	g(10, 0x123456789abcdef0LL, 0x1122334455667788LL, 0x99aabbccddeeff00);

	に対しても g の先頭アドレスで

	r2 = 10, r3 = 0x9abcdef0, r4 = 0x12345678, ...

	もしくは

	r2 = 10, r4 = 0x9abcdef0, r5 = 0x12345678, ...

	のようになるのが期待値だがいずれでもない.


(*7) 浮動少数点数を引数にとる函数, 返す函数

        sizeof(float) = 4

	MCORE には FPU がないので浮動少数点数演算はソフトウェアで行なう.
	
	float に対しては (*5) の規則が適用される. double, long double に対しては
	(*6) と同じになると予測される.

(*8) 構造体を引数にとる函数, 構造体を返す函数

	構造体を引数にとる函数を呼び出すとき先頭の 24 バイトが r2, ..., r7 レジスタ
	にセットされ残りはスタックにセットされる.
	構造体を返す函数を呼び出すとき戻り値を格納するアドレスが r2 にセットされる.
	