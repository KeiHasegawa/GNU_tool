Compact RISC ABI

(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long' and `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value


(*1) Function call

	bal (ra), func@c

	Pseudo code
	
	ra = (`bal' instruction next address) >> 1
	pc = func

	ra is alias of `r14'.

(*2) Return from function

	jump	 (ra)

	Pseudo code

	pc = (ra << 1)

	Compiler generates `popret' instruction for none-leaf function.
	See also (*4).

(*3) Prologue

	push	$2, r13, ra
	addd	$-128, (sp)
	movd	(sp), (r13)

	Above is prologue for the function which uses 128 bytes local area.

	+----------------+ <- sp_{new}, r13_{new}
	|                |
	|                |
	|   local area   |
	|                |
	|                |
	+----------------+ +128
	|     r13_{old}  |
	+----------------+ +132
	|     ra_{old}   |
	+----------------+ <- sp_{old}

(*4) Epilogue

	movd	(r13), (sp)
	addd	$128, (sp)
	popret	$2, r13, ra

	Above is epilogue for the function which uses 128 bytes local area.
	`r13', `sp' and `ra' are restored and return to callee.

(*5) Normal argument and return value

        sizeof(int) = 2

	1st : r2
	2nd : r3
	3rd : r4
	4th : r5
	5th : r6
	6th : use stack

	For example,

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10,11,12,13,14,15,16,17);

	At start address of `f', registers and stack layout become
	like below:   

	r2 = 10, r3 = 11, r4 = 12, r5 = 13, r6 = 14

	+----------------+ <- sp
	|       15       |
	+----------------+ +2
	|       16       |
	+----------------+ +4
	|       17       |
	+----------------+ +6

	Function return value is set to `r0'.
	
(*6) `long' and `long long' argument and return value

        sizeof(long) = 4
        sizeof(long long) = 8


	For `long' type argument, 2 registers are used and the rest is
	set to stack. Especailly `long' type argument is set to stack
	except for `r6' and stack .
	For example,

	long f(int a0, long a1, int a2, long a3);

	f(10,0x12345678L,11, 0x9abcdef0L);

	At the start address of `f' registers and stack layout become
	like belw:

	r2 = 10, r3 = 0x5678, r4 = 0x1234, r5 = 11

	+----------------+ <- sp
	|     0xdef0     |
	+----------------+ +2
	|     0x9abc     |
	+----------------+ +4

	Function return value is set to `r0'and `r1'.

	For `long long' type argument, registers are not used
	and it is set to stack.
	Function return value is set to `r0', `r1', `r2' and `r3'.
	
(*7) Floating point number argument and return value

        sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	Compact RISC doesn't have FPU so software calculates floating point
	number operation. For `float' same with `long'. For `double' or
	`long double'  same with `long long'.

(*8) Structure argument and return value

	When calling function which takes structure type, no register is
	used and stack is used.
	When calling function which returns structure type, the adddress
	for the return value is set to `r0' and `r1'.
