RL78 ABI

(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long', `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value


(*1) Function call

	call	!!func

	Pseudo code

	sp -= 4
	memory[sp|0xf0000] = (`call' instruction next address);
	pc = func

	Note that 0xf0000 - 0xf1000 cannot be accessed. So if sp is
	less thant 0x1000, it doesn't work.
	
(*2) Return from function

	ret

	Pseudo code

	pc = memory[sp|0xf0000]
	sp += 4

(*3) Prologue

	subw	sp, #128


(*4) Epilogue

	addw	sp, #4
	ret

(*5) Normal argument and return value

        1st : memory[sp]
	2nd : memory[sp+2]
	...

	Function return value is set to `x' register.

(*6) `long', `long long' argument and return value

	sizeof(long) = 4
	sizeof(long long) = 8

	For `long' type argument
	
        1st : memory[sp]
	2nd : memory[sp+4]
	...

	Function return value is set to r12 and r14, where, r12 and r14
	are memory mapped registers and they are mapped:

	r12	=	0xffef4
	r14	=	0xffef6

	For `long long' type arugment

	1st : memory[sp]
	2nd : memroy[sp+8]
	...

	Function return value is set to r8 and r12, where r8, and r12
	are memory mapped registers and they are mapped:
	
	r8	=	0xffef0
	r12	=	0xffef4

	In other words, r8, r10, r12 and r14 are set by 2 bytes.

(*7) Floating point number argument and return value

	sizeof(float) = sizeof(double) = 4
	sizeof(long double) = 8

	RL78 doesn't have FPU , so software calculates floating point number
	operation.

	For `float' and `double', same with (*5).
	For `long double', same with (*6).

(*8) Structure argument and return value

        When calling the function which takes structure type argument,
	the structure is copied to stack.
	When calling the function which returns structure type,
	the return value is copied to the address 0xffef0, which is
	memory mapped register `r8' address.
