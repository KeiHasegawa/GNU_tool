ARM ABI

(*0) Register alias
(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long long' argument and return value
(*7) floating point number argument and return value
(*8) Structure argument and return value

(*0) Rgister alias

     There are 16 GPRs and they are written as r0, ..., r15 respectively.
     And r11, ..., r15 are used like below:

           Alias    Use
     r11   fp       frame pointer
     r12   ip       use this at `stmfd' instruction
     r13   sp       stack pointer
     r14   lr       link register
     r15   pc       program counter

     A compiler can chose registers for fp, ip and sp.

(*1) Function call

        bl	func

	Pseudo code

	lr = (bl instruction next address)
	pc = func

(*2) Return from function

	mov	pc, lr
	
	But normally, a compiler uses `ldmfd' instruction. See (*3) and (*4).

(*3) Prologue

	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4

	By executing above 3 instructions, stack layout becomes like below:

        +--------------+ <- sp_{new}
        |   fp_{old}   |
        +--------------+ +4
        |   sp_{old}   |
        +--------------+ +8
        |   lr_{old}   |
        +--------------+ <- fp_{new}
        |   pc_{old}+8 |
        +--------------+ <- sp_{old}

(*4) Epilogue

	ldmfd	sp, {fp, sp, pc}

        +--------------+ <- sp
        |   fp_{old}   |
        +--------------+ +4
        |   sp_{old}   |
        +--------------+ +8
        |   lr_{old}   |
        +--------------+ +12

        Pseudo code

	fp = memory[sp]
	sp = memory[sp+4]
	pc = memory[sp+8]

(*5) Normal argument and return value

        1st : r0
        2nd : r1
        3rd : r2
        4th : r3
	5th : use stack

	For example,

	int f(int a0, int a1, int a2, int a3, int a4, int a5);

	f(10, 11, 12, 13, 14, 15);

	At start of `f'

	r0 = 10, r1 = 11, r2 = 12, r3 = 13

        +--------------+ <- sp
        |      14      |
        +--------------+ +4
        |      15      |
        +--------------+ +8

        Return value is set to `r0'

(*6) `long long' argument and return value

        sizeof(long long) = 8

        r0, ..., r3 are use as pair. i.e. if 1st argument type is long long,
	r0 and r1 is used.

	Return value is set to r0 and r1.

(*7) floating point number argument and return value

        sizeof(float) = 4
	sizeof(double) = 8
	sizeof(long double) = 8

	FPU doesn't exist at ARM. Software calculates floating point operation.
	For `float', same with (*5). For `double' and `long double'
	same with (*6).

(*8) Structure argument and return value

        First 16 bytes are set to r0, ... r3 and use stack for the rest.
	For example,
	
	struct S {
          int i[5];	
	};

        struct S s = { 10, 11, 12, 13, 14 };

	When call function with `s', set like below:

	r0 = 10, r1 = 11, r2 = 12, r3 = 13 and memory[sp] = 15

	When calling a function which returns structure, r0 is
	set to the address for the result.
	

