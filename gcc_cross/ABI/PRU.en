PRU ABI

(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value


(*1) Function call

	call	%label(func)

	Pseudo code

	r3 = (`call' instruction next address) << 14
	pc = func

(*2) Return from function

	ret

	Pseoudo code

	pc = r3

	Actually, pc = r3 >> 14

(*3) Prologue

	sub	r2, r2, 134
	sbbo	r3.b2, r2, 128, 6
	add	r4, r2, 134

	Above is prologue for the function which use 128 bytes local area.
	`r2' is used for stack pointer and `r4' is used for frame pointer.
	`r4' points to the diffenret area from general frame pointer,
	but it depends on compiler implementation.
	
	+--------------------+ <- r2_{new}
	|                    |
	|                    |
	|                    |
	|                    |
	|     local area     |
	|                    |
	|                    |
	|                    |
	|                    |
	+--------------------+ +128
	|      hi(r3_{old})  |
	+--------------------+ +130
	|                    |
	|      r4_{old}      |
	+--------------------+ <- r2_{old}, r4_{new}


(*4) Epilogue

	sub	r2, r4, 6
	lbbo	r3.b2, r2, 0, 6
	add	r2, r2, 6
	ret

	Above is epilogue for the function which uses 128 bytes local area.
	r2, r3 and r4 are restored and return to callee.

(*5) Normal argument and return value

        1st : r14
	...
	16th : r29
	17th : use stack

	For example,

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7,
	      int b0, int b1, int b2, int b3, int b4, int b5, int b6, int b7,
	      int c0, int c1);

	f(10, 11, 12, 13, 14, 15, 16, 17,
	  18, 19, 20, 21, 22, 23, 24, 25,
	  26, 27);

        At the start address of `f', resters and stack layout become
	like below:

        r14 = 10, ..., r29 = 25

	+--------------------+ <- r2
	|        26          |
	+--------------------+ +4
	|        27          |
	+--------------------+ +8

	Function return value is set to r14.

(*6) `long long' argument and return value

        sizeof(long long) = 8

	For `long long' type argument, 2 registers are used. For the rest,
	stack is used.
	For example,

	long long f(int a0,
	     	    long long a1, long long a2, long long a3, long long a4,
		    long long a5, long long a6, long long a7, long long a8);

        f(10, 11LL, 12LL, 13LL, 14LL, 15LL, 16LL, 17LL, 0x123456789abcdef0LL);

	At the start address of `f', registers and stack layout become
	like below:

	r14 = 10,
	r15 = 11, r16 = 0, r17 = 12, r18 = 0, r19 = 13, r20 = 0,
	r21 = 14, r22 = 0, r23 = 15, r24 = 0, r25 = 16, r27 = 0

	+--------------------+ <- r2
	|     0x9abcdef0     |
	+--------------------+ +4
	|     0x12345678     |
	+--------------------+ +8

	Function return value is set to r14 and r15.

(*7) Floating point number argument and return value

        sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	PRU doesn't have FPU so software calculates floating point number
	operation.
	For `float', same with (*5). For `double' or `long double' same
	with (*6).

(*8) Structure argument and return value

	When calling function which takes structure type argument, no register
	is used, argument value is copied to stack.
	When calling function which returns structure type, r14 is set
	to the address for the return value.
