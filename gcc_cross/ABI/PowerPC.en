PowerPC ABI

(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value


(*1) Function call

	bl func

	Pseudo code

	lr = (`bl' instruction next address)
	pc = func

(*2) Return from function

	blr

	Pseudo code

	pc = lr

(*3) Prologue

	stwu 1,-144(1)
	mflr 0
	stw 0,148(1)
	stw 31,140(1)
	mr 31,1

	Above is prologue for the function which uses 132 bytes local area.

	+------------------+ <- r1_{new}, r31_{new}
	|     r1_{old}     |
	+------------------+
	|     ********     |
	+------------------+ +8    -
	|                  |       ^
	|                  |       |
	|    local area    |	  132
	|                  |       |
	|                  |       V
	+------------------+ +140  -
	|    r31_{old}     |
	+------------------+ <- r1_{old}
	|     ********     |	
	+------------------+ +148
	|     lr_{old}     |
	+------------------+
	|     ********     |	
	+------------------+

	Acutually 128 bytes array is declared at this function, but
	132 bytes are allocated.
	r31 may be used as frame pointer but it points to the same address
	with r1.

(*4) Epilogue

	addi 11,31,144
	lwz 0,4(11)
	mtlr 0
	lwz 31,-4(11)
	mr 1,11
	blr

	Above is epilogue for the function which uses 132 bytes area.
	r31, lr and r1 are restored and return to callee.
	At prologue of this function, r1 is saved at stack area which
	pointed by itself. But the save value is not used here.

(*5) Normal argument and return value

        1st : r3
        2nd : r4
	...
        8th : r10
	9th : use stack

	For example,

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7,
	      int a8, int a9);
	      
	f(10, 11, 12, 13, 14, 15, 16, 17, 18, 19);

	At the start address of `f', registers and stack layout becomes
	like below:

	r3 = 10, r4 = 11, r5 = 12, r6 = 13, r6 = 14, r7 = 15, r8 = 16, r9 = 17

	+------------------+ <- r1
	|     r1_{old}     |
	+------------------+
	|     ********     |
	+------------------+ +8
	|        18        |
	+------------------+ +12
	|        19        |
	+------------------+ +16

	where, r1_{old} denotes the value of r1 before calling `f'.
	Function return value is set to r3.

(*6) `long long' argument and return value

	sizeof(long long) = 8

	If the 1st argument type is `long long', r3 and r4 are used.
	If the 2nd argument type is `long long', r5 and r6 are used.
	If the 3rd argument type is `long long', r7 and r8 are used.
	If the 4th argument type is `long long', r9 and r10 are used.
	If the 5th argument type is `long long', stack is used.

	For example,

	long long
	f(int a0, long long a1, long long a2, long long a3, long long a4);

	f(10, 0x123456789abcdef0L, 0x1122334455667788,
	  0x99aabbccddeeff00, 0x0fedcba987654321);

	At the start address of `f', registers and stack layout becomes
	like below:

	r3 = 10
	r5 = 0x12345678, r6 = 0x9abcdef0
	r7 = 0x11223344, r8 = 0x55667788
	r9 = 0x99aabbcc, r10= 0xddeeff00

	+------------------+ <- r1
	|     r1_{old}     |
	+------------------+
	|     ********     |
	+------------------+ +8
	|    0x0fedcba9    |
	+------------------+ +12
	|    0x87654321    |
	+------------------+ +16

	Function return value is set to r3 and r4.
	
(*7) Floating point number argument and return value

	sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	For `float'
	
	1st : f1
	...
	8th : f8
	9th : use stack

	Function return value is set to f1.

	For `double', above rule holds.
	i.e. for example, addition of `float' instruction

	fadds

	treats f1 as float, of cause. And  for `double'
	

	faddd

	treats f1 as double.

(*8) Structure argument and return value

     	When calling the fuction which takes structure type argument,
        no register is used. The structre is copied to stack.
	When calling the function which returns structure type,
	r3 is set the address for the return value.

