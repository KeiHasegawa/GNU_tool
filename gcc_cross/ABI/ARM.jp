ARM の ABI

(*0) レジスタの別名
(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数

(*0) レジスタの別名

     ARM の GPR は 16 本あって r0 から r15 で表記するがこのうち以下は
     特別な用途で使用される.	 

           別名      用途
     r11   fp       フレームポインタ
     r12   ip       stmfd 命令で使用される
     r13   sp       スタックポインタ
     r14   lr       リンクレジスタ 
     r15   pc       プログラムカウンタ

     fp, ip, sp にどの GPR を使用するかはコンパイラが選択することはできる.

(*1) 函数呼び出し

        bl	func

	疑似コード

	lr = (bl 命令の次のアドレス)
	pc = func

(*2) 函数復帰

	mov	pc, lr
	
	しかしコンパイラは大抵 ldmfd 命令を使用する. プロローグとエピローグ参照.

(*3) プロローグ

	mov	ip, sp
	stmfd	sp!, {fp, ip, lr, pc}
	sub	fp, ip, #4

	この 3 命令を実行することにより

        +--------------+ <- sp_{new}
        |   fp_{old}   |
        +--------------+ +4
        |   sp_{old}   |
        +--------------+ +8
        |   lr_{old}   |
        +--------------+ <- fp_{new}
        |   pc_{old}+8 |
        +--------------+ <- sp_{old}

	のようになる.

(*4) エピローグ

	ldmfd	sp, {fp, sp, pc}

        +--------------+ <- sp
        |              |
        +--------------+ +4
        |              |
        +--------------+ +8
        |              |
        +--------------+ +12

        疑似コード

	fp = memory[sp]
	sp = memory[sp+4]
	pc = memory[sp+8]

	この命令を実行するときに, 函数を呼び出した時点での fp, sp, lr が
	所定の領域にあれば期待通り復元されることになり呼び出し元に復帰する
	ことになる.	

(*5) 通常の函数の引数と戻り値

        第 1 引数 : r0
        第 2 引数 : r1
        第 3 引数 : r2
        第 4 引数 : r3
	第 5 引数以降 : スタックに積む

	例えば

	int f(int a0, int a1, int a2, int a3, int a4, int a5);

	f(10, 11, 12, 13, 14, 15);

	を呼び出すと f の先頭で

	r0 = 10, r1 = 11, r2 = 12, r3 = 13

        +--------------+ <- sp
        |      14      |
        +--------------+ +4
        |      15      |
        +--------------+ +8

        のようになっている. 戻り値は r0 にセットする.

(*6) long long を引数にとる函数, 返す函数

        sizeof(long long) = 8

	引数に使用するときはレジスタをペアで使用する. すなわち第 1 引数が long long
	ならば r0 と r1 を使用する.
	戻り値が long long ならば r0, r1 に値をセットする.

(*7) 浮動少数点数を引数にとる函数, 返す函数

        sizeof(float) = 4
	sizeof(double) = 8
	sizeof(long double) = 8

	浮動少数点ユニットが ARM にはないらしい. ソフトウェアで計算している.
	float に対しては (*5) と同様. double, long double に対しては
	(*6) と同様.

(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数とする函数を呼び出すとき, 先頭の 16 バイトを r0, ..., r3
	にセットする. それ以降はスタックに積む.

	例えば

	struct S {
          int i[5];	
	};

        struct S s = { 10, 11, 12, 13, 14 };

        この構造体を第 1 引数として函数に渡すとき r0 = 10, r1 = 11, r2 = 12, r3 = 13
	にセットして, 15 はスタックに積む.
	
	構造体を返す函数を呼び出すときは戻り値を格納するアドレスを r0 にセットして
	呼び出す.
	

