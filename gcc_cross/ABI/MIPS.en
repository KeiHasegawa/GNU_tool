MIPS ABI

(*0) Global pointer
(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value


(*0) Global pointer

        .data, .rodata and .sdata area are accessed via `gp'
	register. For accessing these area, `gp' register
	must be set suitably.

	+------------------+
	|                  |
	|                  |
	|      .text       |	
	|                  |
	|                  |
	+------------------+ _gr
	|                  |
	|      .data       |	
	|      .rodata     |
	|      .sdata      |
	|                  |
	+------------------+
	|                  |
	|                  |
	|      .bss        |	
	|                  |
	|                  |
	+------------------+

	mips-elf-ld checks these area are located within 64 KB
	from special symbol `gr' location address.
	At start-up routine `gr' must be set to `_gr' so that
	compiler generatded code can access these area correctly.

(*1) Function call

	jal	func

	Pseudo code

	r31 = (`jal' instruction next address)
	pc = func

	r31 is used as link register.

(*2) Return from function

	j	$31

(*2) Return from function

	addiu	$sp,$sp,-152
	sw	$31,148($sp)
	sw	$fp,144($sp)
	move	$fp,$sp

	Above is prologue for the function which use 144 bytes local area.

	+------------------+ <- sp_{new}, fp_{new}
	|                  |
	|                  |
	|    local area    |	
	|                  |
	|                  |
	+------------------+ <- fp doesn't point here
	|     fp_{old}     |
	+------------------+
	|    r31_{old}     |
	+------------------+ <- sp_{old}

	Acutally 128 bytes array is declared at this function. But
	this compiler allocates 144 bytes. Anyway it depends on this
	compiler implementation. This compiler may use fp register
	as a frame pointer.

(*4) Epilogue

	move	$sp,$fp
	lw	$31,148($sp)
	lw	$fp,144($sp)
	addiu	$sp,$sp,152
	j	$31

	Above is epilogue for the function which uses 144 bytes local area.
	fp, sp and r31 are restored and return to callee.

(*5) Normal argument and return value

        1st : r4
        2nd : r5
        3rd : r6
        4th : r7
	5th : use stack with 16 bytes offset

	For example,
	
	int f(int a0, int a1, int a2, int a3, int a4, int a5);

	f(10, 11, 12, 13, 14, 15);

	At start address of `f', registers and stack layout become like below:

	r4 = 10, r5 = 11, r6 = 12, r7 = 13

	+------------------+ <- sp
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
        |        14        |
	+------------------+
        |        15        |
	+------------------+

	Frunction return value is set to r3.

(*6) `long long' argument and return value

        sizeof(long long) = 8

	If the 1st argument type is `long long', r4 and r5 are used.
	If the 2nd argument type is `long long', r6 and r7 are used.
	For the rest, use stack.

	For example,

	long long f(int a0, long long a1, long long a2);

	f(0x11223344, 0x123456789abcdef0LL, 0x5566778899aabbccLL);

	At the start address of `f', registers and stack layout become
	like below:

	r4 = 0x11223344
	r6 = 0x12345678, r7 = 0x9abcdef0
	
	+------------------+ <- sp
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
        |    0x55667788    |
	+------------------+
        |    0xaabbccdd    |
	+------------------+

	Furnction return value is set to r2 and r3.

(*7) Floating point number argument and return value

        sizeof(float) = 4
	sizeof(double) = 8
	sizeof(long double) = 8

	For `float' argument
	
	1st ： f2
	2nd ： f4
	3rd ： f6
	4th ： use stack with 16 bytes offset

	For example,
	
	float f(float a0, float a1, float a2, float a3, float a4);

	f(10.0F, 11.0F, 12.0F, 13.0F, 14.0F);

	At the start address of `f', registers and stack layout becomes
	like below:

	f2 = 10.0F, f4 = 11.0F, f6 = 12.0F

	+------------------+ <- sp
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
        |       13.0F      |
	+------------------+
        |       14.0F      |
	+------------------+

	Function return value is set to f0.

	For `double' or `long double' argument

	1st ： f2, f3
	2nd ： f4, f5
	3rd ： use stack with 16 bytes offset

	For exmpale,

	double f(double a0, double a1, double a2, double a3, double a4);

	f(10.0, 11.0, 12.0, 13.0, 14.0);

	At the start address of `f', registers and stack layout become
	like below:


	(f2, f3) = 10.0, (f4, f5) = 11.0

	+------------------+ <- sp
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+ +16
        |       12.0       |
        |                  |
	+------------------+ +24
        |       13.0       |
        |                  |	
	+------------------+ +32
        |       14.0       |
        |                  |
	+------------------+

	Function return value is set to (f0, f1)

(*8) Structure argument and return value

        When calling the function which takes structure type, first
	16 bytes are set to r4, r5, r6 and r7. And for the rest,
	stack is used.
	When calling the function which returns structure type,
	r4 is set to the address for the return value.

