RX ABI

(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value


(*1) Function call

	bsr	func

	Pseudo code

	r0 -= 4
	memory[r0] = (`bsr' instruction next address)
	pc = func

	`r0' works as stack pointer.

(*2) Return from function

	rts

	Pseudo code

	pc = memory[r0]
	r0 += 4

	But compiler may generates `rtsd' instruction. Refer to (*4).

(*3) Prologue

	pushm	r7-r10
	add	#-128, r0

	Above is prologue for the function which uses 128 byes local area.
	`pushm' instruction is optional. Compiler saves and restores
	r7, r8, ... between before and after function call.

	+--------------------+ <- r0_{new}
	|                    |
	|                    |
	|                    |
	|     local area     |
	|                    |
	|                    |
	|                    |
	+--------------------+ +128
	|      r7_{old}      |
	+--------------------+
	|      r8_{old}      |
	+--------------------+
	|      r9_{old}      |
	+--------------------+
	|      r10_{old}     |
	+--------------------+ <- r0_{old}
	|   return address   |
	+--------------------+ 


(*4) Epilogue

	rtsd	#148, r7-r10

	Above is epilogue for the function which uses 128 bytes local area,
	and especially r7, ..., r10 are saved at prologue of this function.
	where,
	
	128 + 4 * 4 + 4 = 148

	By executing this instruction, `r7', `r8', `r9' and `r10' are
	restored and return to callee.

(*5) Normal argument and return value

        1st : r1
	2nd : r2
	3rd : r3
	4th : r4
	5th : use stack
	
	For example,

	int f(int a0, int a1, int a2, int a3, int a4);

	f(10, 11, 12, 13, 14);

	At the start address of `f', registers and stacklayout become
	like below:

	r1 = 10, r2 = 11, r3 = 12, r4 = 13

	+--------------------+ <- r0
	|   return address   |
	+--------------------+ 
	|         14         |
	+--------------------+

	Function return value is set to `r1'.

(*6) `long long' argument and return value

	sizeof(long long) = 8

	For a argument, 2 registers are used for passing the argument.
	But `r' and stack is not used. In that case, use stack simply.
	For example,

	long long f(int a0, long long a1, long long a2);

	f(10, 0x123456789abcdef0LL, 0x1122334455667788LL);

	At the start address of `f', registers and stack layout becomes
	like below:

	r1 = 10, r2 = 0x9abcdef0, r3 = 0x12345678

	+--------------------+ <- r0
	|   return address   |
	+--------------------+ 
	|     0x55667788     |
	+--------------------+
	|     0x11223344     |
	+--------------------+

	Function return value is set to  `r1' and `r2'.
	

(*7) Floating point number argument and return value

        sizeof(float) = sizeof(double) = sizeof(long double) = 4

	RX has FPU, but r1, ..., r4 are used samely with (*5).

(*8) Structure argument and return value

        When calling function which takes structure argument, the address
	is set to register or stack samely with (*5).
	When calling function which returns structure type, `r15' is set
	to theaddress for the return value.

