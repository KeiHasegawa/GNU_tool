Z8000 の ABI

(*1) レジスタ

    r10 : フレームポインタ
    r15 : スタックポインタ

(*2) 函数呼び出し

	call	func

	疑似コード

	sp := sp - 2
	[sp] := (call 命令の次のアドレス)
	pc := func

(*3) 函数復帰

	ret	t

	疑似コード

	tmp := [sp]
	sp := sp - 2
	pc := tmp

(*4) プロローグ

        以下は 128 バイトのローカル領域を使用する函数のプロローグ

	push	@r15, r10
	ld	r10, r15
	dec	r15, #128

     +0 +---------------+ <- r15_{new}
	|   		|
	|   		|
	~   		~
	|   		|
	|   		|
   +128 +---------------+ <- r10_{new}
	|   r10_{old}	|
	+---------------+ <- sp_{old}
	| return address|
	+---------------+

(*5) エピローグ

        以下は使用するローカル領域に依存しない函数のエピローグ

	ld	r15, r10
	pop	r10, @r15
	ret	t

	r10, r15 が復元され呼び出し元に復帰する.

(*6) 通常の函数の呼び出し

        sizeof(int) = 2

	第 1 引数 : r7
	第 2 引数 : r6
	...
	第 6 引数 : r2
	第 7 引数以降 : スタックに積む

	例えば

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7);

	f(10, 11, 12, 13, 14, 15, 16, 17);

	に対して f の先頭では

	r7 = 10, r6 = 11, r5 = 12, r4 = 13, r3 = 14, r2 = 15

	+---------------+ <- sp_{old}
	| return address|
	+---------------+ +2
	|	16	|
	+---------------+ +4
	|	17	|
	+---------------+ +6

	のようになっている.

	可変個引数をとる函数はすべてスタックで渡される.

	函数の戻り値は r2 レジスタにセットされる.

(*7) long, long long を引数にとる, あるいは返す函数呼び出し.

        sizeof(long) = 4
	
        sizeof(long long) = 8

	long の引数に対してレジスタがペアで使用される. 例えば

	long f(int a0, long a1, long a2, long a3);

	f(10, 11, 12, 0x12345678);

	に対して f の先頭アドレスでは

	r7 = 10, r5 = 11, r4 = 0, r3 = 12, r2 = 0

	+---------------+ <- sp_{old}
	| return address|
	+---------------+ +2
	|     0x1234	|
	+---------------+ +4
	|     0x5678	|
	+---------------+ +6

	のようになっている. この場合は r6 は使用されない.

	long の戻り値は r2 と r3 に値がセットされる.

	long long の引数に対してレジスタが 4 つ使用される.

	long long の戻り値は r2, r3, r4, r5 に値がセットされる.

(*8) 浮動小数点数を引数に取る, あるいは返す函数呼び出し

        sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	float に対しては long の規則が, double, long double に対して long long
	の規則がそれぞれ適用される.

(*9) 構造体を引数に取る, あるいは返す函数呼び出し.

        4 バイト以下の構造体の引数に対して r6, r7 が使用される. 4 バイトより大きい
	構造体の引数に対しては全てスタックで渡される.

	構造体を返す函数に対してバイト数に依存せず戻り値を格納するアドレスが r7 レジスタ
	にセットされる.
	