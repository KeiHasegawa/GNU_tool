#include "defs.h"
#include "value.h"
#include "arch-utils.h"
#include "regcache.h"
#include "gdbcore.h"
#include "objfiles.h"
#include "dis-asm.h"
#include "dwarf2/frame.h"
#include "frame-base.h"
#include "frame-unwind.h"

#include <cassert>

static int m1750a_register_sim_regno(gdbarch*, int regnum)
{
  return regnum;
}

static int m1750a_dbg_reg_to_regnum(gdbarch*, int regnum)
{
  return regnum;
}

const int pc_regno = 16;
const int sp_regno = 15;

static const char* m1750a_register_name(gdbarch*, int regno)
{
  assert(0 <= regno);

  if (regno < 16) {
    static const char* name[] = {
      "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7",
      "r8", "r9", "r10", "r11", "r12", "r13", "r14", "r15"};
    return name[regno];
  }

  if (regno == pc_regno)
    return "pc";

  return nullptr;
}

static void
m1750a_extract_return_value(type* valtype, regcache* regs, gdb_byte *valbuf)
{
  int len = TYPE_LENGTH(valtype);
  for (int regno = 0 ; len > 0 ; len -= 2, ++regno, valbuf += 2) {
    ULONGEST tmp;
    regcache_cooked_read_unsigned(regs, regno, &tmp);
    store_unsigned_integer(valbuf, 2, BFD_ENDIAN_BIG, tmp);
  }
}

static bool is_aggregate(type_code code)
{
  switch (code) {
  case TYPE_CODE_STRUCT: case TYPE_CODE_UNION: case TYPE_CODE_ARRAY:
    return true;
  default:
    return false;
  }
}

static return_value_convention
m1750a_return_value(gdbarch*, value *function,
		    type *valtype, regcache* rc,
		    gdb_byte *readbuf, const gdb_byte *writebuf)
{
  auto code = valtype->code();
  if (is_aggregate(code)) {
    int len = TYPE_LENGTH(valtype);
    if (len > 8) {
      if (readbuf) {
	ULONGEST r0;
	regcache_raw_read_unsigned(rc, 0, &r0);
	read_memory(r0, readbuf, len);
      }
      return RETURN_VALUE_ABI_RETURNS_ADDRESS;
    }
  }

  assert(!writebuf);

  if (readbuf)
    m1750a_extract_return_value(valtype, rc, readbuf);

  return RETURN_VALUE_REGISTER_CONVENTION;
}

static type* m1750a_register_type(gdbarch* arch, int regno)
{
  switch (regno) {
  case pc_regno: return builtin_type(arch)->builtin_func_ptr;
  case 14: case sp_regno:
    return builtin_type(arch)->builtin_data_ptr;
  default:       return builtin_type(arch)->builtin_int16;
  }
}

static void
m1750a_print_registers_info(gdbarch*, ui_file* file,
			    frame_info* frame, int regno, int cpregs)
{
  fprintf_filtered (file, "%s at %s:%d called\n", __func__, __FILE__, __LINE__);
}

static CORE_ADDR m1750a_skip_prologue(gdbarch*, CORE_ADDR pc)
{
  CORE_ADDR func_addr, func_end;
  if (!find_pc_partial_function (pc, nullptr, &func_addr, &func_end))
    return pc;
  
  symtab_and_line sal = find_pc_line (func_addr, 0);
  if (sal.end && sal.end < func_end)
    return sal.end;

  return pc;
}

struct m1750a_frame {
  bool available;
  CORE_ADDR pc;
  CORE_ADDR prev_sp;
  struct prologue_t {
    CORE_ADDR start;
    CORE_ADDR end;
  } prologue;
};

inline int update(uint8_t insn, m1750a_frame* frame)
{
  return 2;
}

static m1750a_frame* m1750a_frame_create(frame_info* frame)
{
  using namespace std;
  auto ret = new m1750a_frame;
  ret->pc = get_frame_pc(frame);
  ret->prev_sp = get_frame_sp(frame);
  auto block_addr = get_frame_address_in_block(frame);  
  bool found = find_pc_partial_function(block_addr, nullptr,
					&ret->prologue.start,
					&ret->prologue.end);
  if (!found) {
    ret->available = false;
    ret->prologue.start = ret->prologue.end = ret->pc;
    return ret;
  }

  symtab_and_line sal = find_pc_line(ret->prologue.start, 0);
  auto end = sal.end ? min(ret->pc, sal.end) : ret->pc;
  ret->available = true;
  for (auto addr = ret->prologue.start; addr != end ; ) {
    ULONGEST insn;
    if (!safe_read_memory_unsigned_integer(addr, 2, BFD_ENDIAN_BIG, &insn))
      return ret;
    addr += update(insn, ret);
  }
  return ret;
}

static void m1750a_frame_this_id(frame_info* frame, void** ptr, frame_id* id)
{
  auto pf = reinterpret_cast<m1750a_frame*>(*ptr);
  if (!pf)
    *ptr = pf = m1750a_frame_create(frame);
  
  if (!pf->available)
    *id = frame_id_build_unavailable_stack(pf->prologue.start);
  else
    *id = frame_id_build(pf->prev_sp, pf->prologue.start);
}

static value*
m1750a_frame_prev_register(frame_info* frame, void** ptr,  int regno)
{
  if (regno == pc_regno)
    return frame_unwind_got_constant(frame, regno, -1);
  assert(regno == sp_regno);
  auto sp = get_frame_sp(frame);
  return frame_unwind_got_constant(frame, regno, sp);
}

static frame_unwind m1750a_frame_unwind = {
  NORMAL_FRAME,
  default_frame_unwind_stop_reason,
  m1750a_frame_this_id,
  m1750a_frame_prev_register,
  nullptr,
  default_frame_sniffer
};

static CORE_ADDR m1750a_frame_base_address(frame_info* frame, void** ptr)
{
  asm("int3");
  return 0;
}

static frame_base m1750a_frame_base = {
  &m1750a_frame_unwind,
  m1750a_frame_base_address,
  m1750a_frame_base_address,
  m1750a_frame_base_address
};

static int m1750a_kind_from_pc(gdbarch*, CORE_ADDR* addr)
{
  return 0;
}

static const unsigned char* m1750a_from_kind(gdbarch* , int kind, int* size)
{
  static unsigned char break_inst[] = { 0xcc, 0xcc };
  *size = sizeof break_inst;
  return &break_inst[0];
}

static CORE_ADDR
m1750a_push_dummy_call(gdbarch*, value *function,
		       regcache* rc, CORE_ADDR bp_addr,
		       int nargs, value** args, CORE_ADDR sp,
		       function_call_return_method rm,
		       CORE_ADDR struct_addr)
{
  asm("int3");
  return 0;
}

static gdbarch*
m1750a_gdbarch_init(gdbarch_info info, gdbarch_list *arches)
{
  gdbarch* arch = gdbarch_alloc(&info, 0);

  set_gdbarch_num_regs(arch, pc_regno+1);
  set_gdbarch_register_type(arch, m1750a_register_type);
  set_gdbarch_register_sim_regno(arch, m1750a_register_sim_regno);
  set_gdbarch_dwarf2_reg_to_regnum(arch, m1750a_dbg_reg_to_regnum);
  set_gdbarch_stab_reg_to_regnum(arch, m1750a_dbg_reg_to_regnum);
  set_gdbarch_register_name(arch, m1750a_register_name);

  set_gdbarch_pc_regnum(arch, pc_regno);
  set_gdbarch_sp_regnum(arch, sp_regno);
  set_gdbarch_print_registers_info(arch, m1750a_print_registers_info);

  set_gdbarch_ptr_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_addr_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_return_value(arch, m1750a_return_value);

  set_gdbarch_skip_prologue(arch, m1750a_skip_prologue);
  frame_base_set_default(arch, &m1750a_frame_base);
  dwarf2_append_unwinders(arch);
  frame_unwind_append_unwinder(arch, &m1750a_frame_unwind);

  set_gdbarch_inner_than(arch, core_addr_lessthan);
  set_gdbarch_breakpoint_kind_from_pc(arch, m1750a_kind_from_pc);
  set_gdbarch_sw_breakpoint_from_kind(arch, m1750a_from_kind);
  set_gdbarch_push_dummy_call(arch, m1750a_push_dummy_call);

  set_gdbarch_char_signed(arch, 0);
  set_gdbarch_int_bit(arch, 2 * TARGET_CHAR_BIT);
  set_gdbarch_long_bit(arch, 4 * TARGET_CHAR_BIT);
  set_gdbarch_long_long_bit(arch, 8 * TARGET_CHAR_BIT);

  set_gdbarch_wchar_signed(arch, 0);
  set_gdbarch_wchar_bit(arch, 2 * TARGET_CHAR_BIT);

  set_gdbarch_double_bit(arch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_double_format(arch, floatformats_ieee_double);
  set_gdbarch_long_double_bit(arch, 8 * TARGET_CHAR_BIT);
  set_gdbarch_long_double_format(arch, floatformats_ieee_double);

  set_gdbarch_believe_pcc_promotion(arch, 1);
 
  return arch;
}

void _initialize_m1750a_tdep();
void
_initialize_m1750a_tdep()
{
  register_gdbarch_init(bfd_arch_1750a, m1750a_gdbarch_init);
}
