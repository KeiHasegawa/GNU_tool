LatticeMico32 ABI

(*1) Function call
(*2) Return from function
(*3) Prologue
(*4) Epilogue
(*5) Normal argument and return value
(*6) `long long' argument and return value
(*7) Floating point number argument and return value
(*8) Structure argument and return value


(*1) Function call

	calli    func

	Pseudo code
	
	ra = (`calli' instruction next address)
	pc = func


(*2) Return from function

	b        ra

(*3) Prologue

	addi     sp, sp, -140
	sw       (sp+8), fp
	sw       (sp+4), ra
	or       fp, sp, r0
	addi     fp, fp, 140

	+------------------+ <- sp_{new}
	|                  |
	+------------------+ +4
	|     ra_{old}     |
	+------------------+ +8
	|     fp_{old}     |
	+------------------+ +12
	|                  |
	|                  |
	|    local area    |
	|                  |
	|                  |
	+------------------+ <- sp_{old}, fp_{new}

        Above is prologue of function which uses 128 bytes local area.

(*4) Epilogue

	lw       fp, (sp+8)
	lw       ra, (sp+4)
	addi     sp, sp, 140
	b        ra

	Above is epilogue for the function which uses 128 bytes loca area.
	`fp', `ra' and `sp' are restored and return to callee.

(*5) Normal argument and return value

        1st : r1
	...
        8th : r8
	9th : use stack

	For example,

	int f(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7,
	      int a8, int a9);

        f(10, 11, 12, 13, 14, 15, 16, 17, 18, 19);

	At the start address of `f', registers and stack layout become
	like below:

	r1 = 10, r2 = 11, ..., r8 = 17


	+------------------+ <- sp
	|       18         |
	+------------------+ +4
	|       19         |
	+------------------+ +8
	|     ra_{old}     |
	+------------------+ +12

	where, ra_{old} is return address of the function, which call `f'.

	Function return value is set to `r1'.
	
(*6) `long long' argument and return value


	sizeof(long long) = 8

	For `long long' type argument, 2 registers are used and for the
	rest stack is used. However, `r8' and stack are not used for
	a `long long' type argumet. In that case, just stack is used.
	
	For example,

	long long
	f(int a0, long long a1, long long a2, long long a3, long long a4);

	f(10, 11LL, 12LL, 0x123456789abcdef0LL, 0x1122334455667788LL);

	At the start address of `f', registers and stack layout become
	like below:

	r1 = 10, r2 = 0, r3 = 11, r4 = 0, r5 = 12,
	r6 = 0x12345678, r7 = 0x9abcdef0
	

	+------------------+ <- sp
	|    0x11223344    |
	+------------------+ +4
	|    0x55667788    |
	+------------------+ +8
	|     ra_{old}     |
	+------------------+ +12

	where, ra_{old} is return address of the function, which call `f'.

	Function return value is set to `r1' and  `r2'.

(*7) Floating point number argument and return value

	sizeof(float) = 4
	sizeof(double) = sizeof(long double) = 8

	LatticeMico32 doesn't have FPU so software calculates floating point
	number operation. For `float', same with (*5). For `double' or
	`long doublue', same with (*6).

(*8) Structure argument and return value

        When calling function which takes structure type argument,
	if some of `r1', ..., `r8' are avairable and the argument can be
	filled with them, they are used for passing the structure type
	arugment. i.e. The 1st structure argument size is less than or
	equal to 32 bytes, registers are used for passing the argument.

	Otherwise, registers are not used and the argument are copied
	to the stack. And the rest of arguments are passed by using stack
	independently of its type.

	For example,

	struct S { int i[9]; };
	void f(struct S s);

	struct S s = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	f(s, 10, 11, 12);

	At the start address of `f', stack layout becomes like below:

	+------------------+ <- sp
	|                  |
	+------------------+ +4
	|         1        |
	+------------------+ +8
	|         2        |
	+------------------+ +12
	|                  |
	       .......
	|                  |
	+------------------+
	|         9        |
	+------------------+ +40
	|        10        |
	+------------------+ +44
	|        11        |
	+------------------+ +48
	|        12        |
	+------------------+ +52
	|     ra_{old}     |
	+------------------+ +56

	where, ra_{old} is return address of the function, which call `f'.

	When calling fucntion which returns structure type, the address of
	return value is set to `r1'.
	