define_expand

The most simple usage of `define_expand' is like below:

(define_expand "addsi3"
  [(set
    (match_operand:SI 0 "nonimmediate_operand" "")
    (plus:SI
     (match_operand:SI 1 "general_operand" "")
     (match_operand:SI 2 "general_operand" "")))]
  ""
  "if (hasegawa_addsi3_expand(operand0, operand1, operand2)) DONE;")

(define_insn ""
  [(set
    (match_operand:SI 0 "nonimmediate_operand" "")
    (plus:SI
     (match_operand:SI 1 "general_operand" "")
     (match_operand:SI 2 "general_operand" "")))]
  ""
  "%0 := %1 + %2")
...
bool hasegawa_addsi3_expand(rtx x, rtx y, rtx z)
{
  ...
}

`hasegawa_addsi3_expand' is called from `gen_addsi3' which is generated
for `define_insn'

For example,

??? := memory + memory

For above, if you want to load memory operand into register:

bool hasegawa_addsi3_expand(rtx x, rtx y, rtx z)
{
  if (MEM_P(y) && MEM_P(z)) {
    auto yy = gen_rtx_REG(E_SImode, A_REGNUM);
    emit_move_insn(yy, y);
    auto zz = gen_rtx_REG(E_SImode, B_REGNUM);
    emit_move_insn(zz, z);
    auto add = gen_rtx_PLUS(E_SImode, yy, zz);
    emit_move_insn(x, add);
    return true;
  }
  return false;
}
