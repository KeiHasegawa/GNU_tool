define_insn

The most simple usage of `define_insn' is like below:

(define_insn "addsi3"
  [(set
    (match_operand:SI 0 "nonimmediate_operand" "")
    (plus:SI
     (match_operand:SI 1 "general_operand" "")
     (match_operand:SI 2 "general_operand" "")))]
  ""
  "%0 := %1 + %2")

Above defines for the addtion of `SI' i.e. 4 bytes.

If gcc common part generates 4 bytes addition, and then generates code
for it, this part is refered.

"addsi3" following `define_insn' decides function name `gen_addsi3'
which is generated by `genflags', `genemit' and `genoutput'.
Acutually "addsi3" is constructed from

add
si
3

and these have each meanings. If you change one of them, compiler
work very differently. Expaling simply,

insn-opinit.c:

  ena[31] = HAVE_addsi3;

insn-flag.h:

#define HAVE_addsi3 1

like above, `HAVE_addsi3' is refered at generated source file.

"" following "nonimmediate_operand" can be specified `constraint'.

For example,

(define_insn "addsi3"
  [(set
    (match_operand:SI 0 "nonimmediate_operand" "m")
    (plus:SI
     (match_operand:SI 1 "general_operand" "r")
     (match_operand:SI 2 "general_operand" "i")))]
  ""
  "%0 := %1 + %2")

Above defines for the addtion of `SI' i.e. 4 bytes, especially

memory := register + immediate

"" following "%0 := %1 + %2" can be specified condition, and it
is copied to if-statement condition.

The last "%0 := %1 + %2" is template for assembler output.
It can be specifed a piece of code like below:

(define_insn "addsi3"
  [(set
    (match_operand:SI 0 "nonimmediate_operand" "r")
    (plus:SI
     (match_operand:SI 1 "general_operand" "")
     (match_operand:SI 2 "general_operand" "")))]
  ""
  "*
  assert(REG_P(operands[0]);
  return \"add %0, %1, %2\"";
  ")

And also, it can be specified templates for each `constraint' like below:

(define_insn "addsi3"
  [(set
    (match_operand:SI 0 "nonimmediate_operand" "r,r,r")
    (plus:SI
     (match_operand:SI 1 "general_operand" "r,r,r")
     (match_operand:SI 2 "general_operand" "r,m,i")))]
  ""
  "@
  addr %0, %1, %2
  addm %0, %1, %2
  addi %0, %1, %2
  ")
