~/lang/53_GNU_tool/gcc_cross/i960/test/test002/test.elf

の行番号情報に誤りがある件の調査.

(gdb) run -o test.elf default.o test.o -T default.x

で再現している.

% i960-elf-objdump -g test.elf > test.objdump


  /* file /home/khasegawa/lang/53_GNU_tool/gcc_cross/i960/test/test002/test.c line 7 addr 0x280 */
  /* file /home/khasegawa/lang/53_GNU_tool/gcc_cross/i960/test/test002/test.c line 8 addr 0x288 */
  /* file /home/khasegawa/lang/53_GNU_tool/gcc_cross/i960/test/test002/test.c line 9 addr 0x29c */

0x280 -> 0x150
0x288 -> 0x158
0x29c -> 0x16c

が正しい.

(gdb) b bfd_get_section_contents
(gdb) run
...
bfd_get_section_contents のブレークポイントにヒット
(gdb) p *abfd
...
(gdb) p *section
...

test.o の .stab セクションであることを確認した.
(gdb) finish
(gdb) p input_section->_raw_size
$10 = 420
(gdb) x/420bx  data
0x80d56a8:	0x01	0x00	0x00	0x00	0x00	0x00	0x22	0x00
0x80d56b0:	0x82	0x03	0x00	0x00	0x11	0x00	0x00	0x00
0x80d56b8:	0x64	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d56c0:	0x4f	0x00	0x00	0x00	0x64	0x00	0x00	0x00
0x80d56c8:	0x00	0x00	0x00	0x00	0x56	0x00	0x00	0x00
0x80d56d0:	0x3c	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d56d8:	0x65	0x00	0x00	0x00	0x80	0x00	0x00	0x00
0x80d56e0:	0x00	0x00	0x00	0x00	0x87	0x00	0x00	0x00
0x80d56e8:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d56f0:	0x9d	0x00	0x00	0x00	0x80	0x00	0x00	0x00
0x80d56f8:	0x00	0x00	0x00	0x00	0xc4	0x00	0x00	0x00
0x80d5700:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5708:	0xf4	0x00	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5710:	0x00	0x00	0x00	0x00	0x29	0x01	0x00	0x00
0x80d5718:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5720:	0x72	0x01	0x00	0x00	0x80	0x00	0x00	0x00
--Type <RET> for more, q to quit, c to continue without paging--
0x80d5728:	0x00	0x00	0x00	0x00	0xbb	0x01	0x00	0x00
0x80d5730:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5738:	0xde	0x01	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5740:	0x00	0x00	0x00	0x00	0x05	0x02	0x00	0x00
0x80d5748:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5750:	0x27	0x02	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5758:	0x00	0x00	0x00	0x00	0x48	0x02	0x00	0x00
0x80d5760:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5768:	0x5a	0x02	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5770:	0x00	0x00	0x00	0x00	0x6d	0x02	0x00	0x00
0x80d5778:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5780:	0x86	0x02	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5788:	0x00	0x00	0x00	0x00	0xb3	0x02	0x00	0x00
0x80d5790:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5798:	0xcd	0x02	0x00	0x00	0x80	0x00	0x00	0x00
0x80d57a0:	0x00	0x00	0x00	0x00	0xe9	0x02	0x00	0x00
--Type <RET> for more, q to quit, c to continue without paging--
0x80d57a8:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d57b0:	0x0a	0x03	0x00	0x00	0x80	0x00	0x00	0x00
0x80d57b8:	0x00	0x00	0x00	0x00	0x16	0x03	0x00	0x00
0x80d57c0:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d57c8:	0x58	0x03	0x00	0x00	0x80	0x00	0x00	0x00
0x80d57d0:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d57d8:	0x44	0x00	0x02	0x00	0x00	0x00	0x00	0x00
0x80d57e0:	0x00	0x00	0x00	0x00	0x44	0x00	0x03	0x00
0x80d57e8:	0x0c	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d57f0:	0x44	0x00	0x04	0x00	0x18	0x00	0x00	0x00
0x80d57f8:	0x6b	0x03	0x00	0x00	0x24	0x00	0x02	0x00
0x80d5800:	0x00	0x00	0x00	0x00	0x70	0x03	0x00	0x00
0x80d5808:	0xa0	0x00	0x01	0x00	0x40	0x00	0x00	0x00
0x80d5810:	0x75	0x03	0x00	0x00	0xa0	0x00	0x01	0x00
0x80d5818:	0x44	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5820:	0x44	0x00	0x07	0x00	0x20	0x00	0x00	0x00
--Type <RET> for more, q to quit, c to continue without paging--
0x80d5828:	0x00	0x00	0x00	0x00	0x44	0x00	0x08	0x00
0x80d5830:	0x28	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5838:	0x44	0x00	0x09	0x00	0x3c	0x00	0x00	0x00
0x80d5840:	0x7a	0x03	0x00	0x00	0x24	0x00	0x07	0x00
0x80d5848:	0x00	0x00	0x00	0x00
(gdb)

0x20, 0x28, 0x3c がそれぞれ書き換えられる瞬間を捕える.

(gdb) p/x *(char*)0x80d5824
$11 = 0x20
(gdb) p/x *(char*)0x80d5830
$12 = 0x28
(gdb) p/x *(char*)0x80d583c
$13 = 0x3c
(gdb)

ウォッチポイントをセットしたところそれぞれ

0x150
0x158
0x16c

と変更された. ここはできている. しかしさらに変更されている. しかも

0x150 -> 0x280
0x158 -> 0x288
0x16c -> 0x29c

のように変更されているわけではなく全く異なる値になっている.
ということは問題の領域はファイルに出力され別の目的で使用されている可能性が多いにある.

(gdb) b _bfd_elf_set_section_contents
(gdb) run
...
_bfd_elf_set_section_contents のブレークポイントにヒット
(gdb) p *section
...
.stab セクションであることを確認

(gdb) up
#1  0x08066825 in bfd_set_section_contents (abfd=0x80ceed0, section=0x80cf5b0, location=0x80d56a8, offset=120, count=420) at section.c:996
(gdb) x/420bx location
0x80d56a8:	0x01	0x00	0x00	0x00	0x00	0x00	0x22	0x00
0x80d56b0:	0x82	0x03	0x00	0x00	0x11	0x00	0x00	0x00
0x80d56b8:	0x64	0x00	0x00	0x00	0x30	0x01	0x00	0x00
0x80d56c0:	0x4f	0x00	0x00	0x00	0x64	0x00	0x00	0x00
0x80d56c8:	0x30	0x01	0x00	0x00	0x56	0x00	0x00	0x00
0x80d56d0:	0x3c	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d56d8:	0x65	0x00	0x00	0x00	0x80	0x00	0x00	0x00
0x80d56e0:	0x00	0x00	0x00	0x00	0x87	0x00	0x00	0x00
0x80d56e8:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d56f0:	0x9d	0x00	0x00	0x00	0x80	0x00	0x00	0x00
0x80d56f8:	0x00	0x00	0x00	0x00	0xc4	0x00	0x00	0x00
0x80d5700:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5708:	0xf4	0x00	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5710:	0x00	0x00	0x00	0x00	0x29	0x01	0x00	0x00
0x80d5718:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5720:	0x72	0x01	0x00	0x00	0x80	0x00	0x00	0x00
--Type <RET> for more, q to quit, c to continue without paging--
0x80d5728:	0x00	0x00	0x00	0x00	0xbb	0x01	0x00	0x00
0x80d5730:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5738:	0xde	0x01	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5740:	0x00	0x00	0x00	0x00	0x05	0x02	0x00	0x00
0x80d5748:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5750:	0x27	0x02	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5758:	0x00	0x00	0x00	0x00	0x48	0x02	0x00	0x00
0x80d5760:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5768:	0x5a	0x02	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5770:	0x00	0x00	0x00	0x00	0x6d	0x02	0x00	0x00
0x80d5778:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5780:	0x86	0x02	0x00	0x00	0x80	0x00	0x00	0x00
0x80d5788:	0x00	0x00	0x00	0x00	0xb3	0x02	0x00	0x00
0x80d5790:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5798:	0xcd	0x02	0x00	0x00	0x80	0x00	0x00	0x00
0x80d57a0:	0x00	0x00	0x00	0x00	0xe9	0x02	0x00	0x00
--Type <RET> for more, q to quit, c to continue without paging--
0x80d57a8:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d57b0:	0x0a	0x03	0x00	0x00	0x80	0x00	0x00	0x00
0x80d57b8:	0x00	0x00	0x00	0x00	0x16	0x03	0x00	0x00
0x80d57c0:	0x80	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d57c8:	0x58	0x03	0x00	0x00	0x80	0x00	0x00	0x00
0x80d57d0:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d57d8:	0x44	0x00	0x02	0x00	0x30	0x01	0x00	0x00
0x80d57e0:	0x00	0x00	0x00	0x00	0x44	0x00	0x03	0x00
0x80d57e8:	0x3c	0x01	0x00	0x00	0x00	0x00	0x00	0x00
0x80d57f0:	0x44	0x00	0x04	0x00	0x48	0x01	0x00	0x00
0x80d57f8:	0x6b	0x03	0x00	0x00	0x24	0x00	0x02	0x00
0x80d5800:	0x30	0x01	0x00	0x00	0x70	0x03	0x00	0x00
0x80d5808:	0xa0	0x00	0x01	0x00	0x40	0x00	0x00	0x00
0x80d5810:	0x75	0x03	0x00	0x00	0xa0	0x00	0x01	0x00
0x80d5818:	0x44	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5820:	0x44	0x00	0x07	0x00	0x50	0x01	0x00	0x00
--Type <RET> for more, q to quit, c to continue without paging--
0x80d5828:	0x00	0x00	0x00	0x00	0x44	0x00	0x08	0x00
0x80d5830:	0x58	0x01	0x00	0x00	0x00	0x00	0x00	0x00
0x80d5838:	0x44	0x00	0x09	0x00	0x6c	0x01	0x00	0x00
0x80d5840:	0x7a	0x03	0x00	0x00	0x24	0x00	0x07	0x00
0x80d5848:	0x50	0x01	0x00	0x00
(gdb) 

問題の部分は

(gdb) p/x *(int*)0x80d5824
$44 = 0x150
(gdb) p/x *(int*)0x80d5830
$45 = 0x158
(gdb) p/x *(int*)0x80d583c
$43 = 0x16c
(gdb)

のように期待した値になっている. ということは, ...
i960-elf-ld がアドレスとして出力している部分が
i960-elf-objdump や i960-elf-gdb にアドレスとして受け取られていないということだろうか.

とは言え, main のアドレスがずれているが f のアドレスは合っている.
バグはおそらく i960-elf-ld にあるのだが, このファイルを解釈している i960-elf-objdump を
調査してみる必要がある.

しかしその前に以下を試してみた:

% i960-elf-objdump -G -g test.elf > test.objdump
...
34     SLINE  0      2      00000130 0      
35     SLINE  0      3      0000013c 0      
36     SLINE  0      4      00000148 0      
37     FUN    0      2      00000130 875    f:F1
38     PSYM   0      1      00000040 880    a:p1
39     PSYM   0      1      00000044 885    b:p1
40     SLINE  0      7      00000150 0                  ここはできている!
41     SLINE  0      8      00000158 0                  ここはできている!
42     SLINE  0      9      0000016c 0                  ここはできている!
43     FUN    0      7      00000150 890    main:F1
...
int main ()
{ /* 0x150 */
  /* file /home/khasegawa/lang/53_GNU_tool/gcc_cross/i960/test/test002/test.c line 7 addr 0x280 */
  /* file /home/khasegawa/lang/53_GNU_tool/gcc_cross/i960/test/test002/test.c line 8 addr 0x288 */
  /* file /home/khasegawa/lang/53_GNU_tool/gcc_cross/i960/test/test002/test.c line 9 addr 0x29c */

しかしこっちはできていない.

0x280 = 0x150 + 0x130
0x150 : main のアドレス
0x130 : f のアドレス

のような計算をしているように思える.
