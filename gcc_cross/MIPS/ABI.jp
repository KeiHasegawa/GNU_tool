MIPS の ABI

(*0) グローバルポインタ
(*1) 函数呼び出し
(*2) 函数復帰
(*3) プロローグ
(*4) エピローグ
(*5) 通常の函数の引数と戻り値
(*6) long long を引数にとる函数, 返す函数
(*7) 浮動少数点数を引数にとる函数, 返す函数
(*8) 構造体を引数にとる函数, 構造体を返す函数


(*0) グローバルポインタ

	初期値をもつデータは gp レジスタ相対でアクセスされる. このため初期値を
	もつデータにアクセスする前に gp レジスタが適切にセットされる必要がある.

	+------------------+
	|                  |
	|                  |
	|      .text       |	
	|                  |
	|                  |
	+------------------+ _gr
	|                  |
	|      .data       |	
	|      .rodata     |
	|      .sdata      |
	|                  |
	+------------------+
	|                  |
	|                  |
	|      .bss        |	
	|                  |
	|                  |
	+------------------+

	mips-elf-ld は特別なシンボル `_gr' の配置位置からこれらのデータが 64KB に
	収まっているかチェックする.
	スタートアップルーチンでは gr レジスタが `_gr' が配置されているアドレスを
	指すことで main 函数が呼ばれた後に初期値をもつデータに正しくアクセスできるよう
	になる.

(*1) 函数呼び出し

	jal	func

	疑似コード

	r31 = (jal 命令の次のアドレス)
	pc = func

	r31 がリンクレジスタの役割りをしている.

(*2) 函数復帰

	j	$31

(*3) プロローグ

	addiu	$sp,$sp,-152
	sw	$31,148($sp)
	sw	$fp,144($sp)
	move	$fp,$sp

	上は 144 バイトのローカルエリアを使用する函数のプロローグである.
	sp  は r29 の別名.

	+------------------+ <- sp_{new}, fp_{new}
	|                  |
	|                  |
	|    local area    |	
	|                  |
	|                  |
	+------------------+ <- fp はここを指していない.
	|     fp_{old}     |
	+------------------+
	|    r31_{old}     |
	+------------------+ <- sp_{old}

	実際には 128 バイトの配列を宣言したが 144 バイト確保している. しかしそれは
	コンパイラの勝手である. fp はこの時点で sp と同じアドレスを指している.

(*4) エピローグ

	move	$sp,$fp
	lw	$31,148($sp)
	lw	$fp,144($sp)
	addiu	$sp,$sp,152
	j	$31

	上は 144 バイトのローカルエリアを使用する函数のプロローグである. fp, sp, r31
	が復元され呼び出し元に復帰する.

(*5) 通常の函数の引数と戻り値

        第 1 引数 : r4
        第 2 引数 : r5
        第 3 引数 : r6
        第 4 引数 : r7
	第 5 引数以降 : 16 バイト開けてスタックを使用する

	int f(int a0, int a1, int a2, int a3, int a4, int a5);

	f(10, 11, 12, 13, 14, 15);

	に対して f の先頭アドレスでは以下のようになっている.

	r4 = 10, r5 = 11, r6 = 12, r7 = 13

	+------------------+ <- sp
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
        |        14        |
	+------------------+
        |        15        |
	+------------------+

	函数の戻り値は r2 レジスタに値がセットされる.

(*6) long long を引数にとる函数, 返す函数

        sizeof(long long) = 8

	第 1 引数が long long の場合 r4 と r5 が使用される.
	第 2 引数が long long の場合 r6 と r7 が使用される.
	残りはスタックを使用する.

	long long f(int a0, long long a1, int a2, long long a3);

	f(0x11223344, 0x123456789abcdef0LL, 0x44332211, 0x5566778899aabbccLL);

	に対して f の先頭アドレスでは

	r4 = 0x11223344
	r6 = 0x12345678, r7 = 0x9abcdef0
	
	+------------------+ <- sp
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
        |    0x44332211    |
	+------------------+
	|     ********     |
	+------------------+
        |    0x55667788    |
	+------------------+
        |    0xaabbccdd    |
	+------------------+

	のようになっている.

	函数の戻り値は r2 と r3 にセットされる.

(*7) 浮動少数点数を引数にとる函数, 返す函数

        sizeof(float) = 4
	sizeof(double) = 8
	sizeof(long double) = 8

	float に対して
	
	第 1 引数 ： f2
	第 2 引数 ： f4
	第 3 引数 ： f6
	第 4 引数以降 ： 16 バイト開けてスタックを使用
	
	float f(float a0, float a1, float a2, float a3, float a4);

	f(10.0F, 11.0F, 12.0F, 13.0F, 14.0F);

	に対して f の先頭では

	f2 = 10.0F, f4 = 11.0F, f6 = 12.0F

	+------------------+ <- sp
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
        |       13.0F      |
	+------------------+
        |       14.0F      |
	+------------------+

	のようになっている.
	戻り値は f0 にセットされる.

	double, long double に対して

	第 1 引数 ： f2, f3
	第 2 引数 ： f4, f5
	第 3 引数以降 ： 16 バイト開けてスタックを使用

	例えば

	double f(double a0, double a1, double a2, double a3, double a4);

	f(10.0, 11.0, 12.0, 13.0, 14.0);

	に対して f の先頭アドレスで以下のようになっている.

	(f2, f3) = 10.0, (f4, f5) = 11.0

	+------------------+ <- sp
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+
	|     ********     |
	+------------------+ +16
        |       12.0       |
        |                  |
	+------------------+ +24
        |       13.0       |
        |                  |	
	+------------------+ +32
        |       14.0       |
        |                  |
	+------------------+

	戻り値は (f0, f1) にセットされる.

(*8) 構造体を引数にとる函数, 構造体を返す函数

        構造体を引数にとる函数を呼び出すとき先頭の 16 バイトが r4, r5, r6, r7 に
	セットされる. 残りはスタックにセットされる.
	構造体を返す函数を呼び出すとき戻り値を格納する領域を r4 レジスタにセットして
	呼び出す.
