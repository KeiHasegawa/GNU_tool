gcc の字句解析ルーチンの調査(その1)

目次
(*1) vine linux で既に -g でビルドした状態を仮定している
(*2) -g ビルドした xgcc で実際にコンパイルする
(*3) xgcc から cc1 をどのように起動するか確認する.
(*4) gdb から cc1 を起動する
(*5) 構文解析ルーチンの入り口を確認する
(*6) c_parser_peek_token の呼び出し
(*7) _cpp_lex_direct 
(*8) _cpp_clean_line
(*9) C++ スタイルコメントのバグを取る
(*10) C スタイルのコメントのバグをとる
(*11) patch の当て方

(*1) vine linux で既に -g でビルドした状態を仮定している
   => linux での gcc 10.2.0 インストールメモを参照

(*2) -g ビルドした xgcc で実際にコンパイルする
% cd ~/gcc-10.2.0/host-i686-pc-linux-gnu/gcc
% cat /tmp/a.c
int a = 1;
% set path = ($path `pwd`) 
% ./xgcc -S /tmp/a.c

a.s を確認する. コンパイルされていると分かる.

(*3) xgcc から cc1 をどのように起動するか確認する.
% ./xgcc -S /tmp/a.c -###
...
 cc1 -quiet -iprefix /home/khasegawa/gcc-10.2.0/host-i686-pc-linux-gnu/gcc/../lib/gcc/i686-pc-linux-gnu/10.2.0/ /tmp/a.c -quiet -dumpbase a.c "-mtune=generic" "-march=pentiumpro" -auxbase a -o a.s
...

(*4) gdb から cc1 を起動する
(gdb) b main
(gdb) run --quiet ...       # ここは上で確認したものと同じものを指定する

これでソースレベルデバッグができていることを確認する.

(*5) 構文解析ルーチンの入り口を確認する
説明はざっくり省くが, これまでの調査で以下で構文解析ルーチンの入り口
にブレークポイントをセットすることができる.
(gdb) b c_parser_translation_unit

static void
c_parser_translation_unit (c_parser *parser)
{
  if (c_parser_next_token_is (parser, CPP_EOF)) これで 0 が返る
    {

つまりこの段階で既に字句解析ルーチンが動作するということ.
最初の字句は /tmp/a.c の場合 int

(*6) c_parser_peek_token の呼び出し

(*5) の c_parser_next_token_is は c_parser_peek_token を呼び出すが
ここはファイルから文字を読みだすことなく c_token へのポインタを返している.
そして

(gdb) p ((c_token *) 戻り値)->type
$2 = CPP_KEYWORD

と確認できた. これから推測するに, 実は (*5) の構文解析の
入口に来た段階で, 既に最初の字句はファイルから読みだされ,
それがキーワードで(おそらく int )だということである.

c_parser_peek_token にブレークポイントをセットして再び最初から実行すると
c_parser_translation_unit に到達する前に c_parser_peek_token
が呼び出されていることを確認できる. そしてこの場合は

c_token *
c_parser_peek_token (c_parser *parser)
{
  if (parser->tokens_avail == 0)
    {
      c_lex_one_token (parser, &parser->tokens[0]);  こっちが実行される
      parser->tokens_avail = 1;
    }
  return &parser->tokens[0];
}


(*7) _cpp_lex_direct
(*6) で函数にステップインし続けるとこの函数まで届く. 

cpp_token *
_cpp_lex_direct (cpp_reader *pfile)
{
...

(*6) からこの函数にきたとき既に

pfile->buffer->next_line

にはファイルから一行が取り出されていることに気付くだろう.
この函数にブレークポイントをセットして最初から実行してみると,
何度も呼び出されたあと, (*6) の c_parser_peek_token が呼び出され
そこでようやく最初の字句を返すという構造になっているらしい.

今回はファイルから読み込むところは無関心で, 例えば
どのようにしてコメントを取り去っているかとかを調べてみたい.

/tmp/a.c を以下のようにした:

// comment
int a = 1;

(*6) から _cpp_lex_direct に来た時点で以下のようになっていた.
(gdb) p pfile->buffer->next_line
$14 = (const unsigned char *) 0xa7558d0 "// comment\nint a = 1;\n\n"

これはなんとなくであるが, 期待した結果だ. おそらくこれからコメントが
取り除かれるのだろう.

(*8) _cpp_clean_line

コメントの読み飛ばしに注目すればこの函数に行き着く.

void
_cpp_clean_line (cpp_reader *pfile)
{
...
	  /* Perform an optimized search for \n, \r, \\, ?.  */
	  s = search_line_fast (s, buffer->rlimit);  ここで読み飛ばししている

'\n' = 10, '\r' = 13, '\\' = 92, '?' = 63 を高速に見つけて, そこまでポインタ
s を進めるということだ.

さらにステップインするとこれは search_line_sse2 という函数にいきつく.
ポインタ経由の函数呼び出しだったというわけだ. 余談だが SSE2 を Web
で検索してみると, なんだかすごいテクノロジーらしい. すごいかどうかは
受け取る人にもよるのだが.

この search_line_sse2 は gcc-10.2.0/libcpp/lex.c に定義があるが,
これと同じ機能をもつ函数が同じファイルにいくつかあるようだ.

(*9) C++ スタイルのコメントのバグを取る
/tmp/a.c を以下のように変更する:
// 機能
int a = 1;

これは Shift-JIS でコーディングする必要がある. '能' の 2 バイト目は
例の '\\' = 92 なわけでこれで次の行までコメントが続いていると
cc1 で解釈されてしまう.

さてこれを修正したいために以下の修正を加えた.

inline bool sjis_1st(int c)
{
  return (0x81 <= c && c <= 0x9f) || (0xe0 <= c && c <= 0xfc);
}

const unsigned char*
search_line_consider_sjis(const unsigned char* s, const unsigned char* end)
{
  bool sjis_state = false;
  for ( ; s != end ; ++s) {
    int c = *s;
    if (!sjis_state && sjis_1st(c))
      sjis_state = true;
    else if (sjis_state)
      sjis_state = false;
    else if (!sjis_state) {
      if (c == '\n' || c == '\r' || c == '\\' || c == '?')
	return s;
    }
  }
  return s;
}
...

#if 0
	  /* Perform an optimized search for \n, \r, \\, ?.  */
	  s = search_line_fast (s, buffer->rlimit);
#else
	  s = search_line_consider_sjis(s, buffer->rlimit);
#endif

gcc のトップのディレクトリで make を実行すれば確実だが, 以下のようにして
簡易ビルドすることはできる
% cd ../libcpp
% make libcpp.a
% cd ~/gcc-10.2.0/host-i686-pc-linux-gnu/gcc
% rm cc1
% make -n cc1
xg++ ... -o cc1 ...
の行をコピーペーストしてそのまま実行する

これで再び gdb 制御のもとで cc1 を動かし /tmp/a.c をコンパイルしてみる.
今度はコメントが意図しない形で削られることはなくなった.

(*10) C スタイルのコメントのバグをとる

せっかくなので JIS (ISO-2022-JP)にも対応しておく. バグを再現させるために
/tmp/a.c を以下のものにする.
% cat /tmp/a.c
/*
 * 条件をﾁｪｯｸする
 */
%
ここで注意が必要で, /tmp/a.c は JIS でコーディングする必要がある.
とりあえず既存の状態でどのように処理されるか確認する.

(gdb) run cc1 ...

この結果コメントの終わりを認識できていないことが確認できる.

ざっくりと説明は省くが C スタイルのコメントを読み飛ばすことを
_cpp_skip_block_comment

で行っている. この函数にブレークポイントをセットしてそこまで
実行してみる.

bool
_cpp_skip_block_comment (cpp_reader *pfile)
{
...
      c = *cur++;

      if (c == '/')
	{
	  if (cur[-2] == '*')
	    break;                 ここをコメントの終わりとしている.

以下の修正を入れる

inline bool jis_kanji_start(const uchar* s)
{
  return s[0] == 0x1b && s[1] == 0x24 && (s[2] == 0x42 || s[2] == 0x40);
}

inline bool jis_ascii_start(const uchar* s)
{
  return s[0] == 0x1b && s[1] == 0x28 && s[2] == 0x42;
}
...
bool
_cpp_skip_block_comment (cpp_reader *pfile)
{
...
  for (;;)
    {

ここを追加
      if (!jis_state && jis_kanji_start(cur)) {
	cur += 3;
	jis_state = true;
	continue;
      }
      if (jis_state && jis_ascii_start(cur)) {
	cur += 3;
	jis_state = false;
      }
      if (jis_state) {
	++cur;
	continue;
      }
ここまで

再び libcpp.a をビルドし直し, cc1 をリンクし直せば期待する動作になる.
これだけだと JIS の半角カナに対応していない.

% cat /tmp/a.c
/*
 * ﾁｪｯｸ
 */

これに対応するには以下の修正をさらに加える:

inline bool jis_hankakukana_start(const uchar* s)
{
  return s[0] == 0x1b && s[1] == 0x28 && s[2] == 0x49;
}

inline bool jis_start(const uchar* s)
{
  return jis_kanji_start(s) || jis_hankakukana_start(s);
}
...
bool
_cpp_skip_block_comment (cpp_reader *pfile)
{
...
  for (;;)
    {

jis_kanji_start ではなく jis_start にする
      if (!jis_state && jis_start(cur)) {  

(*11) パッチの当て方

このページの comment_bug_fix.diff をダウンロードして例えば
/tmp/comment_bug_fix.diff
として保存する

% xz -d -c gcc-10.2.0.tar.xz | tar xf -
% cd gcc-10.2.0
% patch -p0 < /tmp/comment_bug_fix.diff
patching file libcpp/lex.c

とすれば (*9) と (*10) の修正が反映される.
