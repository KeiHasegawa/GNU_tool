g++ のパーサー部分を調査する

vine linux で既に -g でビルドした状態を仮定している
   => linux での gcc 10.2.0 インストールメモを参照

% cd gcc-10.2.0/host-i686-pc-linux-gnu/gcc/
% cat /tmp/b.cpp
int a = 1;
% ./xg++ -S /tmp/b.cpp
このコマンドで cc1plus を exec できないというエラーメッセージが出る.

% set path = ( $path `pwd` )
% ./xg++ -S /tmp/b.cpp

今度は正常終了した. このディレクトリにある cc1plus を起動できたからである.
カレントディレクトリの b.s を見てみるとコンパイルがされたことを
確認できる.

同様のことを gdb から行う
gdb を起動する状態で PATH が gcc-10.2.0/host-i686-pc-linux-gnu/gcc に
通っていないとやはり cc1plus を起動することはできないことに注意.
(Emacs から gdb を起動しているのなら M-x setenv で PATH を変更するとよい) 

(gdb) b main
(gdb) run -S /tmp/b.cpp

とすれば main 函数で停止してソースレベルデバッグができるだろう.

g++ には gcc と同様 -### オプションがある. これでどのように外部コマンドを
起動するか等を表示することができる

% ./xg++ -S /tmp/b.cpp -###
...
 cc1plus -quiet -iprefix /home/khasegawa/gcc-10.2.0/host-i686-pc-linux-gnu/gcc/../lib/gcc/i686-pc-linux-gnu/10.2.0/ -D_GNU_SOURCE /tmp/b.cpp -quiet -dumpbase b.cpp "-mtune=generic" "-march=pentiumpro" -auxbase b -o b.s
...

今度は gdb から cc1plus を起動する
% gdb cc1plus
...
(gdb) b main
(gdb) run -quiet -iprefix /home/khasegawa/gcc-10.2.0/host-i686-pc-linux-gnu/gcc/../lib/gcc/i686-pc-linux-gnu/10.2.0/ -D_GNU_SOURCE /tmp/b.cpp -quiet -dumpbase b.cpp "-mtune=generic" "-march=pentiumpro" -auxbase b -o b.s

とすれば main 函数で停止してソースレベルデバッグができるだろう.
ここで

(gdb) run -quiet .... 

は実際に xg++ から cc1plus が起動される方法と同じにするべきだろう.

ざっくりと説明は省くが

(gdb) b cp_parser_translation_unit  # この函数にブレークポイントセット
(gdb) run -quiet ...

とすることで構文解析ルーチンの入り口まで到達する.

この gcc のバージョンの函数 cp_parser_translation_unit のコメントには

   translation-unit:
     declaration-seq [opt]

のような表記がある. このコメントをそのまま受け入れれば, そして詳しい説明は
省くが, この函数が構文解析ルーチンの入り口であることを理解できるだろう.

ステップ実行していく. 今コンパイルしているソースは

int a = 1;

なのでシンプルなものであるが, それが

cp_parser_declaration という函数で処理されていることに気付くだろう.
そしてこの函数のコメントには

   declaration:
     block-declaration
     function-definition
     template-declaration
     explicit-instantiation
     explicit-specialization
     linkage-specification
     namespace-definition

というものがある.

さらにざっくりと説明は省くが, このプログラムの作りは再帰下降型構文解析
ルーチンと呼ばれる構文解析手法を用いていることにも気付くだろう.
 
今回知りたかったことは, g++ のパーサー部分がどのような文法を受け入れる
作りになっていることであった. 例えば

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

のような C++ の宣言に対して, 古い C++ しか知らないプログラマにとっては,
template-declaration であることは分かっても, それ以上は分からないのだ.

改めて上が template-declaration から導出されることを確かめるために以下の
ようなソースを作成した
% cat /tmp/b2.cpp
  template<typename _Tp>
    _Tp __declval(int);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));
%
この /tmp/b2.cpp でもう一度 cc1plus をデバッグしてみる.

(gdb) b cp_parser_template_declaration
(gdb) run -quiet ... /tmp/b2.cpp ...

調べたい宣言は 2 つ目なので 1 回目は continue コマンドで
スキップする. 2 回目ブレークポイントにヒットしたら調べていく.

auto declval()

この部分は auto が, 例えば int であれば馴染みのある, 函数宣言の
一部である. init-declarator をパースする函数にプログラム(cc1plus)
の制御が移ると予測して

(gdb) b cp_parser_init_declarator    # init-declarator をパースする函数
(gdb) c

とした. やはりここに到達している. この函数のコメントの一部は

   init-declarator:
     declarator initializer [opt]

というものである. さらに

   auto declval() noexcept -> ...
        ^^^^^^^^^

この部分は

   direct-declarator

なので direct-declarator をパースする函数 cp_parser_direct_declarator
に到達することだろう.

もっとお手軽に

   auto declval() noexcept -> ...
                  ^^^^^^^^

この部分に着目して, これが

cp_parser_noexcept_specification_opt

でパースされていることに気付くだろう. ここまで追跡できれば残りの

    auto declval() noexcept -> decltype(__declval<_Tp>(0));
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
が

cp_parser_late_return_type_opt

でパースされていることに気付くだろう.

これまでの調査で文法がどのようになっているかを正確に示すのは難しい.
この理由は

cp_parser_noexcept_specification_opt
cp_parser_late_return_type_opt

に対応する

noexcept-specification
specified-return-type

が direct-declarator から導出される記述がないからである. しかしこれらに
対してはそれぞれの函数のコメントから

   noexcept-specification:
     noexcept ( constant-expression ) [opt]

   specified-return-type:
     -> trailing-type-specifier-seq abstract-declarator [opt]

であることは分かる. 今回はこれはこれで目的は達成された.
