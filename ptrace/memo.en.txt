ptrace investigation

(*1) What I want to do
(*2) Peeking GPR (General Perpose Register)
(*3) To ptrace itself => impossible
(*4) Peeking GPR of sub-process which is created `fork' and `exec'
     from parent process.
(*5) Set break-point
(*6) Set watch-point
(*7) i386 debug register

(*1) What I want to do

     Some memory broken bug can be investigated by embedding the code,
     which let programmer know when and where.

     Note that if programmer can know by using debugger normally,
     this way argued here should not be used.

(*2) Peeking GPR (General Perpose Register)

     At 1st, call `ptrace' simply. Debugged program is `test000.c'.

     % gcc -g test000.c -o test000.exe
     % ./test000.exe &
     [1] 15935
     %

     And `test001.cpp' is a program which calls `ptrace' and peek
     GPR. Unfortunately, `test001.c' cannot be compiled at cygwin
     environment.

     % gcc -g test001.c -o test001.exe
     % ./test001.exe 15935			# PID of test000.exe
     status = 4991
     stopped with signal no 19
     eax = 0x13d ebx = 0xb7769ff4
     %

     Again we can run test001.exe under control of gdb and notice that
     variable `regs' is:

     $6 = {ebx = 0xb7710ff4, ecx = 0x2836f1be, edx = 0x268, esi = 0x0, edi = 0x0, ebp = 0xbfb34fe8, eax = 0x268, xds = 0x7b, xes = 0x7b, xfs = 0x0, xgs = 0x33, orig_eax = 0xffffff02, eip = 0x80483b0, xcs = 0x73, eflags = 0x283, esp = 0xbfb34fd8, xss = 0x7b}

     This is the result of 32 bit intel case. In case of 64 bit intel or
     ARM, the members of type of `regs' are different.
     Any way, again execute gdb with option `-p 15935'

     eax = 0xaa
     ebx = 0xb7710ff4
     ecx = 0x2836f1be
     edx = 0xaa
     esp = 0xbfb34fd8
     ebp = 0xbfb34fe8
     esi = 0x0
     edi = 0x0
     eip = 0x80483b4
     eflags = 0x246
   
     Before executing `quit' command, execute `detach' command, so
     you can terminate only gdb without terminating `test000.exe'

(*3) To ptrace itself => impossible

     I tried to call `ptrace' with argument with itself process ID:

     % gcc -g test002.c -o test002.exe
     % ./test002.exe
     ptrace(PTRACE_ATTACH, 20930) failed
     EPERM
     %

     To think over, this result is natural.

     Attaching process becomes the parent process of attached process.
     This is conflict.
     And if it's not, the effect of `ptrace(PTRACE_ATTACH, ...)' is
     send SIGSTOP to the attached process. i.e. send SIGSTOP to itself.
     This is not expected by programmer.
     And more, when peeking GPR  by using ptrace, it's assumed that
     debugged process is stopped.

(*4) Peeking GPR of sub-process which is created `fork' and `exec'
     from parent process.

     Here, debugged program is `test003.cpp'.

     % gcc -g test003.cpp -o test003.exe
     % ./test003.exe
     start
     end
     %

     And test004.cpp is the program which creates sub-process of `test003.exe'
     by calling `fork' and `exec':

     % gcc -g test004.cpp -o test004.exe
     test004.c:71
     status = 1407
     stopped with signal no 5
     eax = 0x0 ebx = 0x0
     start
     end
     %

     The next figure illustrates this situation:

     test004.exe                                            OS
        |                                                   |
        |                                                   |
        |                       Later `test003.exe'         |
       fork  ------------------------+                      |
        |                            |                      |
       wait(enter)                   |                      |
        |                            |                      |
        |                    ptrace(PTRACE_TRACEME)         |
        |                            |              SIGTRAP |
        |                         exec(...)  <--------------+
       wait(leave) <-----------------+                      |
        |                            |                      |
       ptrace(PTRACE_GETREGS)        |                      |
        |                            |                      |
       ptrace(PTRACE_CONT)------> exec(...) really starts   |
        |                            |                      |
        |                         test003.exe               |
        |                            |                      |

(*5) Set break-point

      test005.c is the program which is embedded break-point:

      % gcc -g test005.c -o test005.exe
      % ./test005.exe
      Trace/BPT trap
      %

      Run `test005.exe' under control of gdb, stop at `int3' instruction
      without break-point. The way of setting break-point by debugger is:

      Change the byte `int3' (=0xcc) at the location where the program
      is stopped, and execute program. After the program stops,
      change the byte to the original data.

      I don't understand that how signal is sent to the process after
      `int3' instruction, but now, I'm not so interrested with the stuff.

      test006.c is the program which creates `test005.exe' process by
      calling `fork' and `exec':

      % gcc -g test006.c -o test006.exe
      % ./test006.exe
      test006.c:82
      status = 1407
      stopped with signal no 5
      status = 1407
      stopped with signal no 5
      eip = 0x8048398
      % objdump -x test005.exe
      ...
08048394 <main>:
 8048394:	55                   	push   %ebp
 8048395:	89 e5                	mov    %esp,%ebp
 8048397:	cc                   	int3                This one!
 8048398:	b8 00 00 00 00       	mov    $0x0,%eax
 804839d:	5d                   	pop    %ebp
 804839e:	c3                   	ret    
 804839f:	90                   	nop
      ...

      Here, I notice that the adress value displayed as `eip' register
      is different  1 byte from the location of `int3' instruction.
      I guess that this problem may annoys debugger implementation engineer.

(*6) Set watch-point

     Again think about `test003.cpp' program. Now we want to catch the
     moment when the `test003.exe' process changes a[1000].

     % objdump -x test003.exe
     ...
08049700 g     O .bss	00001000              a       ## Address of `a'
     ...
     %

     We can know that the address of `a' is determined in this environment.
     And more, &a[1000] is equal to:

       0x8049700 + (4*1000) = 0x804a6a0

     Now we do code `test007.c' and execute like bellow:

     % gcc -g test007.c -o test007.exe
     % ./test007.exe
     test007.c:99
     status = 1407
     stopped with signal no 5
     start
     status = 1407
     stopped with signal no 5
     0x804a68c : 995
     0x804a690 : 996
     0x804a694 : 997
     0x804a698 : 998
     0x804a69c : 999
     0x804a6a0 : 1000
     0x804a6a4 : 0
     0x804a6a8 : 0
     0x804a6ac : 0
     0x804a6b0 : 0
     end
     %

     The point is:

     calling ptrace(PTRACE_POKEDATA, ...) at 4 times

     These realizes simply watch-point. And `test007.exe' process
     displayed the value of a[1000] and around there.

     This is the expected result.

     And again new question raises.

     How `test003.exe' can do this by itself?

     We've already know that `test005.exe' can be embedded break-point.

     We want to generate the effects of 4 times
     `ptrace(PTRACE_POKEDATA, pid, ...)'  by not parent process,
     but by itself. But I don't know the whole of the effect.

     At last, I concluded to (*7)

(*7) i386 debug register

     http://css.csail.mit.edu/6.858/2015/readings/i386.pdf

     This says that there is DR0, DR1, ... , and DR7 which 
     can be accessed from priviledged software using `mov' instruction.
     I wonder which system call sets these register. To implement
     debugger, `ptrace' is enough, so it's not mysterious if there is
     no such a system call.

     `DR_CONTROL' of `test007.c' means DR7 and `DR_STATUS' means DR6.
     And I also noticed that:

     offset : debug register
      0x0fc : DR0
      0x100 : DR1
      0x104 : DR2
      0x108 : DR3
      0x10c : DR4
      0x110 : DR5
      0x114 : DR6
      0x118 : DR7

     I'm sure that `test008.S' doesn't work well but code it. This program
     has a error. Even though this program works at priviledged mode,
     it refers to virtual address.
