ptrace に関する調査

(*1) やりたいこと
(*2) GPR (General Perpose Register)を覗き見る
(*3) 自分自身を ptrace する => できない
(*4) fork, exec して親プロセスからサブプロセスの GPR を覗き見る
(*5) ブレークポイントをセットする
(*6) ウォッチポイントをセットする
(*7) i386 のデバッグレジスタ

(*1) やりたいこと

     メモリ破壊のバグをデバッガの力を借りずに, プログラム内に特別なコードを
     埋め込むことで調査したい. Windows には ptrace はないのだが, 近いものは
     あるはず.

     デバッガで判別するバグは何もこんなことをする必要がないことに注意.

(*2) GPR (General Perpose Register)を覗き見る

     まずは簡単に ptrace を発行してみる. デバッグされる側のプログラム
     => test000.c

     % gcc -g test000.c -o test000.exe
     % ./test000.exe &
     [1] 15935
     %

     test001.cpp は ptrace を使用して上で実行しているプロセスのレジスタ
     を覗き見るプログラムである. 残念ながら ptrace を呼び出すコードのため
     cygwin ではコンパイルできない.

     % gcc -g test001.c -o test001.exe
     % ./test001.exe 15935			# test000.exe の PID
     status = 4991
     stopped with signal no 19
     eax = 0x13d ebx = 0xb7769ff4
     %

     gdb から test001.exe を実行すると regs の値は以下のようになっていた.

     $6 = {ebx = 0xb7710ff4, ecx = 0x2836f1be, edx = 0x268, esi = 0x0, edi = 0x0, ebp = 0xbfb34fe8, eax = 0x268, xds = 0x7b, xes = 0x7b, xfs = 0x0, xgs = 0x33, orig_eax = 0xffffff02, eip = 0x80483b0, xcs = 0x73, eflags = 0x283, esp = 0xbfb34fd8, xss = 0x7b}

     これは 32 ビットの Intel で行ったからこのような結果だが, 64 ビットの
     Intel ならば, あるいは ARM で実行したとかなら違ったメンバになっていた
     だろう.
     一方, gdb を今度は -p 15935 を指定して起動した.

     eax = 0xaa
     ebx = 0xb7710ff4
     ecx = 0x2836f1be
     edx = 0xaa
     esp = 0xbfb34fd8
     ebp = 0xbfb34fe8
     esi = 0x0
     edi = 0x0
     eip = 0x80483b4
     eflags = 0x246
   
     gdb -p 15935 により起動した gdb は detach コマンドの後に quit コマンド
     で終了すれば test000.exe を終了させることなく gdb のみが終了する.

(*3) 自分自身を ptrace する => できない

     ptrace の引数に指定する PID を自分自身のものを指定してみた:

     % gcc -g test002.c -o test002.exe
     % ./test002.exe
     ptrace(PTRACE_ATTACH, 20930) failed
     EPERM
     %

     よくよく考えると当然の結果である.
     ATTACH するプロセスと ATTACH された側のプロセスには親子関係ができる.
     自分が自身の親になるのは矛盾している.
     100 歩ゆずってその親子関係がないにしても子プロセス, すなわち自分自身
     に SIGSTOP が送られ, 自身が停止してしまう. これはプログラマが望んだ
     結果ではない.
     さらに言えば, レジスタを覗き見たりするには対象のプロセスが停止してい
     ることが前提となる.

(*4) fork, exec して親プロセスからサブプロセスの GPR を覗き見る

     デバッグされる側のプログラム => test003.cpp

     % gcc -g test003.cpp -o test003.exe
     % ./test003.exe
     start
     end
     %

     test004.cpp は test003.exe を fork, exec し ptrace を使用して test003.exe
     のプロセスの GPR を覗き見るプログラムである.

     % gcc -g test004.cpp -o test004.exe
     test004.c:71
     status = 1407
     stopped with signal no 5
     eax = 0x0 ebx = 0x0
     start
     end
     %

     厳密ではないが, 図にするとおそらくこんな感じ:

     test004.exe                                            OS
        |                                                   |
        |                                                   |
        |                       後の test003.exe            |
       fork  ------------------------+                      |
        |                            |                      |
       wait(enter)                   |                      |
        |                            |                      |
        |                    ptrace(PTRACE_TRACEME)         |
        |                            |              SIGTRAP |
        |                         exec(...)  <--------------+
       wait(leave) <-----------------+                      |
        |                            |                      |
       ptrace(PTRACE_GETREGS)        |                      |
        |                            |                      |
       ptrace(PTRACE_CONT)------> exec(...) really starts   |
        |                            |                      |
        |                         test003.exe               |
        |                            |                      |

(*5) ブレークポイントをセットする

      test005.c はプログラムの中にブレークポイントを仕込んでいる.

      % gcc -g test005.c -o test005.exe
      % ./test005.exe
      トレース・ブレークポイントトラップ
      %

      test005.exe を gdb から実行すると int3 命令のところで停止する.
      デバッガがブレークポイントをセットする仕組みの大雑把な仕組みは

      止めたいアドレスの命令を int3 に置き換えて, 継続実行する.
      停止したら本来の命令にそっと置き換えておく.

      というものだが, int3 命令の実行からシグナルの送信の関係は理解
      できていない. 今のところはこれで満足しておく.

      test006.c は test005.exe を fork, exec して実行するプログラム
      である.

      % gcc -g test006.c -o test006.exe
      % ./test006.exe
      test006.c:82
      status = 1407
      stopped with signal no 5
      status = 1407
      stopped with signal no 5
      eip = 0x8048398
      % objdump -x test005.exe
      ...
08048394 <main>:
 8048394:	55                   	push   %ebp
 8048395:	89 e5                	mov    %esp,%ebp
 8048397:	cc                   	int3                これ!
 8048398:	b8 00 00 00 00       	mov    $0x0,%eax
 804839d:	5d                   	pop    %ebp
 804839e:	c3                   	ret    
 804839f:	90                   	nop
      ...

      eip を表示したアドレス値と 1 バイト異なっていることに改めて
      気付く. デバッガを実装するときに直面する悩ましい問題だろう.

(*6) ウォッチポイントをセットする

     再び test003.cpp のプログラムだが, 配列 a の 1000 番目を書き換える
     瞬間を捉えたい.

     % objdump -x test003.exe
     ...
08049700 g     O .bss	00001000              a       これ
     ...
     %

     実行前に実は a のアドレスは決まっていて, 

     &a[1000] は 0x8049700 + (4*1000) = 0x804a6a0

     ということらしい. そこで test007.c を作成した.

     % gcc -g test007.c -o test007.exe
     % ./test007.exe
     test007.c:99
     status = 1407
     stopped with signal no 5
     start
     status = 1407
     stopped with signal no 5
     0x804a68c : 995
     0x804a690 : 996
     0x804a694 : 997
     0x804a698 : 998
     0x804a69c : 999
     0x804a6a0 : 1000
     0x804a6a4 : 0
     0x804a6a8 : 0
     0x804a6ac : 0
     0x804a6b0 : 0
     end
     %

     ポイントは ptrace(PTRACE_POKEDATA, ...) の 4 回の呼び出しでこれが
     ウォッチポイントを簡単にではあるが実現している. そしてウォッチポイント
     にヒットしたときに test003.exe の配列 a の 1000 番目の要素の近辺
     を読みだして表示している.

     これは期待した結果である.

     そこで, 疑問になるのがこれに近いことを test003.exe の中でできないだろ
     うかということである.
     test005.exe はプログラムの中にブレークポイントを埋め込んだもの.
     test003.exe の中にブレークポイントを埋め込むことができないだろうか.

     ptrace(PTRACE_POKEDATA, pid, ...)  が指定されたプロセスに与える
     影響を, 親プロセスが, ではなく自身で, 実現できればよいのだが, そも
     そもこれ自体が何なのか不明なのだ. しかし, 調査の結果 (*7) にたどり着
     いた.

(*7) i386 のデバッグレジスタ

     http://css.csail.mit.edu/6.858/2015/readings/i386.pdf

     priviledged モードで mov 命令でアクセス可能な DR0, ..., DR7 がある
     らしい.
     さて, これらに値をセットするのに普通はシステムコール以外は考えられない
     がどうすればできるんだろう. デバッガを実現するには ptrace で
     十分なわけだから, そういうシステムコールがなくても不思議はない.

     test007.c の DR_CONTROL は DR7 のこと. DR_STATUS は DR6 のこと.
     この記述をした後

     0x0fc : DR0
     0x100 : DR1
     0x104 : DR2
     0x108 : DR3
     0x10c : DR4
     0x110 : DR5
     0x114 : DR6
     0x118 : DR7

     であることに気付いた.

     test008.S に無理とは思いつつ DR7, DR0, DR7, DR6 をセットする
     コードを書いた. このプログラムには大きな誤りがある. priviledged
     モードで動作するプログラムがユーザープログラムが使うであろう
     仮想アドレスを使っているということだ.
