ptrace に関する調査

(*1) やりたいこと
(*2) GPR (General Perpose Register)を覗き見る
(*3) gdb から実行して ptrace をエラーにしない方法

(*1) やりたいこと

     メモリ破壊のバグをデバッガの力を借りずに, プログラム内に特別なコードを
     埋め込むことで調査したい. Windows にも ptrace はないのだが, 近いものは
     あるはず.

(*2) レジスタを覗き見る

     まずは簡単に ptrace を発行してみる. デバッグされる側のプログラム
     => test000.c

     % gcc -g test000.c -o test001.exe
     % ./test001.exe &
     [1] 15935
     %

     test001.cpp は ptrace を使用して上で実行しているプロセスのレジスタ
     を覗き見るプログラムである.

     % gcc -g test001.c -o test001.exe
     % ./test001.exe 15935
     ptrace(PTRACE_GETREGS, 15935) failed
     ESRCH
     [1]  + 中断(シグナル)          ./a.out
     % ./test001.exe 15935
     %

     1 回目は失敗したが 2 回目は ptrace の呼び出しがいずれも成功したようだ.
     1 回目が失敗するのは, 停止する前にレジスタを読みだそうとしたためで,
     これは wait を使用するようにマニュアルにはあるが今回は割愛.

     gdb から test001.exe を実行すると regs の値は以下のようになっていた.

p/x regs
$2 = {0xb7710ff4, 0x2836f1be, 0xaa, 0x0, 0x0, 0xbfb34fe8, 0xaa, 0x7b, 0x7b, 0x0, 0x33, 0xffffff02, 0x80483b4, 0x73, 0x202, 0xbfb34fd8, 0x7b, 0x0 <repeats 83 times>}

      一方, gdb を今度は -p 15935 を指定して起動した.

   eax = 0xaa
   ebx = 0xb7710ff4
   ecx = 0x2836f1be
   edx = 0xaa
   esp = 0xbfb34fd8
   ebp = 0xbfb34fe8
   esi = 0x0
   edi = 0x0
   eip = 0x80483b4
   
   efl は表示できず. だがおそらく 0x202 っぽい. 該当しないものもあるが 
   そんなもんなのかも. マニュアルには regs に何を指定するべきかが
   <linux/user.h> にあると書かれているが, そういうファイルはない.

   gdb -p 15935 により起動した gdb は detach コマンドの後に quit コマンド
   で終了すれば test000.exe を終了させることなく gdb のみが終了する.
