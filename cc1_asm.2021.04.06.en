cc1 assembler output investigation

(*1) Abstract code
(*2) Assembler generation
(*3) print(rtx_insn*)
(*4) debug_insn_slim(const rtx_insn*)
(*5) debug_tree(tree)

(*1) Abstract code

c-parse.c
static void
c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,
...
{
...
	fnbody = c_parser_compound_statement (parser, &endloc);
      tree fndecl = current_function_decl;   // Stop here

(gdb) p print(fnbody)

    Above gdb command shows the contents of function as a `tree'. Here,
    `print' was described at:

    "cc1 lexical analyzer investigation(Part 3)"
    "gcc symbol table investigation"

    on this web page.

    Here, you may notice that program validation is check at this point
    but it's not abstract code. Not defining abstract code, it's not
    the situation to generate target code.

(*2) Assembler generation

     Assembler generation is done by writing into `FILE* asm_out_file': 

     (gdb) set asm_out_file=stdout

     By above command, assembler generation output becomes `stdout'.

cgraphunit.c:2820:
  output_in_order ();   // Output function code here

cgraphunit.c:2578
	  nodes[i].u.f->expand ();   // Output function code here

cgraphunit.c:2300
  execute_pass_list (cfun, g->get_passes ()->all_passes);
  // Output function code above

final.c:4658
  final_1 (first, asm_out_file, seen, optimize);
  // Output function code above

static void
final_1 (rtx_insn *first, FILE *file, int seen, int optimize_p)
{
...
  for (insn = first; insn;)  // This loop may be important
...
      insn = final_scan_insn (insn, file, optimize_p, 0, &seen); 
      // Output one instruction above


(*3) print(rtx_insn*)

     Similary with `print(tree)', this function is just called from
     debugger commad line. 1st version is very simple:

int print(rtx_insn* insn)
{
  enum rtx_code code = insn->code;
  switch (code) {
  case SET: return puts("SET");
  case PARALLEL: return puts("PARALLEL");
  case USE: return puts("USE");
  case JUMP_INSN: return puts("JUMP_INSN");
  case BARRIER: return puts("BARRIER");
  case NOTE:
        ... 
  }
}  

% cat /tmp/a.c 
int f(int a, int b)
{
  return a + b;
}
%

     For above `f', do like below at `final_1'
(gdb) p print_l(first)
NOTE_INSN_DELETED
NOTE_INSN_BASIC_BLOCK
SET                     # pushl	%ebp
NOTE_INSN_CFI_LABEL
NOTE_INSN_CFI
NOTE_INSN_CFI
SET			# movl	%esp, %ebp
NOTE_INSN_CFI_LABEL
NOTE_INSN_CFI
NOTE_INSN_PROLOGUE_END
NOTE_INSN_FUNCTION_BEG
SET			# movl	8(%ebp), %edx
SET			# movl	12(%ebp), %eax
PARALLEL		# addl	%edx, %eax
USE
NOTE_INSN_EPILOGUE_BEG
SET			# popl	%ebp
NOTE_INSN_CFI_LABEL
NOTE_INSN_CFI
NOTE_INSN_CFI
JUMP_INSN		# ret
BARRIER
NOTE_INSN_DELETED
(gdb) 

    A line followed by `#' means x86 assembler and of cause `print(rtx_insn*)'
    cannot print this at this point.

    `print_l' is like below:

void print_l(rtx_insn* first)
{
  for (rtx_insn* insn = first ; insn ; insn = NEXT_INSN(insn))
    print(insn);
}

     `rtx_insn' is the data structure which enables to generate target
     code by simple conversion. But this is not something I've investigated
     so far. This is allmost assembler.

     Now I want to investigate the way of converstion `rtx_insn' sequence
     from `tree fnbody' described at (*1).

(*4) debug_insn_slim(const rtx_insn*)

    By futher investigation, I found `debug_insn_slim' function and
    this is complete version of `print(rtx_insn*)' described at (*3)
    Of cause we should use this. When cc1 stops at `final_1', call
    print_l like below:

(gdb) p print_l(first)
    1: NOTE_INSN_DELETED
    3: NOTE_INSN_BASIC_BLOCK 2
   18: [--sp:SI]=bp:SI
   30: NOTE_INSN_CFI_LABEL
   25: NOTE_INSN_CFI
   26: NOTE_INSN_CFI
   19: bp:SI=sp:SI
   31: NOTE_INSN_CFI_LABEL
   27: NOTE_INSN_CFI
   20: NOTE_INSN_PROLOGUE_END
    2: NOTE_INSN_FUNCTION_BEG
    5: dx:SI=[bp:SI+0x8]
    6: ax:SI=[bp:SI+0xc]
    7: {ax:SI=ax:SI+dx:SI;clobber flags:CC;}
      REG_EQUAL [argp:SI]+[argp:SI+0x4]
   15: use ax:SI
   21: NOTE_INSN_EPILOGUE_BEG
   22: bp:SI=[sp:SI++]
      REG_CFA_DEF_CFA sp:SI+0x4
      REG_CFA_RESTORE bp:SI
   32: NOTE_INSN_CFI_LABEL
   28: NOTE_INSN_CFI
   29: NOTE_INSN_CFI
   23: simple_return
   24: barrier
   17: NOTE_INSN_DELETED
$156 = void
(gdb) 

     OK. And also noticed that this is allmost assembler.

(*5) debug_tree(tree)

     I also looked the same kind function for `tree' in fact that (*4).
     And found `debug_tree' function. Stop program at the same point with
     (*1), I tried like below:

(gdb) p debug_tree(fnbody)
...
     This is, of cause, more complete than my `print(tree)'.
