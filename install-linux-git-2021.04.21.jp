linux での git 2.31.1 インストールメモ

(*1) git のダウンロード
(*2) autoconf のダウンロードからインストールまで 
(*3) git のビルドその 1
(*4) zlib のダウンロードからインストールまで
(*5) git のビルドその 2
(*6) gettext のインストール
(*7) git のビルドその 3
(*8) 動作確認 => エラー
(*9) エラーの箇所を追跡してみた
(*10) stack overflow でこのエラーを扱っていた

(*1) git のダウンロード
% cd
% wget -q http://cygwin.mirror.constant.com/x86_64/release/git/git-2.31.1-1-src.tar.xz
% xz -d -c git-2.31.1-1-src.tar.xz | tar xf -
% cd git-2.31.1-1.src
% gunzip -c git-v2.31.1.tar.gz | tar xf -
% cd git-v2.31.1

ここで configure.ac はあるが configure がないことに気付いた.

autoconf がインストールされていないことに気付き先にこっちを
インストールすることになる.

(*2) autoconf のダウンロードからインストールまで 
% cd
% wget -q http://cygwin.mirror.constant.com/x86_64/release/gcc-tools-epoch2-autoconf/gcc-tools-epoch2-autoconf-2.64-2-src.tar.bz2
% bunzip2 -c gcc-tools-epoch2-autoconf-2.64-2-src.tar.bz2 | tar xf -
% bunzip2 -c autoconf-2.64.tar.bz2 | tar xf -
% cd autoconf-2.64
% ./configure
% make
% sudo make install
% ls -l /usr/local/bin/autoconf
# インストールされていることを確認した.

(*3) git のビルドその 1
% cd ~/git-2.31.1-1.src/git-v2.31.1
% autoconf
% ls -l configure
% ./configure
% make

zlib.h がないというエラー. zlib をインストールしていないので
こっちもインストールする.

(*4) zlib のダウンロードからインストールまで
% cd
% wget -q http://cygwin.mirror.constant.com/x86_64/release/zlib/zlib-1.2.8-3-src.tar.xz
% xz -d -c zlib-1.2.8-3-src.tar.xz | tar xf -
% cd zlib-1.2.8-3.src
% gunzip -c zlib-1.2.8.tar.gz | tar xf -
% cd zlib-1.2.8
% ./configure
% make
# 開発者の方は -O3 ビルドで -g なしというスタイルらしい.
% ls -l /usr/local/lib/libz.a /usr/local/include/zlib.h
# インストールされていることを確認した.

(*5) git のビルドその 2

再びビルド再開

% cd ~/git-2.31.1-1.src/git-v2.31.1
% make

msgfmt というコマンドがないというエラー.

(*6) gettext のインストール

% cd
% wget -q http://cygwin.mirror.constant.com/x86_64/release/gettext/gettext-0.19.8.1-2-src.tar.xz
% xz -d -c gettext-0.19.8.1-2-src.tar.xz | tar xf -
% cd gettext-0.19.8.1-2.src
% xz -d -c gettext-0.19.8.1.tar.xz | tar xf -
% cd gettext-0.19.8.1
% ./configure
% make
% sudo make install
...
libtool: relink: gcc -shared  -fPIC -DPIC ... -fopenmp -Wl,-soname -Wl,libgettextsrc-0.19.8.1.so -o .libs/libgettextsrc-0.19.8.1.so
/usr/bin/ld: .libs/libgettextsrc_la-message.o(.debug_frame+0x504): reloc against `.debug_frame': error 2

エラーしている. エラーしたディレクトリでエラーしたコマンドを実行してみた:

% cd ~/gettext-0.19.8.1-2.src/gettext-0.19.8.1/gettext-tools/src
% gcc -shared  -fPIC -DPIC  .libs/libgettextsrc_la-message.o .libs/libgettextsrc_la-po-error.o .libs/libgettextsrc_la-po-xerror.o .libs/libgettextsrc_la-read-catalog-abstract.o .libs/libgettextsrc_la-po-lex.o .libs/libgettextsrc_la-po-gram-gen.o .libs/libgettextsrc_la-po-charset.o .libs/libgettextsrc_la-read-po.o .libs/libgettextsrc_la-read-properties.o .libs/libgettextsrc_la-read-stringtable.o .libs/libgettextsrc_la-open-catalog.o .libs/libgettextsrc_la-dir-list.o .libs/libgettextsrc_la-str-list.o .libs/libgettextsrc_la-read-catalog.o .libs/libgettextsrc_la-color.o .libs/libgettextsrc_la-write-catalog.o .libs/libgettextsrc_la-write-properties.o .libs/libgettextsrc_la-write-stringtable.o .libs/libgettextsrc_la-write-po.o .libs/libgettextsrc_la-msgl-ascii.o .libs/libgettextsrc_la-msgl-iconv.o .libs/libgettextsrc_la-msgl-equal.o .libs/libgettextsrc_la-msgl-cat.o .libs/libgettextsrc_la-msgl-header.o .libs/libgettextsrc_la-msgl-english.o .libs/libgettextsrc_la-msgl-check.o .libs/libgettextsrc_la-file-list.o .libs/libgettextsrc_la-msgl-charset.o .libs/libgettextsrc_la-po-time.o .libs/libgettextsrc_la-plural-exp.o .libs/libgettextsrc_la-plural-eval.o .libs/libgettextsrc_la-plural-table.o .libs/libgettextsrc_la-sentence.o .libs/libgettextsrc_la-format.o .libs/libgettextsrc_la-format-c.o .libs/libgettextsrc_la-format-sh.o .libs/libgettextsrc_la-format-python.o .libs/libgettextsrc_la-format-python-brace.o .libs/libgettextsrc_la-format-lisp.o .libs/libgettextsrc_la-format-elisp.o .libs/libgettextsrc_la-format-librep.o .libs/libgettextsrc_la-format-scheme.o .libs/libgettextsrc_la-format-java.o .libs/libgettextsrc_la-format-csharp.o .libs/libgettextsrc_la-format-awk.o .libs/libgettextsrc_la-format-pascal.o .libs/libgettextsrc_la-format-ycp.o .libs/libgettextsrc_la-format-tcl.o .libs/libgettextsrc_la-format-perl.o .libs/libgettextsrc_la-format-perl-brace.o .libs/libgettextsrc_la-format-php.o .libs/libgettextsrc_la-format-gcc-internal.o .libs/libgettextsrc_la-format-gfc-internal.o .libs/libgettextsrc_la-format-qt.o .libs/libgettextsrc_la-format-qt-plural.o .libs/libgettextsrc_la-format-kde.o .libs/libgettextsrc_la-format-kde-kuit.o .libs/libgettextsrc_la-format-boost.o .libs/libgettextsrc_la-format-lua.o .libs/libgettextsrc_la-format-javascript.o .libs/libgettextsrc_la-read-desktop.o .libs/libgettextsrc_la-locating-rule.o .libs/libgettextsrc_la-its.o .libs/libgettextsrc_la-search-path.o   -Wl,-rpath -Wl,/usr/local/lib -L/usr/local/lib -lgettextlib -lm -ltermcap -lc  -g -O2   -fopenmp -Wl,-soname -Wl,libgettextsrc-0.19.8.1.so -o .libs/libgettextsrc-0.19.8.1.so
% ls -l .libs/libgettextsrc-0.19.8.1.so

成功している. 謎.

% cd ~/gettext-0.19.8.1-2.src/gettext-0.19.8.1
% sudo make install

同じところでエラーしている.

% cd ~/gettext-0.19.8.1-2.src/gettext-0.19.8.1/gettext-tools/src
% make install
libtool: install: /usr/bin/install -c .libs/libgettextsrc-0.19.8.1.soT /usr/local/lib/libgettextsrc-0.19.8.1.so
/usr/bin/install: cannot create regular file `/usr/local/lib/libgettextsrc-0.19.8.1.so': Permission denied
% sudo /usr/bin/install -c .libs/libgettextsrc-0.19.8.1.so /usr/local/lib
% ls -l /usr/local/lib/libgettextsrc-0.19.8.1.so

回避しできている.

% su
# cd /home/khasegawa/gettext-0.19.8.1-2.src/gettext-0.19.8.1
# make install
成功した

% ls -l /usr/local/bin/msgfmt
インストールされていることを確認した.
 
(*7) git のビルドその 3

再びビルド再開

% cd ~/git-2.31.1-1.src/git-v2.31.1
% make
% sudo make install
% ls -l /usr/local/bin/git
インストールされていることを確認した.

(*8) 動作確認 => エラー

% git add index.html
% git commit -m "add install memo"
% git push
git: 'remote-https' is not a git command. See 'git --help'.

このエラーがなぜ発生しているか不明.
% /usr/bin/git push

これなら OK.

(*9) エラーの箇所を追跡してみた

% git hoge
git: 'hoge' is not a git command. See 'git --help'.

The most similar commands are
	clone
	log
	merge
	notes
	stage
%

これは... そもそも git push というコマンドが受け入れられていないように
思われたが

% mkdir ~/git_test
% git init
% git pull https://github.com/KeiHasegawa/GNU_tool

同じ現象が起きる. 例によって gdb で調べてみた:

% gdb /usr/local/bin/git
(gdb) cd ~/git_test
(gdb) run pull https://github.com/KeiHasegawa/GNU_tool

これは調べてみると fork して以下を exec していた:

/usr/local/libexec/git-core/git fetch --update-head-ok https://github.com/KeiHasegawa/GNU_tool

% gdb /usr/local/libexec/git-core/git
(gdb) cd ~/git_test
(gdb) run fetch --update-head-ok https://github.com/KeiHasegawa/GNU_tool


static struct ref *get_refs_list(struct transport *transport, int for_push,
				 struct transport_ls_refs_options *transport_options)
{
	get_helper(transport);  これを実行するとエラーになる

この函数にステップインする:

	write_constant(helper->in, "capabilities\n");   これを実行すると

(gdb)
Program received signal SIGPIPE, Broken pipe.
0xffffe424 in __kernel_vsyscall ()

となる. これはデバッガ付きで実行するとこうなるらしい.

	write_constant(helper->in, "capabilities\n");

の次の行にブレークポイントをセットして再び最初から実行すると
そこに到達した.  (*A)

そして, 見た目正常終了している. 

git: 'remote-https' is not a git command. See 'git --help'.

のメッセージは表示されていない.
しかし ~/git_test にファイルがダウンロードされてはいない.

試しに (*A) のブレークポイントをはずして最初から実行すると...

git: 'remote-https' is not a git command. See 'git --help'.

とエラーは再現する. 謎. 通信している状態なのでデバッガで
止めたりすると違う現象を再現しているのかもしれない.


(*10) stack overflow でこのエラーを扱っていた

libcurl をインストールすることで回避したという話がある.

% wget -q https://curl.se/download/curl-7.77.0.tar.xz
% xz -d -c curl-7.77.0.tar.xz | tar xf -
% cd curl-7.77.0
% ./configure
...
configure: error: select TLS backend(s) or disable TLS with --without-ssl.

Select from these:

  --with-amissl
  --with-bearssl
  --with-gnutls
  --with-mbedtls
  --with-mesalink
  --with-nss
  --with-openssl (also works for BoringSSL and libressl)
  --with-rustls
  --with-schannel
  --with-secure-transport
  --with-wolfssl
% ./configure --with-gnutls
% make
% make install

% git-2.31.1-1.src/git-v2.31.1

configure を確認すると以下のコメントを発見した:

#
# Define NO_CURL if you do not have libcurl installed.  git-http-pull and
# git-http-push are not built, and you cannot use http:// and https://
# transports.

なるほどというところなのか...つまり

git pull

=> git fetch ...

=> コマンドがない

というところらしい.

% ./configure
% make
% sudo make install
% ls -l /usr/local/bin/git

インストールされていることを確認した.

% cd ~/git_test
% /usr/local/bin/git pull https://github.com/KeiHasegawa/GNU_tool
fatal: unable to access 'https://github.com/KeiHasegawa/GNU_tool/': Failed sending HTTP request
%

メッセージは変ったが, まだエラーしている.


% /usr/bin/git pull https://github.com/KeiHasegawa/GNU_tool

むむ. これまで動作していた git pull も影響を受けているようだ.


% cat y
setenv LD_LIBRARY_PATH /usr/lib
/usr/bin/git pull https://github.com/KeiHasegawa/GNU_tool
% csh -vf y
setenv LD_LIBRARY_PATH /usr/lib
/usr/bin/git pull https://github.com/KeiHasegawa/GNU_tool
From https://github.com/KeiHasegawa/GNU_tool
 * branch            HEAD       -> FETCH_HEAD
Already up-to-date.
%

なるほどこうすれば回避できている.

% cat y
setenv LD_LIBRARY_PATH /usr/lib
/usr/local/bin/git pull https://github.com/KeiHasegawa/GNU_tool
% csh -vf y
setenv LD_LIBRARY_PATH /usr/lib
/usr/local/bin/git pull https://github.com/KeiHasegawa/GNU_tool
From https://github.com/KeiHasegawa/GNU_tool
 * branch            HEAD       -> FETCH_HEAD
Already up-to-date.
%

これもできている. ということは, libcurl のビルドに問題があったのだろう
か.

libcurl のビルドを見直してみた:

  Host setup:       i686-pc-linux-gnu
  Install prefix:   /usr/local
  Compiler:         gcc
   CFLAGS:          -Werror-implicit-function-declaration -O2 -Wno-system-headers -Wenum-conversion -pthread
   CPPFLAGS:        -isystem /usr/local/include -isystem /usr/local/include -isystem /usr/local/include/p11-kit-1
   LDFLAGS:         -L/usr/local/lib -L/usr/local/lib
   LIBS:            -lpsl -lnettle -lgnutls -lzstd -lz -lrt

  curl version:     7.77.0
  SSL:              enabled (GnuTLS)
  SSH:              no      (--with-{libssh,libssh2})
  zlib:             enabled
  brotli:           no      (--with-brotli)
  zstd:             enabled (libzstd)
  GSS-API:          no      (--with-gssapi)
  GSASL:            no      (libgsasl not found)
  TLS-SRP:          enabled
  resolver:         POSIX threaded
  IPv6:             enabled
  Unix sockets:     enabled
  IDN:              no      (--with-{libidn2,winidn})
  Build libcurl:    Shared=yes, Static=yes
  Built-in manual:  enabled
  --libcurl option: enabled (--disable-libcurl-option)
  Verbose errors:   enabled (--disable-verbose)
  Code coverage:    disabled
  SSPI:             no      (--enable-sspi)
  ca cert bundle:   /etc/pki/tls/certs/ca-bundle.crt
  ca cert path:     no
  ca fallback:      no
  LDAP:             no      (--enable-ldap / --with-ldap-lib / --with-lber-lib)
  LDAPS:            no      (--enable-ldaps)
  RTSP:             enabled
  RTMP:             no      (--with-librtmp)
  Metalink:         no      (--with-libmetalink)
  PSL:              enabled
  Alt-svc:          enabled (--disable-alt-svc)
  HSTS:             enabled (--disable-hsts)
  HTTP1:            enabled (internal)
  HTTP2:            no      (--with-nghttp2, --with-hyper)
  HTTP3:            no      (--with-ngtcp2, --with-quiche)
  ECH:              no      (--enable-ech)
  Protocols:        DICT FILE FTP FTPS GOPHER GOPHERS HTTP HTTPS IMAP IMAPS MQTT POP3 POP3S RTSP SMB SMBS SMTP SMTPS TELNET TFTP
  Features:         AsynchDNS HSTS HTTPS-proxy IPv6 Largefile NTLM NTLM_WB PSL SSL TLS-SRP UnixSockets alt-svc libz zstd

よく分からない.

% sudo rm /usr/local/lib/libcurl*

としておいた.

以下のようにすれば git push の度にユーザー名とパスワードを入力しなくて済むようになるらしい:

% git config --global credential.helper cache

これは 15 分の期限付き


1 時間にしたいなら
% git config --global credential.helper 'cache --timeout=3600'

のようにするらしい.


